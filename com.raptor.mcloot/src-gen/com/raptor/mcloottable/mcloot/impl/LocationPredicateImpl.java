/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.BlockPredicate;
import com.raptor.mcloottable.mcloot.DoubleRange;
import com.raptor.mcloottable.mcloot.FluidPredicate;
import com.raptor.mcloottable.mcloot.LocationPredicate;
import com.raptor.mcloottable.mcloot.LongRange;
import com.raptor.mcloottable.mcloot.MclootPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Location Predicate</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getBiome <em>Biome</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getBlock <em>Block</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getDimension <em>Dimension</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getFeature <em>Feature</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getFluid <em>Fluid</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getLight <em>Light</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getXPos <em>XPos</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getYPos <em>YPos</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationPredicateImpl#getZPos <em>ZPos</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LocationPredicateImpl extends MinimalEObjectImpl.Container implements LocationPredicate
{
  /**
   * The default value of the '{@link #getBiome() <em>Biome</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBiome()
   * @generated
   * @ordered
   */
  protected static final String BIOME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBiome() <em>Biome</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBiome()
   * @generated
   * @ordered
   */
  protected String biome = BIOME_EDEFAULT;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected BlockPredicate block;

  /**
   * The default value of the '{@link #getDimension() <em>Dimension</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDimension()
   * @generated
   * @ordered
   */
  protected static final String DIMENSION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDimension() <em>Dimension</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDimension()
   * @generated
   * @ordered
   */
  protected String dimension = DIMENSION_EDEFAULT;

  /**
   * The default value of the '{@link #getFeature() <em>Feature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeature()
   * @generated
   * @ordered
   */
  protected static final String FEATURE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getFeature() <em>Feature</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFeature()
   * @generated
   * @ordered
   */
  protected String feature = FEATURE_EDEFAULT;

  /**
   * The cached value of the '{@link #getFluid() <em>Fluid</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFluid()
   * @generated
   * @ordered
   */
  protected FluidPredicate fluid;

  /**
   * The cached value of the '{@link #getLight() <em>Light</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLight()
   * @generated
   * @ordered
   */
  protected LongRange light;

  /**
   * The cached value of the '{@link #getXPos() <em>XPos</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getXPos()
   * @generated
   * @ordered
   */
  protected DoubleRange xPos;

  /**
   * The cached value of the '{@link #getYPos() <em>YPos</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getYPos()
   * @generated
   * @ordered
   */
  protected DoubleRange yPos;

  /**
   * The cached value of the '{@link #getZPos() <em>ZPos</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZPos()
   * @generated
   * @ordered
   */
  protected DoubleRange zPos;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LocationPredicateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.LOCATION_PREDICATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBiome()
  {
    return biome;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBiome(String newBiome)
  {
    String oldBiome = biome;
    biome = newBiome;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__BIOME, oldBiome, biome));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockPredicate getBlock()
  {
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBlock(BlockPredicate newBlock, NotificationChain msgs)
  {
    BlockPredicate oldBlock = block;
    block = newBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__BLOCK, oldBlock, newBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBlock(BlockPredicate newBlock)
  {
    if (newBlock != block)
    {
      NotificationChain msgs = null;
      if (block != null)
        msgs = ((InternalEObject)block).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__BLOCK, null, msgs);
      if (newBlock != null)
        msgs = ((InternalEObject)newBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__BLOCK, null, msgs);
      msgs = basicSetBlock(newBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__BLOCK, newBlock, newBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDimension()
  {
    return dimension;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDimension(String newDimension)
  {
    String oldDimension = dimension;
    dimension = newDimension;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__DIMENSION, oldDimension, dimension));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getFeature()
  {
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFeature(String newFeature)
  {
    String oldFeature = feature;
    feature = newFeature;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__FEATURE, oldFeature, feature));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FluidPredicate getFluid()
  {
    return fluid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFluid(FluidPredicate newFluid, NotificationChain msgs)
  {
    FluidPredicate oldFluid = fluid;
    fluid = newFluid;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__FLUID, oldFluid, newFluid);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFluid(FluidPredicate newFluid)
  {
    if (newFluid != fluid)
    {
      NotificationChain msgs = null;
      if (fluid != null)
        msgs = ((InternalEObject)fluid).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__FLUID, null, msgs);
      if (newFluid != null)
        msgs = ((InternalEObject)newFluid).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__FLUID, null, msgs);
      msgs = basicSetFluid(newFluid, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__FLUID, newFluid, newFluid));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LongRange getLight()
  {
    return light;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLight(LongRange newLight, NotificationChain msgs)
  {
    LongRange oldLight = light;
    light = newLight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__LIGHT, oldLight, newLight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLight(LongRange newLight)
  {
    if (newLight != light)
    {
      NotificationChain msgs = null;
      if (light != null)
        msgs = ((InternalEObject)light).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__LIGHT, null, msgs);
      if (newLight != null)
        msgs = ((InternalEObject)newLight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__LIGHT, null, msgs);
      msgs = basicSetLight(newLight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__LIGHT, newLight, newLight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleRange getXPos()
  {
    return xPos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetXPos(DoubleRange newXPos, NotificationChain msgs)
  {
    DoubleRange oldXPos = xPos;
    xPos = newXPos;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__XPOS, oldXPos, newXPos);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setXPos(DoubleRange newXPos)
  {
    if (newXPos != xPos)
    {
      NotificationChain msgs = null;
      if (xPos != null)
        msgs = ((InternalEObject)xPos).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__XPOS, null, msgs);
      if (newXPos != null)
        msgs = ((InternalEObject)newXPos).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__XPOS, null, msgs);
      msgs = basicSetXPos(newXPos, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__XPOS, newXPos, newXPos));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleRange getYPos()
  {
    return yPos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetYPos(DoubleRange newYPos, NotificationChain msgs)
  {
    DoubleRange oldYPos = yPos;
    yPos = newYPos;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__YPOS, oldYPos, newYPos);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setYPos(DoubleRange newYPos)
  {
    if (newYPos != yPos)
    {
      NotificationChain msgs = null;
      if (yPos != null)
        msgs = ((InternalEObject)yPos).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__YPOS, null, msgs);
      if (newYPos != null)
        msgs = ((InternalEObject)newYPos).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__YPOS, null, msgs);
      msgs = basicSetYPos(newYPos, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__YPOS, newYPos, newYPos));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleRange getZPos()
  {
    return zPos;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetZPos(DoubleRange newZPos, NotificationChain msgs)
  {
    DoubleRange oldZPos = zPos;
    zPos = newZPos;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__ZPOS, oldZPos, newZPos);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setZPos(DoubleRange newZPos)
  {
    if (newZPos != zPos)
    {
      NotificationChain msgs = null;
      if (zPos != null)
        msgs = ((InternalEObject)zPos).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__ZPOS, null, msgs);
      if (newZPos != null)
        msgs = ((InternalEObject)newZPos).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_PREDICATE__ZPOS, null, msgs);
      msgs = basicSetZPos(newZPos, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_PREDICATE__ZPOS, newZPos, newZPos));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_PREDICATE__BLOCK:
        return basicSetBlock(null, msgs);
      case MclootPackage.LOCATION_PREDICATE__FLUID:
        return basicSetFluid(null, msgs);
      case MclootPackage.LOCATION_PREDICATE__LIGHT:
        return basicSetLight(null, msgs);
      case MclootPackage.LOCATION_PREDICATE__XPOS:
        return basicSetXPos(null, msgs);
      case MclootPackage.LOCATION_PREDICATE__YPOS:
        return basicSetYPos(null, msgs);
      case MclootPackage.LOCATION_PREDICATE__ZPOS:
        return basicSetZPos(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_PREDICATE__BIOME:
        return getBiome();
      case MclootPackage.LOCATION_PREDICATE__BLOCK:
        return getBlock();
      case MclootPackage.LOCATION_PREDICATE__DIMENSION:
        return getDimension();
      case MclootPackage.LOCATION_PREDICATE__FEATURE:
        return getFeature();
      case MclootPackage.LOCATION_PREDICATE__FLUID:
        return getFluid();
      case MclootPackage.LOCATION_PREDICATE__LIGHT:
        return getLight();
      case MclootPackage.LOCATION_PREDICATE__XPOS:
        return getXPos();
      case MclootPackage.LOCATION_PREDICATE__YPOS:
        return getYPos();
      case MclootPackage.LOCATION_PREDICATE__ZPOS:
        return getZPos();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_PREDICATE__BIOME:
        setBiome((String)newValue);
        return;
      case MclootPackage.LOCATION_PREDICATE__BLOCK:
        setBlock((BlockPredicate)newValue);
        return;
      case MclootPackage.LOCATION_PREDICATE__DIMENSION:
        setDimension((String)newValue);
        return;
      case MclootPackage.LOCATION_PREDICATE__FEATURE:
        setFeature((String)newValue);
        return;
      case MclootPackage.LOCATION_PREDICATE__FLUID:
        setFluid((FluidPredicate)newValue);
        return;
      case MclootPackage.LOCATION_PREDICATE__LIGHT:
        setLight((LongRange)newValue);
        return;
      case MclootPackage.LOCATION_PREDICATE__XPOS:
        setXPos((DoubleRange)newValue);
        return;
      case MclootPackage.LOCATION_PREDICATE__YPOS:
        setYPos((DoubleRange)newValue);
        return;
      case MclootPackage.LOCATION_PREDICATE__ZPOS:
        setZPos((DoubleRange)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_PREDICATE__BIOME:
        setBiome(BIOME_EDEFAULT);
        return;
      case MclootPackage.LOCATION_PREDICATE__BLOCK:
        setBlock((BlockPredicate)null);
        return;
      case MclootPackage.LOCATION_PREDICATE__DIMENSION:
        setDimension(DIMENSION_EDEFAULT);
        return;
      case MclootPackage.LOCATION_PREDICATE__FEATURE:
        setFeature(FEATURE_EDEFAULT);
        return;
      case MclootPackage.LOCATION_PREDICATE__FLUID:
        setFluid((FluidPredicate)null);
        return;
      case MclootPackage.LOCATION_PREDICATE__LIGHT:
        setLight((LongRange)null);
        return;
      case MclootPackage.LOCATION_PREDICATE__XPOS:
        setXPos((DoubleRange)null);
        return;
      case MclootPackage.LOCATION_PREDICATE__YPOS:
        setYPos((DoubleRange)null);
        return;
      case MclootPackage.LOCATION_PREDICATE__ZPOS:
        setZPos((DoubleRange)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_PREDICATE__BIOME:
        return BIOME_EDEFAULT == null ? biome != null : !BIOME_EDEFAULT.equals(biome);
      case MclootPackage.LOCATION_PREDICATE__BLOCK:
        return block != null;
      case MclootPackage.LOCATION_PREDICATE__DIMENSION:
        return DIMENSION_EDEFAULT == null ? dimension != null : !DIMENSION_EDEFAULT.equals(dimension);
      case MclootPackage.LOCATION_PREDICATE__FEATURE:
        return FEATURE_EDEFAULT == null ? feature != null : !FEATURE_EDEFAULT.equals(feature);
      case MclootPackage.LOCATION_PREDICATE__FLUID:
        return fluid != null;
      case MclootPackage.LOCATION_PREDICATE__LIGHT:
        return light != null;
      case MclootPackage.LOCATION_PREDICATE__XPOS:
        return xPos != null;
      case MclootPackage.LOCATION_PREDICATE__YPOS:
        return yPos != null;
      case MclootPackage.LOCATION_PREDICATE__ZPOS:
        return zPos != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (biome: ");
    result.append(biome);
    result.append(", dimension: ");
    result.append(dimension);
    result.append(", feature: ");
    result.append(feature);
    result.append(')');
    return result.toString();
  }

} //LocationPredicateImpl
