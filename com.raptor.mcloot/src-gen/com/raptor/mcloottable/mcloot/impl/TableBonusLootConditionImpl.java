/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.MclootPackage;
import com.raptor.mcloottable.mcloot.TableBonusLootCondition;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Table Bonus Loot Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.TableBonusLootConditionImpl#getEnchantment <em>Enchantment</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.TableBonusLootConditionImpl#getChances <em>Chances</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TableBonusLootConditionImpl extends NamedLootConditionImpl implements TableBonusLootCondition
{
  /**
   * The default value of the '{@link #getEnchantment() <em>Enchantment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnchantment()
   * @generated
   * @ordered
   */
  protected static final String ENCHANTMENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEnchantment() <em>Enchantment</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnchantment()
   * @generated
   * @ordered
   */
  protected String enchantment = ENCHANTMENT_EDEFAULT;

  /**
   * The cached value of the '{@link #getChances() <em>Chances</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChances()
   * @generated
   * @ordered
   */
  protected EList<Double> chances;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableBonusLootConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.TABLE_BONUS_LOOT_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEnchantment()
  {
    return enchantment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnchantment(String newEnchantment)
  {
    String oldEnchantment = enchantment;
    enchantment = newEnchantment;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.TABLE_BONUS_LOOT_CONDITION__ENCHANTMENT, oldEnchantment, enchantment));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Double> getChances()
  {
    if (chances == null)
    {
      chances = new EDataTypeEList<Double>(Double.class, this, MclootPackage.TABLE_BONUS_LOOT_CONDITION__CHANCES);
    }
    return chances;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION__ENCHANTMENT:
        return getEnchantment();
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION__CHANCES:
        return getChances();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION__ENCHANTMENT:
        setEnchantment((String)newValue);
        return;
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION__CHANCES:
        getChances().clear();
        getChances().addAll((Collection<? extends Double>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION__ENCHANTMENT:
        setEnchantment(ENCHANTMENT_EDEFAULT);
        return;
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION__CHANCES:
        getChances().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION__ENCHANTMENT:
        return ENCHANTMENT_EDEFAULT == null ? enchantment != null : !ENCHANTMENT_EDEFAULT.equals(enchantment);
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION__CHANCES:
        return chances != null && !chances.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (enchantment: ");
    result.append(enchantment);
    result.append(", chances: ");
    result.append(chances);
    result.append(')');
    return result.toString();
  }

} //TableBonusLootConditionImpl
