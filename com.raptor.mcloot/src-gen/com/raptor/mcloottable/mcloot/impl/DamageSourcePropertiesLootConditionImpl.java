/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.DamageSourcePropertiesLootCondition;
import com.raptor.mcloottable.mcloot.EntityPredicate;
import com.raptor.mcloottable.mcloot.MclootPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Damage Source Properties Loot Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isBypassesArmorDefined <em>Bypasses Armor Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isBypassesArmor <em>Bypasses Armor</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isBypassesInvulnerabilityDefined <em>Bypasses Invulnerability Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isBypassesInvulnerability <em>Bypasses Invulnerability</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isBypassesMagicDefined <em>Bypasses Magic Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isBypassesMagic <em>Bypasses Magic</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#getDirectEntity <em>Direct Entity</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isExplosionDefined <em>Explosion Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isExplosion <em>Explosion</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isFireDefined <em>Fire Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isFire <em>Fire</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isMagicDefined <em>Magic Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isMagic <em>Magic</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isProjectileDefined <em>Projectile Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isProjectile <em>Projectile</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isLightningDefined <em>Lightning Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#isLightning <em>Lightning</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.DamageSourcePropertiesLootConditionImpl#getSourceEntity <em>Source Entity</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DamageSourcePropertiesLootConditionImpl extends NamedLootConditionImpl implements DamageSourcePropertiesLootCondition
{
  /**
   * The default value of the '{@link #isBypassesArmorDefined() <em>Bypasses Armor Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesArmorDefined()
   * @generated
   * @ordered
   */
  protected static final boolean BYPASSES_ARMOR_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBypassesArmorDefined() <em>Bypasses Armor Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesArmorDefined()
   * @generated
   * @ordered
   */
  protected boolean bypassesArmorDefined = BYPASSES_ARMOR_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isBypassesArmor() <em>Bypasses Armor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesArmor()
   * @generated
   * @ordered
   */
  protected static final boolean BYPASSES_ARMOR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBypassesArmor() <em>Bypasses Armor</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesArmor()
   * @generated
   * @ordered
   */
  protected boolean bypassesArmor = BYPASSES_ARMOR_EDEFAULT;

  /**
   * The default value of the '{@link #isBypassesInvulnerabilityDefined() <em>Bypasses Invulnerability Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesInvulnerabilityDefined()
   * @generated
   * @ordered
   */
  protected static final boolean BYPASSES_INVULNERABILITY_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBypassesInvulnerabilityDefined() <em>Bypasses Invulnerability Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesInvulnerabilityDefined()
   * @generated
   * @ordered
   */
  protected boolean bypassesInvulnerabilityDefined = BYPASSES_INVULNERABILITY_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isBypassesInvulnerability() <em>Bypasses Invulnerability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesInvulnerability()
   * @generated
   * @ordered
   */
  protected static final boolean BYPASSES_INVULNERABILITY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBypassesInvulnerability() <em>Bypasses Invulnerability</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesInvulnerability()
   * @generated
   * @ordered
   */
  protected boolean bypassesInvulnerability = BYPASSES_INVULNERABILITY_EDEFAULT;

  /**
   * The default value of the '{@link #isBypassesMagicDefined() <em>Bypasses Magic Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesMagicDefined()
   * @generated
   * @ordered
   */
  protected static final boolean BYPASSES_MAGIC_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBypassesMagicDefined() <em>Bypasses Magic Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesMagicDefined()
   * @generated
   * @ordered
   */
  protected boolean bypassesMagicDefined = BYPASSES_MAGIC_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isBypassesMagic() <em>Bypasses Magic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesMagic()
   * @generated
   * @ordered
   */
  protected static final boolean BYPASSES_MAGIC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBypassesMagic() <em>Bypasses Magic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBypassesMagic()
   * @generated
   * @ordered
   */
  protected boolean bypassesMagic = BYPASSES_MAGIC_EDEFAULT;

  /**
   * The cached value of the '{@link #getDirectEntity() <em>Direct Entity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDirectEntity()
   * @generated
   * @ordered
   */
  protected EntityPredicate directEntity;

  /**
   * The default value of the '{@link #isExplosionDefined() <em>Explosion Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExplosionDefined()
   * @generated
   * @ordered
   */
  protected static final boolean EXPLOSION_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExplosionDefined() <em>Explosion Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExplosionDefined()
   * @generated
   * @ordered
   */
  protected boolean explosionDefined = EXPLOSION_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isExplosion() <em>Explosion</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExplosion()
   * @generated
   * @ordered
   */
  protected static final boolean EXPLOSION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExplosion() <em>Explosion</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExplosion()
   * @generated
   * @ordered
   */
  protected boolean explosion = EXPLOSION_EDEFAULT;

  /**
   * The default value of the '{@link #isFireDefined() <em>Fire Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFireDefined()
   * @generated
   * @ordered
   */
  protected static final boolean FIRE_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFireDefined() <em>Fire Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFireDefined()
   * @generated
   * @ordered
   */
  protected boolean fireDefined = FIRE_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isFire() <em>Fire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFire()
   * @generated
   * @ordered
   */
  protected static final boolean FIRE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFire() <em>Fire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFire()
   * @generated
   * @ordered
   */
  protected boolean fire = FIRE_EDEFAULT;

  /**
   * The default value of the '{@link #isMagicDefined() <em>Magic Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMagicDefined()
   * @generated
   * @ordered
   */
  protected static final boolean MAGIC_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMagicDefined() <em>Magic Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMagicDefined()
   * @generated
   * @ordered
   */
  protected boolean magicDefined = MAGIC_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isMagic() <em>Magic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMagic()
   * @generated
   * @ordered
   */
  protected static final boolean MAGIC_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isMagic() <em>Magic</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isMagic()
   * @generated
   * @ordered
   */
  protected boolean magic = MAGIC_EDEFAULT;

  /**
   * The default value of the '{@link #isProjectileDefined() <em>Projectile Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProjectileDefined()
   * @generated
   * @ordered
   */
  protected static final boolean PROJECTILE_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isProjectileDefined() <em>Projectile Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProjectileDefined()
   * @generated
   * @ordered
   */
  protected boolean projectileDefined = PROJECTILE_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isProjectile() <em>Projectile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProjectile()
   * @generated
   * @ordered
   */
  protected static final boolean PROJECTILE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isProjectile() <em>Projectile</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isProjectile()
   * @generated
   * @ordered
   */
  protected boolean projectile = PROJECTILE_EDEFAULT;

  /**
   * The default value of the '{@link #isLightningDefined() <em>Lightning Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLightningDefined()
   * @generated
   * @ordered
   */
  protected static final boolean LIGHTNING_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isLightningDefined() <em>Lightning Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLightningDefined()
   * @generated
   * @ordered
   */
  protected boolean lightningDefined = LIGHTNING_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isLightning() <em>Lightning</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLightning()
   * @generated
   * @ordered
   */
  protected static final boolean LIGHTNING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isLightning() <em>Lightning</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLightning()
   * @generated
   * @ordered
   */
  protected boolean lightning = LIGHTNING_EDEFAULT;

  /**
   * The cached value of the '{@link #getSourceEntity() <em>Source Entity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSourceEntity()
   * @generated
   * @ordered
   */
  protected EntityPredicate sourceEntity;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DamageSourcePropertiesLootConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBypassesArmorDefined()
  {
    return bypassesArmorDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBypassesArmorDefined(boolean newBypassesArmorDefined)
  {
    boolean oldBypassesArmorDefined = bypassesArmorDefined;
    bypassesArmorDefined = newBypassesArmorDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR_DEFINED, oldBypassesArmorDefined, bypassesArmorDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBypassesArmor()
  {
    return bypassesArmor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBypassesArmor(boolean newBypassesArmor)
  {
    boolean oldBypassesArmor = bypassesArmor;
    bypassesArmor = newBypassesArmor;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR, oldBypassesArmor, bypassesArmor));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBypassesInvulnerabilityDefined()
  {
    return bypassesInvulnerabilityDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBypassesInvulnerabilityDefined(boolean newBypassesInvulnerabilityDefined)
  {
    boolean oldBypassesInvulnerabilityDefined = bypassesInvulnerabilityDefined;
    bypassesInvulnerabilityDefined = newBypassesInvulnerabilityDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY_DEFINED, oldBypassesInvulnerabilityDefined, bypassesInvulnerabilityDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBypassesInvulnerability()
  {
    return bypassesInvulnerability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBypassesInvulnerability(boolean newBypassesInvulnerability)
  {
    boolean oldBypassesInvulnerability = bypassesInvulnerability;
    bypassesInvulnerability = newBypassesInvulnerability;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY, oldBypassesInvulnerability, bypassesInvulnerability));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBypassesMagicDefined()
  {
    return bypassesMagicDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBypassesMagicDefined(boolean newBypassesMagicDefined)
  {
    boolean oldBypassesMagicDefined = bypassesMagicDefined;
    bypassesMagicDefined = newBypassesMagicDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC_DEFINED, oldBypassesMagicDefined, bypassesMagicDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBypassesMagic()
  {
    return bypassesMagic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBypassesMagic(boolean newBypassesMagic)
  {
    boolean oldBypassesMagic = bypassesMagic;
    bypassesMagic = newBypassesMagic;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC, oldBypassesMagic, bypassesMagic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityPredicate getDirectEntity()
  {
    return directEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDirectEntity(EntityPredicate newDirectEntity, NotificationChain msgs)
  {
    EntityPredicate oldDirectEntity = directEntity;
    directEntity = newDirectEntity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY, oldDirectEntity, newDirectEntity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDirectEntity(EntityPredicate newDirectEntity)
  {
    if (newDirectEntity != directEntity)
    {
      NotificationChain msgs = null;
      if (directEntity != null)
        msgs = ((InternalEObject)directEntity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY, null, msgs);
      if (newDirectEntity != null)
        msgs = ((InternalEObject)newDirectEntity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY, null, msgs);
      msgs = basicSetDirectEntity(newDirectEntity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY, newDirectEntity, newDirectEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isExplosionDefined()
  {
    return explosionDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExplosionDefined(boolean newExplosionDefined)
  {
    boolean oldExplosionDefined = explosionDefined;
    explosionDefined = newExplosionDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION_DEFINED, oldExplosionDefined, explosionDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isExplosion()
  {
    return explosion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExplosion(boolean newExplosion)
  {
    boolean oldExplosion = explosion;
    explosion = newExplosion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION, oldExplosion, explosion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFireDefined()
  {
    return fireDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFireDefined(boolean newFireDefined)
  {
    boolean oldFireDefined = fireDefined;
    fireDefined = newFireDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE_DEFINED, oldFireDefined, fireDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFire()
  {
    return fire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFire(boolean newFire)
  {
    boolean oldFire = fire;
    fire = newFire;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE, oldFire, fire));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMagicDefined()
  {
    return magicDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMagicDefined(boolean newMagicDefined)
  {
    boolean oldMagicDefined = magicDefined;
    magicDefined = newMagicDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC_DEFINED, oldMagicDefined, magicDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isMagic()
  {
    return magic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMagic(boolean newMagic)
  {
    boolean oldMagic = magic;
    magic = newMagic;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC, oldMagic, magic));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isProjectileDefined()
  {
    return projectileDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProjectileDefined(boolean newProjectileDefined)
  {
    boolean oldProjectileDefined = projectileDefined;
    projectileDefined = newProjectileDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE_DEFINED, oldProjectileDefined, projectileDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isProjectile()
  {
    return projectile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProjectile(boolean newProjectile)
  {
    boolean oldProjectile = projectile;
    projectile = newProjectile;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE, oldProjectile, projectile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isLightningDefined()
  {
    return lightningDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLightningDefined(boolean newLightningDefined)
  {
    boolean oldLightningDefined = lightningDefined;
    lightningDefined = newLightningDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING_DEFINED, oldLightningDefined, lightningDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isLightning()
  {
    return lightning;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLightning(boolean newLightning)
  {
    boolean oldLightning = lightning;
    lightning = newLightning;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING, oldLightning, lightning));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityPredicate getSourceEntity()
  {
    return sourceEntity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSourceEntity(EntityPredicate newSourceEntity, NotificationChain msgs)
  {
    EntityPredicate oldSourceEntity = sourceEntity;
    sourceEntity = newSourceEntity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY, oldSourceEntity, newSourceEntity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSourceEntity(EntityPredicate newSourceEntity)
  {
    if (newSourceEntity != sourceEntity)
    {
      NotificationChain msgs = null;
      if (sourceEntity != null)
        msgs = ((InternalEObject)sourceEntity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY, null, msgs);
      if (newSourceEntity != null)
        msgs = ((InternalEObject)newSourceEntity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY, null, msgs);
      msgs = basicSetSourceEntity(newSourceEntity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY, newSourceEntity, newSourceEntity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY:
        return basicSetDirectEntity(null, msgs);
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY:
        return basicSetSourceEntity(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR_DEFINED:
        return isBypassesArmorDefined();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR:
        return isBypassesArmor();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY_DEFINED:
        return isBypassesInvulnerabilityDefined();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY:
        return isBypassesInvulnerability();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC_DEFINED:
        return isBypassesMagicDefined();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC:
        return isBypassesMagic();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY:
        return getDirectEntity();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION_DEFINED:
        return isExplosionDefined();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION:
        return isExplosion();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE_DEFINED:
        return isFireDefined();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE:
        return isFire();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC_DEFINED:
        return isMagicDefined();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC:
        return isMagic();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE_DEFINED:
        return isProjectileDefined();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE:
        return isProjectile();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING_DEFINED:
        return isLightningDefined();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING:
        return isLightning();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY:
        return getSourceEntity();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR_DEFINED:
        setBypassesArmorDefined((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR:
        setBypassesArmor((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY_DEFINED:
        setBypassesInvulnerabilityDefined((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY:
        setBypassesInvulnerability((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC_DEFINED:
        setBypassesMagicDefined((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC:
        setBypassesMagic((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY:
        setDirectEntity((EntityPredicate)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION_DEFINED:
        setExplosionDefined((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION:
        setExplosion((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE_DEFINED:
        setFireDefined((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE:
        setFire((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC_DEFINED:
        setMagicDefined((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC:
        setMagic((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE_DEFINED:
        setProjectileDefined((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE:
        setProjectile((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING_DEFINED:
        setLightningDefined((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING:
        setLightning((Boolean)newValue);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY:
        setSourceEntity((EntityPredicate)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR_DEFINED:
        setBypassesArmorDefined(BYPASSES_ARMOR_DEFINED_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR:
        setBypassesArmor(BYPASSES_ARMOR_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY_DEFINED:
        setBypassesInvulnerabilityDefined(BYPASSES_INVULNERABILITY_DEFINED_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY:
        setBypassesInvulnerability(BYPASSES_INVULNERABILITY_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC_DEFINED:
        setBypassesMagicDefined(BYPASSES_MAGIC_DEFINED_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC:
        setBypassesMagic(BYPASSES_MAGIC_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY:
        setDirectEntity((EntityPredicate)null);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION_DEFINED:
        setExplosionDefined(EXPLOSION_DEFINED_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION:
        setExplosion(EXPLOSION_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE_DEFINED:
        setFireDefined(FIRE_DEFINED_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE:
        setFire(FIRE_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC_DEFINED:
        setMagicDefined(MAGIC_DEFINED_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC:
        setMagic(MAGIC_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE_DEFINED:
        setProjectileDefined(PROJECTILE_DEFINED_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE:
        setProjectile(PROJECTILE_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING_DEFINED:
        setLightningDefined(LIGHTNING_DEFINED_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING:
        setLightning(LIGHTNING_EDEFAULT);
        return;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY:
        setSourceEntity((EntityPredicate)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR_DEFINED:
        return bypassesArmorDefined != BYPASSES_ARMOR_DEFINED_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_ARMOR:
        return bypassesArmor != BYPASSES_ARMOR_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY_DEFINED:
        return bypassesInvulnerabilityDefined != BYPASSES_INVULNERABILITY_DEFINED_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_INVULNERABILITY:
        return bypassesInvulnerability != BYPASSES_INVULNERABILITY_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC_DEFINED:
        return bypassesMagicDefined != BYPASSES_MAGIC_DEFINED_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__BYPASSES_MAGIC:
        return bypassesMagic != BYPASSES_MAGIC_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__DIRECT_ENTITY:
        return directEntity != null;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION_DEFINED:
        return explosionDefined != EXPLOSION_DEFINED_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__EXPLOSION:
        return explosion != EXPLOSION_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE_DEFINED:
        return fireDefined != FIRE_DEFINED_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__FIRE:
        return fire != FIRE_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC_DEFINED:
        return magicDefined != MAGIC_DEFINED_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__MAGIC:
        return magic != MAGIC_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE_DEFINED:
        return projectileDefined != PROJECTILE_DEFINED_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__PROJECTILE:
        return projectile != PROJECTILE_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING_DEFINED:
        return lightningDefined != LIGHTNING_DEFINED_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__LIGHTNING:
        return lightning != LIGHTNING_EDEFAULT;
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION__SOURCE_ENTITY:
        return sourceEntity != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (bypassesArmorDefined: ");
    result.append(bypassesArmorDefined);
    result.append(", bypassesArmor: ");
    result.append(bypassesArmor);
    result.append(", bypassesInvulnerabilityDefined: ");
    result.append(bypassesInvulnerabilityDefined);
    result.append(", bypassesInvulnerability: ");
    result.append(bypassesInvulnerability);
    result.append(", bypassesMagicDefined: ");
    result.append(bypassesMagicDefined);
    result.append(", bypassesMagic: ");
    result.append(bypassesMagic);
    result.append(", explosionDefined: ");
    result.append(explosionDefined);
    result.append(", explosion: ");
    result.append(explosion);
    result.append(", fireDefined: ");
    result.append(fireDefined);
    result.append(", fire: ");
    result.append(fire);
    result.append(", magicDefined: ");
    result.append(magicDefined);
    result.append(", magic: ");
    result.append(magic);
    result.append(", projectileDefined: ");
    result.append(projectileDefined);
    result.append(", projectile: ");
    result.append(projectile);
    result.append(", lightningDefined: ");
    result.append(lightningDefined);
    result.append(", lightning: ");
    result.append(lightning);
    result.append(')');
    return result.toString();
  }

} //DamageSourcePropertiesLootConditionImpl
