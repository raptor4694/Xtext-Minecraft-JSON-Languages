/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.EnchantWithLevelsLootFunction;
import com.raptor.mcloottable.mcloot.LongRange;
import com.raptor.mcloottable.mcloot.MclootPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Enchant With Levels Loot Function</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EnchantWithLevelsLootFunctionImpl#isTreasureDefined <em>Treasure Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EnchantWithLevelsLootFunctionImpl#isTreasure <em>Treasure</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EnchantWithLevelsLootFunctionImpl#getLevels <em>Levels</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EnchantWithLevelsLootFunctionImpl extends LootFunctionImpl implements EnchantWithLevelsLootFunction
{
  /**
   * The default value of the '{@link #isTreasureDefined() <em>Treasure Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTreasureDefined()
   * @generated
   * @ordered
   */
  protected static final boolean TREASURE_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTreasureDefined() <em>Treasure Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTreasureDefined()
   * @generated
   * @ordered
   */
  protected boolean treasureDefined = TREASURE_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isTreasure() <em>Treasure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTreasure()
   * @generated
   * @ordered
   */
  protected static final boolean TREASURE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTreasure() <em>Treasure</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTreasure()
   * @generated
   * @ordered
   */
  protected boolean treasure = TREASURE_EDEFAULT;

  /**
   * The cached value of the '{@link #getLevels() <em>Levels</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLevels()
   * @generated
   * @ordered
   */
  protected LongRange levels;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EnchantWithLevelsLootFunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.ENCHANT_WITH_LEVELS_LOOT_FUNCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTreasureDefined()
  {
    return treasureDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTreasureDefined(boolean newTreasureDefined)
  {
    boolean oldTreasureDefined = treasureDefined;
    treasureDefined = newTreasureDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE_DEFINED, oldTreasureDefined, treasureDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTreasure()
  {
    return treasure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTreasure(boolean newTreasure)
  {
    boolean oldTreasure = treasure;
    treasure = newTreasure;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE, oldTreasure, treasure));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LongRange getLevels()
  {
    return levels;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLevels(LongRange newLevels, NotificationChain msgs)
  {
    LongRange oldLevels = levels;
    levels = newLevels;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS, oldLevels, newLevels);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLevels(LongRange newLevels)
  {
    if (newLevels != levels)
    {
      NotificationChain msgs = null;
      if (levels != null)
        msgs = ((InternalEObject)levels).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS, null, msgs);
      if (newLevels != null)
        msgs = ((InternalEObject)newLevels).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS, null, msgs);
      msgs = basicSetLevels(newLevels, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS, newLevels, newLevels));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS:
        return basicSetLevels(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE_DEFINED:
        return isTreasureDefined();
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE:
        return isTreasure();
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS:
        return getLevels();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE_DEFINED:
        setTreasureDefined((Boolean)newValue);
        return;
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE:
        setTreasure((Boolean)newValue);
        return;
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS:
        setLevels((LongRange)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE_DEFINED:
        setTreasureDefined(TREASURE_DEFINED_EDEFAULT);
        return;
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE:
        setTreasure(TREASURE_EDEFAULT);
        return;
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS:
        setLevels((LongRange)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE_DEFINED:
        return treasureDefined != TREASURE_DEFINED_EDEFAULT;
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__TREASURE:
        return treasure != TREASURE_EDEFAULT;
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION__LEVELS:
        return levels != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (treasureDefined: ");
    result.append(treasureDefined);
    result.append(", treasure: ");
    result.append(treasure);
    result.append(')');
    return result.toString();
  }

} //EnchantWithLevelsLootFunctionImpl
