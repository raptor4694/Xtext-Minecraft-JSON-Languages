/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.DoubleRange;
import com.raptor.mcloottable.mcloot.LongRange;
import com.raptor.mcloottable.mcloot.LootCondition;
import com.raptor.mcloottable.mcloot.LootEntry;
import com.raptor.mcloottable.mcloot.LootFunction;
import com.raptor.mcloottable.mcloot.LootPool;
import com.raptor.mcloottable.mcloot.MclootPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Loot Pool</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#isConditionsDefined <em>Conditions Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#isRollsDefined <em>Rolls Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#getRolls <em>Rolls</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#isEntriesDefined <em>Entries Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#getEntries <em>Entries</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#isBonusRollsDefined <em>Bonus Rolls Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#getBonusRolls <em>Bonus Rolls</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#isFunctionsDefined <em>Functions Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootPoolImpl#getFunctions <em>Functions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LootPoolImpl extends MinimalEObjectImpl.Container implements LootPool
{
  /**
   * The default value of the '{@link #isConditionsDefined() <em>Conditions Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConditionsDefined()
   * @generated
   * @ordered
   */
  protected static final boolean CONDITIONS_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isConditionsDefined() <em>Conditions Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConditionsDefined()
   * @generated
   * @ordered
   */
  protected boolean conditionsDefined = CONDITIONS_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<LootCondition> conditions;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #isRollsDefined() <em>Rolls Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRollsDefined()
   * @generated
   * @ordered
   */
  protected static final boolean ROLLS_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRollsDefined() <em>Rolls Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRollsDefined()
   * @generated
   * @ordered
   */
  protected boolean rollsDefined = ROLLS_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getRolls() <em>Rolls</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRolls()
   * @generated
   * @ordered
   */
  protected LongRange rolls;

  /**
   * The default value of the '{@link #isEntriesDefined() <em>Entries Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEntriesDefined()
   * @generated
   * @ordered
   */
  protected static final boolean ENTRIES_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isEntriesDefined() <em>Entries Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isEntriesDefined()
   * @generated
   * @ordered
   */
  protected boolean entriesDefined = ENTRIES_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getEntries() <em>Entries</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntries()
   * @generated
   * @ordered
   */
  protected EList<LootEntry> entries;

  /**
   * The default value of the '{@link #isBonusRollsDefined() <em>Bonus Rolls Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBonusRollsDefined()
   * @generated
   * @ordered
   */
  protected static final boolean BONUS_ROLLS_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBonusRollsDefined() <em>Bonus Rolls Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBonusRollsDefined()
   * @generated
   * @ordered
   */
  protected boolean bonusRollsDefined = BONUS_ROLLS_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getBonusRolls() <em>Bonus Rolls</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBonusRolls()
   * @generated
   * @ordered
   */
  protected DoubleRange bonusRolls;

  /**
   * The default value of the '{@link #isFunctionsDefined() <em>Functions Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFunctionsDefined()
   * @generated
   * @ordered
   */
  protected static final boolean FUNCTIONS_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isFunctionsDefined() <em>Functions Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isFunctionsDefined()
   * @generated
   * @ordered
   */
  protected boolean functionsDefined = FUNCTIONS_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getFunctions() <em>Functions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctions()
   * @generated
   * @ordered
   */
  protected EList<LootFunction> functions;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LootPoolImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.LOOT_POOL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isConditionsDefined()
  {
    return conditionsDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionsDefined(boolean newConditionsDefined)
  {
    boolean oldConditionsDefined = conditionsDefined;
    conditionsDefined = newConditionsDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__CONDITIONS_DEFINED, oldConditionsDefined, conditionsDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LootCondition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<LootCondition>(LootCondition.class, this, MclootPackage.LOOT_POOL__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRollsDefined()
  {
    return rollsDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRollsDefined(boolean newRollsDefined)
  {
    boolean oldRollsDefined = rollsDefined;
    rollsDefined = newRollsDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__ROLLS_DEFINED, oldRollsDefined, rollsDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LongRange getRolls()
  {
    return rolls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRolls(LongRange newRolls, NotificationChain msgs)
  {
    LongRange oldRolls = rolls;
    rolls = newRolls;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__ROLLS, oldRolls, newRolls);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRolls(LongRange newRolls)
  {
    if (newRolls != rolls)
    {
      NotificationChain msgs = null;
      if (rolls != null)
        msgs = ((InternalEObject)rolls).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOOT_POOL__ROLLS, null, msgs);
      if (newRolls != null)
        msgs = ((InternalEObject)newRolls).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOOT_POOL__ROLLS, null, msgs);
      msgs = basicSetRolls(newRolls, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__ROLLS, newRolls, newRolls));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isEntriesDefined()
  {
    return entriesDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEntriesDefined(boolean newEntriesDefined)
  {
    boolean oldEntriesDefined = entriesDefined;
    entriesDefined = newEntriesDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__ENTRIES_DEFINED, oldEntriesDefined, entriesDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LootEntry> getEntries()
  {
    if (entries == null)
    {
      entries = new EObjectContainmentEList<LootEntry>(LootEntry.class, this, MclootPackage.LOOT_POOL__ENTRIES);
    }
    return entries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBonusRollsDefined()
  {
    return bonusRollsDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBonusRollsDefined(boolean newBonusRollsDefined)
  {
    boolean oldBonusRollsDefined = bonusRollsDefined;
    bonusRollsDefined = newBonusRollsDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__BONUS_ROLLS_DEFINED, oldBonusRollsDefined, bonusRollsDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleRange getBonusRolls()
  {
    return bonusRolls;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBonusRolls(DoubleRange newBonusRolls, NotificationChain msgs)
  {
    DoubleRange oldBonusRolls = bonusRolls;
    bonusRolls = newBonusRolls;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__BONUS_ROLLS, oldBonusRolls, newBonusRolls);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBonusRolls(DoubleRange newBonusRolls)
  {
    if (newBonusRolls != bonusRolls)
    {
      NotificationChain msgs = null;
      if (bonusRolls != null)
        msgs = ((InternalEObject)bonusRolls).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOOT_POOL__BONUS_ROLLS, null, msgs);
      if (newBonusRolls != null)
        msgs = ((InternalEObject)newBonusRolls).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOOT_POOL__BONUS_ROLLS, null, msgs);
      msgs = basicSetBonusRolls(newBonusRolls, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__BONUS_ROLLS, newBonusRolls, newBonusRolls));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFunctionsDefined()
  {
    return functionsDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunctionsDefined(boolean newFunctionsDefined)
  {
    boolean oldFunctionsDefined = functionsDefined;
    functionsDefined = newFunctionsDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_POOL__FUNCTIONS_DEFINED, oldFunctionsDefined, functionsDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LootFunction> getFunctions()
  {
    if (functions == null)
    {
      functions = new EObjectContainmentEList<LootFunction>(LootFunction.class, this, MclootPackage.LOOT_POOL__FUNCTIONS);
    }
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_POOL__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case MclootPackage.LOOT_POOL__ROLLS:
        return basicSetRolls(null, msgs);
      case MclootPackage.LOOT_POOL__ENTRIES:
        return ((InternalEList<?>)getEntries()).basicRemove(otherEnd, msgs);
      case MclootPackage.LOOT_POOL__BONUS_ROLLS:
        return basicSetBonusRolls(null, msgs);
      case MclootPackage.LOOT_POOL__FUNCTIONS:
        return ((InternalEList<?>)getFunctions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_POOL__CONDITIONS_DEFINED:
        return isConditionsDefined();
      case MclootPackage.LOOT_POOL__CONDITIONS:
        return getConditions();
      case MclootPackage.LOOT_POOL__NAME:
        return getName();
      case MclootPackage.LOOT_POOL__ROLLS_DEFINED:
        return isRollsDefined();
      case MclootPackage.LOOT_POOL__ROLLS:
        return getRolls();
      case MclootPackage.LOOT_POOL__ENTRIES_DEFINED:
        return isEntriesDefined();
      case MclootPackage.LOOT_POOL__ENTRIES:
        return getEntries();
      case MclootPackage.LOOT_POOL__BONUS_ROLLS_DEFINED:
        return isBonusRollsDefined();
      case MclootPackage.LOOT_POOL__BONUS_ROLLS:
        return getBonusRolls();
      case MclootPackage.LOOT_POOL__FUNCTIONS_DEFINED:
        return isFunctionsDefined();
      case MclootPackage.LOOT_POOL__FUNCTIONS:
        return getFunctions();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_POOL__CONDITIONS_DEFINED:
        setConditionsDefined((Boolean)newValue);
        return;
      case MclootPackage.LOOT_POOL__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends LootCondition>)newValue);
        return;
      case MclootPackage.LOOT_POOL__NAME:
        setName((String)newValue);
        return;
      case MclootPackage.LOOT_POOL__ROLLS_DEFINED:
        setRollsDefined((Boolean)newValue);
        return;
      case MclootPackage.LOOT_POOL__ROLLS:
        setRolls((LongRange)newValue);
        return;
      case MclootPackage.LOOT_POOL__ENTRIES_DEFINED:
        setEntriesDefined((Boolean)newValue);
        return;
      case MclootPackage.LOOT_POOL__ENTRIES:
        getEntries().clear();
        getEntries().addAll((Collection<? extends LootEntry>)newValue);
        return;
      case MclootPackage.LOOT_POOL__BONUS_ROLLS_DEFINED:
        setBonusRollsDefined((Boolean)newValue);
        return;
      case MclootPackage.LOOT_POOL__BONUS_ROLLS:
        setBonusRolls((DoubleRange)newValue);
        return;
      case MclootPackage.LOOT_POOL__FUNCTIONS_DEFINED:
        setFunctionsDefined((Boolean)newValue);
        return;
      case MclootPackage.LOOT_POOL__FUNCTIONS:
        getFunctions().clear();
        getFunctions().addAll((Collection<? extends LootFunction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_POOL__CONDITIONS_DEFINED:
        setConditionsDefined(CONDITIONS_DEFINED_EDEFAULT);
        return;
      case MclootPackage.LOOT_POOL__CONDITIONS:
        getConditions().clear();
        return;
      case MclootPackage.LOOT_POOL__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MclootPackage.LOOT_POOL__ROLLS_DEFINED:
        setRollsDefined(ROLLS_DEFINED_EDEFAULT);
        return;
      case MclootPackage.LOOT_POOL__ROLLS:
        setRolls((LongRange)null);
        return;
      case MclootPackage.LOOT_POOL__ENTRIES_DEFINED:
        setEntriesDefined(ENTRIES_DEFINED_EDEFAULT);
        return;
      case MclootPackage.LOOT_POOL__ENTRIES:
        getEntries().clear();
        return;
      case MclootPackage.LOOT_POOL__BONUS_ROLLS_DEFINED:
        setBonusRollsDefined(BONUS_ROLLS_DEFINED_EDEFAULT);
        return;
      case MclootPackage.LOOT_POOL__BONUS_ROLLS:
        setBonusRolls((DoubleRange)null);
        return;
      case MclootPackage.LOOT_POOL__FUNCTIONS_DEFINED:
        setFunctionsDefined(FUNCTIONS_DEFINED_EDEFAULT);
        return;
      case MclootPackage.LOOT_POOL__FUNCTIONS:
        getFunctions().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_POOL__CONDITIONS_DEFINED:
        return conditionsDefined != CONDITIONS_DEFINED_EDEFAULT;
      case MclootPackage.LOOT_POOL__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case MclootPackage.LOOT_POOL__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MclootPackage.LOOT_POOL__ROLLS_DEFINED:
        return rollsDefined != ROLLS_DEFINED_EDEFAULT;
      case MclootPackage.LOOT_POOL__ROLLS:
        return rolls != null;
      case MclootPackage.LOOT_POOL__ENTRIES_DEFINED:
        return entriesDefined != ENTRIES_DEFINED_EDEFAULT;
      case MclootPackage.LOOT_POOL__ENTRIES:
        return entries != null && !entries.isEmpty();
      case MclootPackage.LOOT_POOL__BONUS_ROLLS_DEFINED:
        return bonusRollsDefined != BONUS_ROLLS_DEFINED_EDEFAULT;
      case MclootPackage.LOOT_POOL__BONUS_ROLLS:
        return bonusRolls != null;
      case MclootPackage.LOOT_POOL__FUNCTIONS_DEFINED:
        return functionsDefined != FUNCTIONS_DEFINED_EDEFAULT;
      case MclootPackage.LOOT_POOL__FUNCTIONS:
        return functions != null && !functions.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (conditionsDefined: ");
    result.append(conditionsDefined);
    result.append(", name: ");
    result.append(name);
    result.append(", rollsDefined: ");
    result.append(rollsDefined);
    result.append(", entriesDefined: ");
    result.append(entriesDefined);
    result.append(", bonusRollsDefined: ");
    result.append(bonusRollsDefined);
    result.append(", functionsDefined: ");
    result.append(functionsDefined);
    result.append(')');
    return result.toString();
  }

} //LootPoolImpl
