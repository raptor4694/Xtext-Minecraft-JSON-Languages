/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.MclootPackage;
import com.raptor.mcloottable.mcloot.RandomChanceLootCondition;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Random Chance Loot Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.RandomChanceLootConditionImpl#getChance <em>Chance</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.RandomChanceLootConditionImpl#isLootingMultiplierDefined <em>Looting Multiplier Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.RandomChanceLootConditionImpl#getLootingMultiplier <em>Looting Multiplier</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RandomChanceLootConditionImpl extends NamedLootConditionImpl implements RandomChanceLootCondition
{
  /**
   * The default value of the '{@link #getChance() <em>Chance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChance()
   * @generated
   * @ordered
   */
  protected static final double CHANCE_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getChance() <em>Chance</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChance()
   * @generated
   * @ordered
   */
  protected double chance = CHANCE_EDEFAULT;

  /**
   * The default value of the '{@link #isLootingMultiplierDefined() <em>Looting Multiplier Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLootingMultiplierDefined()
   * @generated
   * @ordered
   */
  protected static final boolean LOOTING_MULTIPLIER_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isLootingMultiplierDefined() <em>Looting Multiplier Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isLootingMultiplierDefined()
   * @generated
   * @ordered
   */
  protected boolean lootingMultiplierDefined = LOOTING_MULTIPLIER_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #getLootingMultiplier() <em>Looting Multiplier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLootingMultiplier()
   * @generated
   * @ordered
   */
  protected static final double LOOTING_MULTIPLIER_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getLootingMultiplier() <em>Looting Multiplier</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLootingMultiplier()
   * @generated
   * @ordered
   */
  protected double lootingMultiplier = LOOTING_MULTIPLIER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RandomChanceLootConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.RANDOM_CHANCE_LOOT_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getChance()
  {
    return chance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChance(double newChance)
  {
    double oldChance = chance;
    chance = newChance;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__CHANCE, oldChance, chance));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isLootingMultiplierDefined()
  {
    return lootingMultiplierDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLootingMultiplierDefined(boolean newLootingMultiplierDefined)
  {
    boolean oldLootingMultiplierDefined = lootingMultiplierDefined;
    lootingMultiplierDefined = newLootingMultiplierDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER_DEFINED, oldLootingMultiplierDefined, lootingMultiplierDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getLootingMultiplier()
  {
    return lootingMultiplier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLootingMultiplier(double newLootingMultiplier)
  {
    double oldLootingMultiplier = lootingMultiplier;
    lootingMultiplier = newLootingMultiplier;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER, oldLootingMultiplier, lootingMultiplier));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__CHANCE:
        return getChance();
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER_DEFINED:
        return isLootingMultiplierDefined();
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER:
        return getLootingMultiplier();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__CHANCE:
        setChance((Double)newValue);
        return;
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER_DEFINED:
        setLootingMultiplierDefined((Boolean)newValue);
        return;
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER:
        setLootingMultiplier((Double)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__CHANCE:
        setChance(CHANCE_EDEFAULT);
        return;
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER_DEFINED:
        setLootingMultiplierDefined(LOOTING_MULTIPLIER_DEFINED_EDEFAULT);
        return;
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER:
        setLootingMultiplier(LOOTING_MULTIPLIER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__CHANCE:
        return chance != CHANCE_EDEFAULT;
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER_DEFINED:
        return lootingMultiplierDefined != LOOTING_MULTIPLIER_DEFINED_EDEFAULT;
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION__LOOTING_MULTIPLIER:
        return lootingMultiplier != LOOTING_MULTIPLIER_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (chance: ");
    result.append(chance);
    result.append(", lootingMultiplierDefined: ");
    result.append(lootingMultiplierDefined);
    result.append(", lootingMultiplier: ");
    result.append(lootingMultiplier);
    result.append(')');
    return result.toString();
  }

} //RandomChanceLootConditionImpl
