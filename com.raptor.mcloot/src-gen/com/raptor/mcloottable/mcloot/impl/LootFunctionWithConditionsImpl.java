/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.LootCondition;
import com.raptor.mcloottable.mcloot.LootFunction;
import com.raptor.mcloottable.mcloot.LootFunctionWithConditions;
import com.raptor.mcloottable.mcloot.MclootPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Loot Function With Conditions</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootFunctionWithConditionsImpl#isConditionsDefined <em>Conditions Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootFunctionWithConditionsImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LootFunctionWithConditionsImpl#getFunction <em>Function</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LootFunctionWithConditionsImpl extends LootFunctionImpl implements LootFunctionWithConditions
{
  /**
   * The default value of the '{@link #isConditionsDefined() <em>Conditions Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConditionsDefined()
   * @generated
   * @ordered
   */
  protected static final boolean CONDITIONS_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isConditionsDefined() <em>Conditions Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isConditionsDefined()
   * @generated
   * @ordered
   */
  protected boolean conditionsDefined = CONDITIONS_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<LootCondition> conditions;

  /**
   * The cached value of the '{@link #getFunction() <em>Function</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunction()
   * @generated
   * @ordered
   */
  protected LootFunction function;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LootFunctionWithConditionsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.LOOT_FUNCTION_WITH_CONDITIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isConditionsDefined()
  {
    return conditionsDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionsDefined(boolean newConditionsDefined)
  {
    boolean oldConditionsDefined = conditionsDefined;
    conditionsDefined = newConditionsDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS_DEFINED, oldConditionsDefined, conditionsDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LootCondition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<LootCondition>(LootCondition.class, this, MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LootFunction getFunction()
  {
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunction(LootFunction newFunction, NotificationChain msgs)
  {
    LootFunction oldFunction = function;
    function = newFunction;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION, oldFunction, newFunction);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFunction(LootFunction newFunction)
  {
    if (newFunction != function)
    {
      NotificationChain msgs = null;
      if (function != null)
        msgs = ((InternalEObject)function).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION, null, msgs);
      if (newFunction != null)
        msgs = ((InternalEObject)newFunction).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION, null, msgs);
      msgs = basicSetFunction(newFunction, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION, newFunction, newFunction));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION:
        return basicSetFunction(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS_DEFINED:
        return isConditionsDefined();
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS:
        return getConditions();
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION:
        return getFunction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS_DEFINED:
        setConditionsDefined((Boolean)newValue);
        return;
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends LootCondition>)newValue);
        return;
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION:
        setFunction((LootFunction)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS_DEFINED:
        setConditionsDefined(CONDITIONS_DEFINED_EDEFAULT);
        return;
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS:
        getConditions().clear();
        return;
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION:
        setFunction((LootFunction)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS_DEFINED:
        return conditionsDefined != CONDITIONS_DEFINED_EDEFAULT;
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS__FUNCTION:
        return function != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (conditionsDefined: ");
    result.append(conditionsDefined);
    result.append(')');
    return result.toString();
  }

} //LootFunctionWithConditionsImpl
