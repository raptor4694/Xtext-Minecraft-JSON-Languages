/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.BlockStatePropertiesLootCondition;
import com.raptor.mcloottable.mcloot.BlockStateProperty;
import com.raptor.mcloottable.mcloot.MclootPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Block State Properties Loot Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.BlockStatePropertiesLootConditionImpl#isInverted <em>Inverted</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.BlockStatePropertiesLootConditionImpl#getBlock <em>Block</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.BlockStatePropertiesLootConditionImpl#getProperties <em>Properties</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BlockStatePropertiesLootConditionImpl extends NamedLootConditionImpl implements BlockStatePropertiesLootCondition
{
  /**
   * The default value of the '{@link #isInverted() <em>Inverted</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInverted()
   * @generated
   * @ordered
   */
  protected static final boolean INVERTED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInverted() <em>Inverted</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInverted()
   * @generated
   * @ordered
   */
  protected boolean inverted = INVERTED_EDEFAULT;

  /**
   * The default value of the '{@link #getBlock() <em>Block</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected static final String BLOCK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBlock() <em>Block</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBlock()
   * @generated
   * @ordered
   */
  protected String block = BLOCK_EDEFAULT;

  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<BlockStateProperty> properties;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BlockStatePropertiesLootConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.BLOCK_STATE_PROPERTIES_LOOT_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInverted()
  {
    return inverted;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInverted(boolean newInverted)
  {
    boolean oldInverted = inverted;
    inverted = newInverted;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__INVERTED, oldInverted, inverted));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getBlock()
  {
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBlock(String newBlock)
  {
    String oldBlock = block;
    block = newBlock;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__BLOCK, oldBlock, block));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BlockStateProperty> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<BlockStateProperty>(BlockStateProperty.class, this, MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__INVERTED:
        return isInverted();
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__BLOCK:
        return getBlock();
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__PROPERTIES:
        return getProperties();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__INVERTED:
        setInverted((Boolean)newValue);
        return;
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__BLOCK:
        setBlock((String)newValue);
        return;
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends BlockStateProperty>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__INVERTED:
        setInverted(INVERTED_EDEFAULT);
        return;
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__BLOCK:
        setBlock(BLOCK_EDEFAULT);
        return;
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__PROPERTIES:
        getProperties().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__INVERTED:
        return inverted != INVERTED_EDEFAULT;
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__BLOCK:
        return BLOCK_EDEFAULT == null ? block != null : !BLOCK_EDEFAULT.equals(block);
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION__PROPERTIES:
        return properties != null && !properties.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (inverted: ");
    result.append(inverted);
    result.append(", block: ");
    result.append(block);
    result.append(')');
    return result.toString();
  }

} //BlockStatePropertiesLootConditionImpl
