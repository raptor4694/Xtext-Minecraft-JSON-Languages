/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.FishingHookPredicate;
import com.raptor.mcloottable.mcloot.MclootPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Fishing Hook Predicate</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.FishingHookPredicateImpl#isInOpenWaterDefined <em>In Open Water Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.FishingHookPredicateImpl#isInOpenWater <em>In Open Water</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FishingHookPredicateImpl extends MinimalEObjectImpl.Container implements FishingHookPredicate
{
  /**
   * The default value of the '{@link #isInOpenWaterDefined() <em>In Open Water Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInOpenWaterDefined()
   * @generated
   * @ordered
   */
  protected static final boolean IN_OPEN_WATER_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInOpenWaterDefined() <em>In Open Water Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInOpenWaterDefined()
   * @generated
   * @ordered
   */
  protected boolean inOpenWaterDefined = IN_OPEN_WATER_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isInOpenWater() <em>In Open Water</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInOpenWater()
   * @generated
   * @ordered
   */
  protected static final boolean IN_OPEN_WATER_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInOpenWater() <em>In Open Water</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInOpenWater()
   * @generated
   * @ordered
   */
  protected boolean inOpenWater = IN_OPEN_WATER_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FishingHookPredicateImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.FISHING_HOOK_PREDICATE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInOpenWaterDefined()
  {
    return inOpenWaterDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInOpenWaterDefined(boolean newInOpenWaterDefined)
  {
    boolean oldInOpenWaterDefined = inOpenWaterDefined;
    inOpenWaterDefined = newInOpenWaterDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER_DEFINED, oldInOpenWaterDefined, inOpenWaterDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInOpenWater()
  {
    return inOpenWater;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInOpenWater(boolean newInOpenWater)
  {
    boolean oldInOpenWater = inOpenWater;
    inOpenWater = newInOpenWater;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER, oldInOpenWater, inOpenWater));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER_DEFINED:
        return isInOpenWaterDefined();
      case MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER:
        return isInOpenWater();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER_DEFINED:
        setInOpenWaterDefined((Boolean)newValue);
        return;
      case MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER:
        setInOpenWater((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER_DEFINED:
        setInOpenWaterDefined(IN_OPEN_WATER_DEFINED_EDEFAULT);
        return;
      case MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER:
        setInOpenWater(IN_OPEN_WATER_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER_DEFINED:
        return inOpenWaterDefined != IN_OPEN_WATER_DEFINED_EDEFAULT;
      case MclootPackage.FISHING_HOOK_PREDICATE__IN_OPEN_WATER:
        return inOpenWater != IN_OPEN_WATER_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (inOpenWaterDefined: ");
    result.append(inOpenWaterDefined);
    result.append(", inOpenWater: ");
    result.append(inOpenWater);
    result.append(')');
    return result.toString();
  }

} //FishingHookPredicateImpl
