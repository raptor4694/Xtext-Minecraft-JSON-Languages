/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MclootFactoryImpl extends EFactoryImpl implements MclootFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MclootFactory init()
  {
    try
    {
      MclootFactory theMclootFactory = (MclootFactory)EPackage.Registry.INSTANCE.getEFactory(MclootPackage.eNS_URI);
      if (theMclootFactory != null)
      {
        return theMclootFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MclootFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MclootFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MclootPackage.LOOT_TABLE: return createLootTable();
      case MclootPackage.LOOT_POOL: return createLootPool();
      case MclootPackage.LOOT_ENTRY: return createLootEntry();
      case MclootPackage.LOOT_FUNCTION: return createLootFunction();
      case MclootPackage.APPLY_BONUS_LOOT_FUNCTION: return createApplyBonusLootFunction();
      case MclootPackage.COPY_NAME_LOOT_FUNCTION: return createCopyNameLootFunction();
      case MclootPackage.COPY_NBT_LOOT_FUNCTION: return createCopyNBTLootFunction();
      case MclootPackage.NBT_OPERATION: return createNBTOperation();
      case MclootPackage.APPEND_NBT_OPERATION: return createAppendNBTOperation();
      case MclootPackage.REPLACE_NBT_OPERATION: return createReplaceNBTOperation();
      case MclootPackage.MERGE_NBT_OPERATION: return createMergeNBTOperation();
      case MclootPackage.COPY_STATE_LOOT_FUNCTION: return createCopyStateLootFunction();
      case MclootPackage.ENCHANT_RANDOMLY_LOOT_FUNCTION: return createEnchantRandomlyLootFunction();
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION: return createEnchantWithLevelsLootFunction();
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION: return createExplorationMapLootFunction();
      case MclootPackage.EXPLOSION_DECAY_LOOT_FUNCTION: return createExplosionDecayLootFunction();
      case MclootPackage.FURNACE_SMELT_LOOT_FUNCTION: return createFurnaceSmeltLootFunction();
      case MclootPackage.FILL_PLAYER_HEAD_LOOT_FUNCTION: return createFillPlayerHeadLootFunction();
      case MclootPackage.LIMIT_COUNT_LOOT_FUNCTION: return createLimitCountLootFunction();
      case MclootPackage.LOOTING_ENCHANT_LOOT_FUNCTION: return createLootingEnchantLootFunction();
      case MclootPackage.SET_ATTRIBUTES_LOOT_FUNCTION: return createSetAttributesLootFunction();
      case MclootPackage.ATTRIBUTE_MODIFIER: return createAttributeModifier();
      case MclootPackage.SET_CONTENTS_LOOT_FUNCTION: return createSetContentsLootFunction();
      case MclootPackage.SET_COUNT_LOOT_FUNCTION: return createSetCountLootFunction();
      case MclootPackage.COUNT: return createCount();
      case MclootPackage.EXACT_COUNT: return createExactCount();
      case MclootPackage.SPECIAL_COUNT: return createSpecialCount();
      case MclootPackage.UNIFORM_COUNT: return createUniformCount();
      case MclootPackage.BINOMIAL_COUNT: return createBinomialCount();
      case MclootPackage.SET_DAMAGE_LOOT_FUNCTION: return createSetDamageLootFunction();
      case MclootPackage.SET_LORE_LOOT_FUNCTION: return createSetLoreLootFunction();
      case MclootPackage.SET_NAME_LOOT_FUNCTION: return createSetNameLootFunction();
      case MclootPackage.SET_NBT_LOOT_FUNCTION: return createSetNBTLootFunction();
      case MclootPackage.SET_STEW_EFFECT_LOOT_FUNCTION: return createSetStewEffectLootFunction();
      case MclootPackage.STEW_EFFECT: return createStewEffect();
      case MclootPackage.LOOT_CONDITION: return createLootCondition();
      case MclootPackage.NAMED_LOOT_CONDITION: return createNamedLootCondition();
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION: return createBlockStatePropertiesLootCondition();
      case MclootPackage.BLOCK_STATE_PROPERTY: return createBlockStateProperty();
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION: return createDamageSourcePropertiesLootCondition();
      case MclootPackage.ENTITY_PROPERTIES_LOOT_CONDITION: return createEntityPropertiesLootCondition();
      case MclootPackage.ENTITY_SCORES_LOOT_CONDITION: return createEntityScoresLootCondition();
      case MclootPackage.ENTITY_SCORE: return createEntityScore();
      case MclootPackage.KILLED_BY_PLAYER_LOOT_CONDITION: return createKilledByPlayerLootCondition();
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION: return createLocationCheckLootCondition();
      case MclootPackage.MATCH_TOOL_LOOT_CONDITION: return createMatchToolLootCondition();
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION: return createRandomChanceLootCondition();
      case MclootPackage.REFERENCE_LOOT_CONDITION: return createReferenceLootCondition();
      case MclootPackage.SURVIVES_EXPLOSION_LOOT_CONDITION: return createSurvivesExplosionLootCondition();
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION: return createTableBonusLootCondition();
      case MclootPackage.TIME_CHECK_LOOT_CONDITION: return createTimeCheckLootCondition();
      case MclootPackage.TOOL_ENCHANTMENT_LOOT_CONDITION: return createToolEnchantmentLootCondition();
      case MclootPackage.ENCHANTMENT_LEVEL: return createEnchantmentLevel();
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION: return createWeatherCheckLootCondition();
      case MclootPackage.ENTITY_PREDICATE: return createEntityPredicate();
      case MclootPackage.FISHING_HOOK_PREDICATE: return createFishingHookPredicate();
      case MclootPackage.EFFECT_PREDICATE: return createEffectPredicate();
      case MclootPackage.EQUIPMENT_PREDICATE: return createEquipmentPredicate();
      case MclootPackage.ENTITY_FLAGS: return createEntityFlags();
      case MclootPackage.PLAYER_PREDICATE: return createPlayerPredicate();
      case MclootPackage.ADVANCEMENT_PREDICATE: return createAdvancementPredicate();
      case MclootPackage.ADVANCEMENT_CRITERIA: return createAdvancementCriteria();
      case MclootPackage.RECIPE_PREDICATE: return createRecipePredicate();
      case MclootPackage.STATISTIC_PREDICATE: return createStatisticPredicate();
      case MclootPackage.SINGLE_STATISTIC_PREDICATE: return createSingleStatisticPredicate();
      case MclootPackage.NAMESPACED_STATISTIC_PREDICATE: return createNamespacedStatisticPredicate();
      case MclootPackage.UNNAMESPACED_STATISTIC_PREDICATE: return createUnnamespacedStatisticPredicate();
      case MclootPackage.LOCATION_PREDICATE: return createLocationPredicate();
      case MclootPackage.ITEM_PREDICATE: return createItemPredicate();
      case MclootPackage.BLOCK_PREDICATE: return createBlockPredicate();
      case MclootPackage.BLOCK_STATE_PROPERTY_PREDICATE: return createBlockStatePropertyPredicate();
      case MclootPackage.FLUID_PREDICATE: return createFluidPredicate();
      case MclootPackage.MC_JSON_VALUE: return createMCJsonValue();
      case MclootPackage.MC_JSON_OBJECT: return createMCJsonObject();
      case MclootPackage.MC_JSON_ENTRY: return createMCJsonEntry();
      case MclootPackage.MC_JSON_ARRAY: return createMCJsonArray();
      case MclootPackage.MC_JSON_STRING: return createMCJsonString();
      case MclootPackage.MC_JSON_NUMBER: return createMCJsonNumber();
      case MclootPackage.MC_JSON_INTEGRAL: return createMCJsonIntegral();
      case MclootPackage.MC_JSON_FLOATING_POINT: return createMCJsonFloatingPoint();
      case MclootPackage.MC_JSON_BOOLEAN: return createMCJsonBoolean();
      case MclootPackage.MC_JSON_NULL: return createMCJsonNull();
      case MclootPackage.LONG_RANGE: return createLongRange();
      case MclootPackage.EXACT_LONG_RANGE: return createExactLongRange();
      case MclootPackage.NORMAL_LONG_RANGE: return createNormalLongRange();
      case MclootPackage.DOUBLE_RANGE: return createDoubleRange();
      case MclootPackage.EXACT_DOUBLE_RANGE: return createExactDoubleRange();
      case MclootPackage.NORMAL_DOUBLE_RANGE: return createNormalDoubleRange();
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS: return createLootFunctionWithConditions();
      case MclootPackage.ALTERNATIVE_LOOT_CONDITION: return createAlternativeLootCondition();
      case MclootPackage.INVERTED_LOOT_CONDITION: return createInvertedLootCondition();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MclootPackage.ENUM_EQUIPMENT_SLOT:
        return createEnumEquipmentSlotFromString(eDataType, initialValue);
      case MclootPackage.ENUM_GAMEMODE:
        return createEnumGamemodeFromString(eDataType, initialValue);
      case MclootPackage.ENUM_LOOT_TABLE_TYPE:
        return createEnumLootTableTypeFromString(eDataType, initialValue);
      case MclootPackage.ENUM_BONUS_FORMULA:
        return createEnumBonusFormulaFromString(eDataType, initialValue);
      case MclootPackage.ENUM_NBT_SOURCE:
        return createEnumNBTSourceFromString(eDataType, initialValue);
      case MclootPackage.ENUM_ATTRIBUTE_MODIFIER_OPERATION:
        return createEnumAttributeModifierOperationFromString(eDataType, initialValue);
      case MclootPackage.ENUM_ENTITY_SOURCE:
        return createEnumEntitySourceFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MclootPackage.ENUM_EQUIPMENT_SLOT:
        return convertEnumEquipmentSlotToString(eDataType, instanceValue);
      case MclootPackage.ENUM_GAMEMODE:
        return convertEnumGamemodeToString(eDataType, instanceValue);
      case MclootPackage.ENUM_LOOT_TABLE_TYPE:
        return convertEnumLootTableTypeToString(eDataType, instanceValue);
      case MclootPackage.ENUM_BONUS_FORMULA:
        return convertEnumBonusFormulaToString(eDataType, instanceValue);
      case MclootPackage.ENUM_NBT_SOURCE:
        return convertEnumNBTSourceToString(eDataType, instanceValue);
      case MclootPackage.ENUM_ATTRIBUTE_MODIFIER_OPERATION:
        return convertEnumAttributeModifierOperationToString(eDataType, instanceValue);
      case MclootPackage.ENUM_ENTITY_SOURCE:
        return convertEnumEntitySourceToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LootTable createLootTable()
  {
    LootTableImpl lootTable = new LootTableImpl();
    return lootTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LootPool createLootPool()
  {
    LootPoolImpl lootPool = new LootPoolImpl();
    return lootPool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LootEntry createLootEntry()
  {
    LootEntryImpl lootEntry = new LootEntryImpl();
    return lootEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LootFunction createLootFunction()
  {
    LootFunctionImpl lootFunction = new LootFunctionImpl();
    return lootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ApplyBonusLootFunction createApplyBonusLootFunction()
  {
    ApplyBonusLootFunctionImpl applyBonusLootFunction = new ApplyBonusLootFunctionImpl();
    return applyBonusLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CopyNameLootFunction createCopyNameLootFunction()
  {
    CopyNameLootFunctionImpl copyNameLootFunction = new CopyNameLootFunctionImpl();
    return copyNameLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CopyNBTLootFunction createCopyNBTLootFunction()
  {
    CopyNBTLootFunctionImpl copyNBTLootFunction = new CopyNBTLootFunctionImpl();
    return copyNBTLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTOperation createNBTOperation()
  {
    NBTOperationImpl nbtOperation = new NBTOperationImpl();
    return nbtOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AppendNBTOperation createAppendNBTOperation()
  {
    AppendNBTOperationImpl appendNBTOperation = new AppendNBTOperationImpl();
    return appendNBTOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReplaceNBTOperation createReplaceNBTOperation()
  {
    ReplaceNBTOperationImpl replaceNBTOperation = new ReplaceNBTOperationImpl();
    return replaceNBTOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MergeNBTOperation createMergeNBTOperation()
  {
    MergeNBTOperationImpl mergeNBTOperation = new MergeNBTOperationImpl();
    return mergeNBTOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CopyStateLootFunction createCopyStateLootFunction()
  {
    CopyStateLootFunctionImpl copyStateLootFunction = new CopyStateLootFunctionImpl();
    return copyStateLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnchantRandomlyLootFunction createEnchantRandomlyLootFunction()
  {
    EnchantRandomlyLootFunctionImpl enchantRandomlyLootFunction = new EnchantRandomlyLootFunctionImpl();
    return enchantRandomlyLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnchantWithLevelsLootFunction createEnchantWithLevelsLootFunction()
  {
    EnchantWithLevelsLootFunctionImpl enchantWithLevelsLootFunction = new EnchantWithLevelsLootFunctionImpl();
    return enchantWithLevelsLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExplorationMapLootFunction createExplorationMapLootFunction()
  {
    ExplorationMapLootFunctionImpl explorationMapLootFunction = new ExplorationMapLootFunctionImpl();
    return explorationMapLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExplosionDecayLootFunction createExplosionDecayLootFunction()
  {
    ExplosionDecayLootFunctionImpl explosionDecayLootFunction = new ExplosionDecayLootFunctionImpl();
    return explosionDecayLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FurnaceSmeltLootFunction createFurnaceSmeltLootFunction()
  {
    FurnaceSmeltLootFunctionImpl furnaceSmeltLootFunction = new FurnaceSmeltLootFunctionImpl();
    return furnaceSmeltLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FillPlayerHeadLootFunction createFillPlayerHeadLootFunction()
  {
    FillPlayerHeadLootFunctionImpl fillPlayerHeadLootFunction = new FillPlayerHeadLootFunctionImpl();
    return fillPlayerHeadLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LimitCountLootFunction createLimitCountLootFunction()
  {
    LimitCountLootFunctionImpl limitCountLootFunction = new LimitCountLootFunctionImpl();
    return limitCountLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LootingEnchantLootFunction createLootingEnchantLootFunction()
  {
    LootingEnchantLootFunctionImpl lootingEnchantLootFunction = new LootingEnchantLootFunctionImpl();
    return lootingEnchantLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetAttributesLootFunction createSetAttributesLootFunction()
  {
    SetAttributesLootFunctionImpl setAttributesLootFunction = new SetAttributesLootFunctionImpl();
    return setAttributesLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AttributeModifier createAttributeModifier()
  {
    AttributeModifierImpl attributeModifier = new AttributeModifierImpl();
    return attributeModifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetContentsLootFunction createSetContentsLootFunction()
  {
    SetContentsLootFunctionImpl setContentsLootFunction = new SetContentsLootFunctionImpl();
    return setContentsLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetCountLootFunction createSetCountLootFunction()
  {
    SetCountLootFunctionImpl setCountLootFunction = new SetCountLootFunctionImpl();
    return setCountLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Count createCount()
  {
    CountImpl count = new CountImpl();
    return count;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExactCount createExactCount()
  {
    ExactCountImpl exactCount = new ExactCountImpl();
    return exactCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialCount createSpecialCount()
  {
    SpecialCountImpl specialCount = new SpecialCountImpl();
    return specialCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UniformCount createUniformCount()
  {
    UniformCountImpl uniformCount = new UniformCountImpl();
    return uniformCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinomialCount createBinomialCount()
  {
    BinomialCountImpl binomialCount = new BinomialCountImpl();
    return binomialCount;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetDamageLootFunction createSetDamageLootFunction()
  {
    SetDamageLootFunctionImpl setDamageLootFunction = new SetDamageLootFunctionImpl();
    return setDamageLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetLoreLootFunction createSetLoreLootFunction()
  {
    SetLoreLootFunctionImpl setLoreLootFunction = new SetLoreLootFunctionImpl();
    return setLoreLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetNameLootFunction createSetNameLootFunction()
  {
    SetNameLootFunctionImpl setNameLootFunction = new SetNameLootFunctionImpl();
    return setNameLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetNBTLootFunction createSetNBTLootFunction()
  {
    SetNBTLootFunctionImpl setNBTLootFunction = new SetNBTLootFunctionImpl();
    return setNBTLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetStewEffectLootFunction createSetStewEffectLootFunction()
  {
    SetStewEffectLootFunctionImpl setStewEffectLootFunction = new SetStewEffectLootFunctionImpl();
    return setStewEffectLootFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StewEffect createStewEffect()
  {
    StewEffectImpl stewEffect = new StewEffectImpl();
    return stewEffect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LootCondition createLootCondition()
  {
    LootConditionImpl lootCondition = new LootConditionImpl();
    return lootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamedLootCondition createNamedLootCondition()
  {
    NamedLootConditionImpl namedLootCondition = new NamedLootConditionImpl();
    return namedLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockStatePropertiesLootCondition createBlockStatePropertiesLootCondition()
  {
    BlockStatePropertiesLootConditionImpl blockStatePropertiesLootCondition = new BlockStatePropertiesLootConditionImpl();
    return blockStatePropertiesLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockStateProperty createBlockStateProperty()
  {
    BlockStatePropertyImpl blockStateProperty = new BlockStatePropertyImpl();
    return blockStateProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DamageSourcePropertiesLootCondition createDamageSourcePropertiesLootCondition()
  {
    DamageSourcePropertiesLootConditionImpl damageSourcePropertiesLootCondition = new DamageSourcePropertiesLootConditionImpl();
    return damageSourcePropertiesLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityPropertiesLootCondition createEntityPropertiesLootCondition()
  {
    EntityPropertiesLootConditionImpl entityPropertiesLootCondition = new EntityPropertiesLootConditionImpl();
    return entityPropertiesLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityScoresLootCondition createEntityScoresLootCondition()
  {
    EntityScoresLootConditionImpl entityScoresLootCondition = new EntityScoresLootConditionImpl();
    return entityScoresLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityScore createEntityScore()
  {
    EntityScoreImpl entityScore = new EntityScoreImpl();
    return entityScore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KilledByPlayerLootCondition createKilledByPlayerLootCondition()
  {
    KilledByPlayerLootConditionImpl killedByPlayerLootCondition = new KilledByPlayerLootConditionImpl();
    return killedByPlayerLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationCheckLootCondition createLocationCheckLootCondition()
  {
    LocationCheckLootConditionImpl locationCheckLootCondition = new LocationCheckLootConditionImpl();
    return locationCheckLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MatchToolLootCondition createMatchToolLootCondition()
  {
    MatchToolLootConditionImpl matchToolLootCondition = new MatchToolLootConditionImpl();
    return matchToolLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RandomChanceLootCondition createRandomChanceLootCondition()
  {
    RandomChanceLootConditionImpl randomChanceLootCondition = new RandomChanceLootConditionImpl();
    return randomChanceLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReferenceLootCondition createReferenceLootCondition()
  {
    ReferenceLootConditionImpl referenceLootCondition = new ReferenceLootConditionImpl();
    return referenceLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SurvivesExplosionLootCondition createSurvivesExplosionLootCondition()
  {
    SurvivesExplosionLootConditionImpl survivesExplosionLootCondition = new SurvivesExplosionLootConditionImpl();
    return survivesExplosionLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableBonusLootCondition createTableBonusLootCondition()
  {
    TableBonusLootConditionImpl tableBonusLootCondition = new TableBonusLootConditionImpl();
    return tableBonusLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeCheckLootCondition createTimeCheckLootCondition()
  {
    TimeCheckLootConditionImpl timeCheckLootCondition = new TimeCheckLootConditionImpl();
    return timeCheckLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ToolEnchantmentLootCondition createToolEnchantmentLootCondition()
  {
    ToolEnchantmentLootConditionImpl toolEnchantmentLootCondition = new ToolEnchantmentLootConditionImpl();
    return toolEnchantmentLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnchantmentLevel createEnchantmentLevel()
  {
    EnchantmentLevelImpl enchantmentLevel = new EnchantmentLevelImpl();
    return enchantmentLevel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WeatherCheckLootCondition createWeatherCheckLootCondition()
  {
    WeatherCheckLootConditionImpl weatherCheckLootCondition = new WeatherCheckLootConditionImpl();
    return weatherCheckLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityPredicate createEntityPredicate()
  {
    EntityPredicateImpl entityPredicate = new EntityPredicateImpl();
    return entityPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FishingHookPredicate createFishingHookPredicate()
  {
    FishingHookPredicateImpl fishingHookPredicate = new FishingHookPredicateImpl();
    return fishingHookPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EffectPredicate createEffectPredicate()
  {
    EffectPredicateImpl effectPredicate = new EffectPredicateImpl();
    return effectPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EquipmentPredicate createEquipmentPredicate()
  {
    EquipmentPredicateImpl equipmentPredicate = new EquipmentPredicateImpl();
    return equipmentPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityFlags createEntityFlags()
  {
    EntityFlagsImpl entityFlags = new EntityFlagsImpl();
    return entityFlags;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlayerPredicate createPlayerPredicate()
  {
    PlayerPredicateImpl playerPredicate = new PlayerPredicateImpl();
    return playerPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdvancementPredicate createAdvancementPredicate()
  {
    AdvancementPredicateImpl advancementPredicate = new AdvancementPredicateImpl();
    return advancementPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AdvancementCriteria createAdvancementCriteria()
  {
    AdvancementCriteriaImpl advancementCriteria = new AdvancementCriteriaImpl();
    return advancementCriteria;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RecipePredicate createRecipePredicate()
  {
    RecipePredicateImpl recipePredicate = new RecipePredicateImpl();
    return recipePredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StatisticPredicate createStatisticPredicate()
  {
    StatisticPredicateImpl statisticPredicate = new StatisticPredicateImpl();
    return statisticPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleStatisticPredicate createSingleStatisticPredicate()
  {
    SingleStatisticPredicateImpl singleStatisticPredicate = new SingleStatisticPredicateImpl();
    return singleStatisticPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamespacedStatisticPredicate createNamespacedStatisticPredicate()
  {
    NamespacedStatisticPredicateImpl namespacedStatisticPredicate = new NamespacedStatisticPredicateImpl();
    return namespacedStatisticPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnnamespacedStatisticPredicate createUnnamespacedStatisticPredicate()
  {
    UnnamespacedStatisticPredicateImpl unnamespacedStatisticPredicate = new UnnamespacedStatisticPredicateImpl();
    return unnamespacedStatisticPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationPredicate createLocationPredicate()
  {
    LocationPredicateImpl locationPredicate = new LocationPredicateImpl();
    return locationPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ItemPredicate createItemPredicate()
  {
    ItemPredicateImpl itemPredicate = new ItemPredicateImpl();
    return itemPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockPredicate createBlockPredicate()
  {
    BlockPredicateImpl blockPredicate = new BlockPredicateImpl();
    return blockPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockStatePropertyPredicate createBlockStatePropertyPredicate()
  {
    BlockStatePropertyPredicateImpl blockStatePropertyPredicate = new BlockStatePropertyPredicateImpl();
    return blockStatePropertyPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FluidPredicate createFluidPredicate()
  {
    FluidPredicateImpl fluidPredicate = new FluidPredicateImpl();
    return fluidPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonValue createMCJsonValue()
  {
    MCJsonValueImpl mcJsonValue = new MCJsonValueImpl();
    return mcJsonValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonObject createMCJsonObject()
  {
    MCJsonObjectImpl mcJsonObject = new MCJsonObjectImpl();
    return mcJsonObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonEntry createMCJsonEntry()
  {
    MCJsonEntryImpl mcJsonEntry = new MCJsonEntryImpl();
    return mcJsonEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonArray createMCJsonArray()
  {
    MCJsonArrayImpl mcJsonArray = new MCJsonArrayImpl();
    return mcJsonArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonString createMCJsonString()
  {
    MCJsonStringImpl mcJsonString = new MCJsonStringImpl();
    return mcJsonString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonNumber createMCJsonNumber()
  {
    MCJsonNumberImpl mcJsonNumber = new MCJsonNumberImpl();
    return mcJsonNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonIntegral createMCJsonIntegral()
  {
    MCJsonIntegralImpl mcJsonIntegral = new MCJsonIntegralImpl();
    return mcJsonIntegral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonFloatingPoint createMCJsonFloatingPoint()
  {
    MCJsonFloatingPointImpl mcJsonFloatingPoint = new MCJsonFloatingPointImpl();
    return mcJsonFloatingPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonBoolean createMCJsonBoolean()
  {
    MCJsonBooleanImpl mcJsonBoolean = new MCJsonBooleanImpl();
    return mcJsonBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonNull createMCJsonNull()
  {
    MCJsonNullImpl mcJsonNull = new MCJsonNullImpl();
    return mcJsonNull;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LongRange createLongRange()
  {
    LongRangeImpl longRange = new LongRangeImpl();
    return longRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExactLongRange createExactLongRange()
  {
    ExactLongRangeImpl exactLongRange = new ExactLongRangeImpl();
    return exactLongRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NormalLongRange createNormalLongRange()
  {
    NormalLongRangeImpl normalLongRange = new NormalLongRangeImpl();
    return normalLongRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleRange createDoubleRange()
  {
    DoubleRangeImpl doubleRange = new DoubleRangeImpl();
    return doubleRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExactDoubleRange createExactDoubleRange()
  {
    ExactDoubleRangeImpl exactDoubleRange = new ExactDoubleRangeImpl();
    return exactDoubleRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NormalDoubleRange createNormalDoubleRange()
  {
    NormalDoubleRangeImpl normalDoubleRange = new NormalDoubleRangeImpl();
    return normalDoubleRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LootFunctionWithConditions createLootFunctionWithConditions()
  {
    LootFunctionWithConditionsImpl lootFunctionWithConditions = new LootFunctionWithConditionsImpl();
    return lootFunctionWithConditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlternativeLootCondition createAlternativeLootCondition()
  {
    AlternativeLootConditionImpl alternativeLootCondition = new AlternativeLootConditionImpl();
    return alternativeLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InvertedLootCondition createInvertedLootCondition()
  {
    InvertedLootConditionImpl invertedLootCondition = new InvertedLootConditionImpl();
    return invertedLootCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumEquipmentSlot createEnumEquipmentSlotFromString(EDataType eDataType, String initialValue)
  {
    EnumEquipmentSlot result = EnumEquipmentSlot.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumEquipmentSlotToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumGamemode createEnumGamemodeFromString(EDataType eDataType, String initialValue)
  {
    EnumGamemode result = EnumGamemode.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumGamemodeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumLootTableType createEnumLootTableTypeFromString(EDataType eDataType, String initialValue)
  {
    EnumLootTableType result = EnumLootTableType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumLootTableTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumBonusFormula createEnumBonusFormulaFromString(EDataType eDataType, String initialValue)
  {
    EnumBonusFormula result = EnumBonusFormula.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumBonusFormulaToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumNBTSource createEnumNBTSourceFromString(EDataType eDataType, String initialValue)
  {
    EnumNBTSource result = EnumNBTSource.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumNBTSourceToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumAttributeModifierOperation createEnumAttributeModifierOperationFromString(EDataType eDataType, String initialValue)
  {
    EnumAttributeModifierOperation result = EnumAttributeModifierOperation.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumAttributeModifierOperationToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumEntitySource createEnumEntitySourceFromString(EDataType eDataType, String initialValue)
  {
    EnumEntitySource result = EnumEntitySource.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumEntitySourceToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MclootPackage getMclootPackage()
  {
    return (MclootPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MclootPackage getPackage()
  {
    return MclootPackage.eINSTANCE;
  }

} //MclootFactoryImpl
