/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.EntityFlags;
import com.raptor.mcloottable.mcloot.MclootPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity Flags</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isOnFireDefined <em>On Fire Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isOnFire <em>On Fire</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isSneakingDefined <em>Sneaking Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isSneaking <em>Sneaking</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isSprintingDefined <em>Sprinting Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isSprinting <em>Sprinting</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isSwimmingDefined <em>Swimming Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isSwimming <em>Swimming</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isBabyDefined <em>Baby Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.EntityFlagsImpl#isBaby <em>Baby</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EntityFlagsImpl extends MinimalEObjectImpl.Container implements EntityFlags
{
  /**
   * The default value of the '{@link #isOnFireDefined() <em>On Fire Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOnFireDefined()
   * @generated
   * @ordered
   */
  protected static final boolean ON_FIRE_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOnFireDefined() <em>On Fire Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOnFireDefined()
   * @generated
   * @ordered
   */
  protected boolean onFireDefined = ON_FIRE_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isOnFire() <em>On Fire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOnFire()
   * @generated
   * @ordered
   */
  protected static final boolean ON_FIRE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOnFire() <em>On Fire</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOnFire()
   * @generated
   * @ordered
   */
  protected boolean onFire = ON_FIRE_EDEFAULT;

  /**
   * The default value of the '{@link #isSneakingDefined() <em>Sneaking Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSneakingDefined()
   * @generated
   * @ordered
   */
  protected static final boolean SNEAKING_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSneakingDefined() <em>Sneaking Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSneakingDefined()
   * @generated
   * @ordered
   */
  protected boolean sneakingDefined = SNEAKING_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isSneaking() <em>Sneaking</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSneaking()
   * @generated
   * @ordered
   */
  protected static final boolean SNEAKING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSneaking() <em>Sneaking</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSneaking()
   * @generated
   * @ordered
   */
  protected boolean sneaking = SNEAKING_EDEFAULT;

  /**
   * The default value of the '{@link #isSprintingDefined() <em>Sprinting Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSprintingDefined()
   * @generated
   * @ordered
   */
  protected static final boolean SPRINTING_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSprintingDefined() <em>Sprinting Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSprintingDefined()
   * @generated
   * @ordered
   */
  protected boolean sprintingDefined = SPRINTING_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isSprinting() <em>Sprinting</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSprinting()
   * @generated
   * @ordered
   */
  protected static final boolean SPRINTING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSprinting() <em>Sprinting</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSprinting()
   * @generated
   * @ordered
   */
  protected boolean sprinting = SPRINTING_EDEFAULT;

  /**
   * The default value of the '{@link #isSwimmingDefined() <em>Swimming Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSwimmingDefined()
   * @generated
   * @ordered
   */
  protected static final boolean SWIMMING_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSwimmingDefined() <em>Swimming Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSwimmingDefined()
   * @generated
   * @ordered
   */
  protected boolean swimmingDefined = SWIMMING_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isSwimming() <em>Swimming</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSwimming()
   * @generated
   * @ordered
   */
  protected static final boolean SWIMMING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSwimming() <em>Swimming</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSwimming()
   * @generated
   * @ordered
   */
  protected boolean swimming = SWIMMING_EDEFAULT;

  /**
   * The default value of the '{@link #isBabyDefined() <em>Baby Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBabyDefined()
   * @generated
   * @ordered
   */
  protected static final boolean BABY_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBabyDefined() <em>Baby Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBabyDefined()
   * @generated
   * @ordered
   */
  protected boolean babyDefined = BABY_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isBaby() <em>Baby</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBaby()
   * @generated
   * @ordered
   */
  protected static final boolean BABY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBaby() <em>Baby</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBaby()
   * @generated
   * @ordered
   */
  protected boolean baby = BABY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected EntityFlagsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.ENTITY_FLAGS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOnFireDefined()
  {
    return onFireDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnFireDefined(boolean newOnFireDefined)
  {
    boolean oldOnFireDefined = onFireDefined;
    onFireDefined = newOnFireDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__ON_FIRE_DEFINED, oldOnFireDefined, onFireDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOnFire()
  {
    return onFire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOnFire(boolean newOnFire)
  {
    boolean oldOnFire = onFire;
    onFire = newOnFire;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__ON_FIRE, oldOnFire, onFire));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSneakingDefined()
  {
    return sneakingDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSneakingDefined(boolean newSneakingDefined)
  {
    boolean oldSneakingDefined = sneakingDefined;
    sneakingDefined = newSneakingDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__SNEAKING_DEFINED, oldSneakingDefined, sneakingDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSneaking()
  {
    return sneaking;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSneaking(boolean newSneaking)
  {
    boolean oldSneaking = sneaking;
    sneaking = newSneaking;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__SNEAKING, oldSneaking, sneaking));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSprintingDefined()
  {
    return sprintingDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSprintingDefined(boolean newSprintingDefined)
  {
    boolean oldSprintingDefined = sprintingDefined;
    sprintingDefined = newSprintingDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__SPRINTING_DEFINED, oldSprintingDefined, sprintingDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSprinting()
  {
    return sprinting;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSprinting(boolean newSprinting)
  {
    boolean oldSprinting = sprinting;
    sprinting = newSprinting;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__SPRINTING, oldSprinting, sprinting));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSwimmingDefined()
  {
    return swimmingDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSwimmingDefined(boolean newSwimmingDefined)
  {
    boolean oldSwimmingDefined = swimmingDefined;
    swimmingDefined = newSwimmingDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__SWIMMING_DEFINED, oldSwimmingDefined, swimmingDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSwimming()
  {
    return swimming;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSwimming(boolean newSwimming)
  {
    boolean oldSwimming = swimming;
    swimming = newSwimming;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__SWIMMING, oldSwimming, swimming));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBabyDefined()
  {
    return babyDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBabyDefined(boolean newBabyDefined)
  {
    boolean oldBabyDefined = babyDefined;
    babyDefined = newBabyDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__BABY_DEFINED, oldBabyDefined, babyDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isBaby()
  {
    return baby;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBaby(boolean newBaby)
  {
    boolean oldBaby = baby;
    baby = newBaby;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.ENTITY_FLAGS__BABY, oldBaby, baby));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.ENTITY_FLAGS__ON_FIRE_DEFINED:
        return isOnFireDefined();
      case MclootPackage.ENTITY_FLAGS__ON_FIRE:
        return isOnFire();
      case MclootPackage.ENTITY_FLAGS__SNEAKING_DEFINED:
        return isSneakingDefined();
      case MclootPackage.ENTITY_FLAGS__SNEAKING:
        return isSneaking();
      case MclootPackage.ENTITY_FLAGS__SPRINTING_DEFINED:
        return isSprintingDefined();
      case MclootPackage.ENTITY_FLAGS__SPRINTING:
        return isSprinting();
      case MclootPackage.ENTITY_FLAGS__SWIMMING_DEFINED:
        return isSwimmingDefined();
      case MclootPackage.ENTITY_FLAGS__SWIMMING:
        return isSwimming();
      case MclootPackage.ENTITY_FLAGS__BABY_DEFINED:
        return isBabyDefined();
      case MclootPackage.ENTITY_FLAGS__BABY:
        return isBaby();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.ENTITY_FLAGS__ON_FIRE_DEFINED:
        setOnFireDefined((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__ON_FIRE:
        setOnFire((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__SNEAKING_DEFINED:
        setSneakingDefined((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__SNEAKING:
        setSneaking((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__SPRINTING_DEFINED:
        setSprintingDefined((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__SPRINTING:
        setSprinting((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__SWIMMING_DEFINED:
        setSwimmingDefined((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__SWIMMING:
        setSwimming((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__BABY_DEFINED:
        setBabyDefined((Boolean)newValue);
        return;
      case MclootPackage.ENTITY_FLAGS__BABY:
        setBaby((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.ENTITY_FLAGS__ON_FIRE_DEFINED:
        setOnFireDefined(ON_FIRE_DEFINED_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__ON_FIRE:
        setOnFire(ON_FIRE_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__SNEAKING_DEFINED:
        setSneakingDefined(SNEAKING_DEFINED_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__SNEAKING:
        setSneaking(SNEAKING_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__SPRINTING_DEFINED:
        setSprintingDefined(SPRINTING_DEFINED_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__SPRINTING:
        setSprinting(SPRINTING_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__SWIMMING_DEFINED:
        setSwimmingDefined(SWIMMING_DEFINED_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__SWIMMING:
        setSwimming(SWIMMING_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__BABY_DEFINED:
        setBabyDefined(BABY_DEFINED_EDEFAULT);
        return;
      case MclootPackage.ENTITY_FLAGS__BABY:
        setBaby(BABY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.ENTITY_FLAGS__ON_FIRE_DEFINED:
        return onFireDefined != ON_FIRE_DEFINED_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__ON_FIRE:
        return onFire != ON_FIRE_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__SNEAKING_DEFINED:
        return sneakingDefined != SNEAKING_DEFINED_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__SNEAKING:
        return sneaking != SNEAKING_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__SPRINTING_DEFINED:
        return sprintingDefined != SPRINTING_DEFINED_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__SPRINTING:
        return sprinting != SPRINTING_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__SWIMMING_DEFINED:
        return swimmingDefined != SWIMMING_DEFINED_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__SWIMMING:
        return swimming != SWIMMING_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__BABY_DEFINED:
        return babyDefined != BABY_DEFINED_EDEFAULT;
      case MclootPackage.ENTITY_FLAGS__BABY:
        return baby != BABY_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (onFireDefined: ");
    result.append(onFireDefined);
    result.append(", onFire: ");
    result.append(onFire);
    result.append(", sneakingDefined: ");
    result.append(sneakingDefined);
    result.append(", sneaking: ");
    result.append(sneaking);
    result.append(", sprintingDefined: ");
    result.append(sprintingDefined);
    result.append(", sprinting: ");
    result.append(sprinting);
    result.append(", swimmingDefined: ");
    result.append(swimmingDefined);
    result.append(", swimming: ");
    result.append(swimming);
    result.append(", babyDefined: ");
    result.append(babyDefined);
    result.append(", baby: ");
    result.append(baby);
    result.append(')');
    return result.toString();
  }

} //EntityFlagsImpl
