/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.ExplorationMapLootFunction;
import com.raptor.mcloottable.mcloot.MclootPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exploration Map Loot Function</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.ExplorationMapLootFunctionImpl#getDestination <em>Destination</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.ExplorationMapLootFunctionImpl#getDecoration <em>Decoration</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.ExplorationMapLootFunctionImpl#isZoomDefined <em>Zoom Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.ExplorationMapLootFunctionImpl#getZoom <em>Zoom</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.ExplorationMapLootFunctionImpl#isSearchRadiusDefined <em>Search Radius Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.ExplorationMapLootFunctionImpl#getSearchRadius <em>Search Radius</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.ExplorationMapLootFunctionImpl#isSkipExistingChunksDefined <em>Skip Existing Chunks Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.ExplorationMapLootFunctionImpl#isSkipExistingChunks <em>Skip Existing Chunks</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExplorationMapLootFunctionImpl extends LootFunctionImpl implements ExplorationMapLootFunction
{
  /**
   * The default value of the '{@link #getDestination() <em>Destination</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDestination()
   * @generated
   * @ordered
   */
  protected static final String DESTINATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDestination() <em>Destination</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDestination()
   * @generated
   * @ordered
   */
  protected String destination = DESTINATION_EDEFAULT;

  /**
   * The default value of the '{@link #getDecoration() <em>Decoration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecoration()
   * @generated
   * @ordered
   */
  protected static final String DECORATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDecoration() <em>Decoration</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDecoration()
   * @generated
   * @ordered
   */
  protected String decoration = DECORATION_EDEFAULT;

  /**
   * The default value of the '{@link #isZoomDefined() <em>Zoom Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isZoomDefined()
   * @generated
   * @ordered
   */
  protected static final boolean ZOOM_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isZoomDefined() <em>Zoom Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isZoomDefined()
   * @generated
   * @ordered
   */
  protected boolean zoomDefined = ZOOM_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #getZoom() <em>Zoom</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZoom()
   * @generated
   * @ordered
   */
  protected static final long ZOOM_EDEFAULT = 0L;

  /**
   * The cached value of the '{@link #getZoom() <em>Zoom</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZoom()
   * @generated
   * @ordered
   */
  protected long zoom = ZOOM_EDEFAULT;

  /**
   * The default value of the '{@link #isSearchRadiusDefined() <em>Search Radius Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSearchRadiusDefined()
   * @generated
   * @ordered
   */
  protected static final boolean SEARCH_RADIUS_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSearchRadiusDefined() <em>Search Radius Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSearchRadiusDefined()
   * @generated
   * @ordered
   */
  protected boolean searchRadiusDefined = SEARCH_RADIUS_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #getSearchRadius() <em>Search Radius</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSearchRadius()
   * @generated
   * @ordered
   */
  protected static final long SEARCH_RADIUS_EDEFAULT = 0L;

  /**
   * The cached value of the '{@link #getSearchRadius() <em>Search Radius</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSearchRadius()
   * @generated
   * @ordered
   */
  protected long searchRadius = SEARCH_RADIUS_EDEFAULT;

  /**
   * The default value of the '{@link #isSkipExistingChunksDefined() <em>Skip Existing Chunks Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSkipExistingChunksDefined()
   * @generated
   * @ordered
   */
  protected static final boolean SKIP_EXISTING_CHUNKS_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSkipExistingChunksDefined() <em>Skip Existing Chunks Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSkipExistingChunksDefined()
   * @generated
   * @ordered
   */
  protected boolean skipExistingChunksDefined = SKIP_EXISTING_CHUNKS_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isSkipExistingChunks() <em>Skip Existing Chunks</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSkipExistingChunks()
   * @generated
   * @ordered
   */
  protected static final boolean SKIP_EXISTING_CHUNKS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSkipExistingChunks() <em>Skip Existing Chunks</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSkipExistingChunks()
   * @generated
   * @ordered
   */
  protected boolean skipExistingChunks = SKIP_EXISTING_CHUNKS_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExplorationMapLootFunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.EXPLORATION_MAP_LOOT_FUNCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDestination()
  {
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDestination(String newDestination)
  {
    String oldDestination = destination;
    destination = newDestination;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DESTINATION, oldDestination, destination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDecoration()
  {
    return decoration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDecoration(String newDecoration)
  {
    String oldDecoration = decoration;
    decoration = newDecoration;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DECORATION, oldDecoration, decoration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isZoomDefined()
  {
    return zoomDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setZoomDefined(boolean newZoomDefined)
  {
    boolean oldZoomDefined = zoomDefined;
    zoomDefined = newZoomDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM_DEFINED, oldZoomDefined, zoomDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public long getZoom()
  {
    return zoom;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setZoom(long newZoom)
  {
    long oldZoom = zoom;
    zoom = newZoom;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM, oldZoom, zoom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSearchRadiusDefined()
  {
    return searchRadiusDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSearchRadiusDefined(boolean newSearchRadiusDefined)
  {
    boolean oldSearchRadiusDefined = searchRadiusDefined;
    searchRadiusDefined = newSearchRadiusDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS_DEFINED, oldSearchRadiusDefined, searchRadiusDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public long getSearchRadius()
  {
    return searchRadius;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSearchRadius(long newSearchRadius)
  {
    long oldSearchRadius = searchRadius;
    searchRadius = newSearchRadius;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS, oldSearchRadius, searchRadius));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSkipExistingChunksDefined()
  {
    return skipExistingChunksDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSkipExistingChunksDefined(boolean newSkipExistingChunksDefined)
  {
    boolean oldSkipExistingChunksDefined = skipExistingChunksDefined;
    skipExistingChunksDefined = newSkipExistingChunksDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS_DEFINED, oldSkipExistingChunksDefined, skipExistingChunksDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSkipExistingChunks()
  {
    return skipExistingChunks;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSkipExistingChunks(boolean newSkipExistingChunks)
  {
    boolean oldSkipExistingChunks = skipExistingChunks;
    skipExistingChunks = newSkipExistingChunks;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS, oldSkipExistingChunks, skipExistingChunks));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DESTINATION:
        return getDestination();
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DECORATION:
        return getDecoration();
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM_DEFINED:
        return isZoomDefined();
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM:
        return getZoom();
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS_DEFINED:
        return isSearchRadiusDefined();
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS:
        return getSearchRadius();
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS_DEFINED:
        return isSkipExistingChunksDefined();
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS:
        return isSkipExistingChunks();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DESTINATION:
        setDestination((String)newValue);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DECORATION:
        setDecoration((String)newValue);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM_DEFINED:
        setZoomDefined((Boolean)newValue);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM:
        setZoom((Long)newValue);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS_DEFINED:
        setSearchRadiusDefined((Boolean)newValue);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS:
        setSearchRadius((Long)newValue);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS_DEFINED:
        setSkipExistingChunksDefined((Boolean)newValue);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS:
        setSkipExistingChunks((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DESTINATION:
        setDestination(DESTINATION_EDEFAULT);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DECORATION:
        setDecoration(DECORATION_EDEFAULT);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM_DEFINED:
        setZoomDefined(ZOOM_DEFINED_EDEFAULT);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM:
        setZoom(ZOOM_EDEFAULT);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS_DEFINED:
        setSearchRadiusDefined(SEARCH_RADIUS_DEFINED_EDEFAULT);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS:
        setSearchRadius(SEARCH_RADIUS_EDEFAULT);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS_DEFINED:
        setSkipExistingChunksDefined(SKIP_EXISTING_CHUNKS_DEFINED_EDEFAULT);
        return;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS:
        setSkipExistingChunks(SKIP_EXISTING_CHUNKS_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DESTINATION:
        return DESTINATION_EDEFAULT == null ? destination != null : !DESTINATION_EDEFAULT.equals(destination);
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__DECORATION:
        return DECORATION_EDEFAULT == null ? decoration != null : !DECORATION_EDEFAULT.equals(decoration);
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM_DEFINED:
        return zoomDefined != ZOOM_DEFINED_EDEFAULT;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__ZOOM:
        return zoom != ZOOM_EDEFAULT;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS_DEFINED:
        return searchRadiusDefined != SEARCH_RADIUS_DEFINED_EDEFAULT;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SEARCH_RADIUS:
        return searchRadius != SEARCH_RADIUS_EDEFAULT;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS_DEFINED:
        return skipExistingChunksDefined != SKIP_EXISTING_CHUNKS_DEFINED_EDEFAULT;
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION__SKIP_EXISTING_CHUNKS:
        return skipExistingChunks != SKIP_EXISTING_CHUNKS_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (destination: ");
    result.append(destination);
    result.append(", decoration: ");
    result.append(decoration);
    result.append(", zoomDefined: ");
    result.append(zoomDefined);
    result.append(", zoom: ");
    result.append(zoom);
    result.append(", searchRadiusDefined: ");
    result.append(searchRadiusDefined);
    result.append(", searchRadius: ");
    result.append(searchRadius);
    result.append(", skipExistingChunksDefined: ");
    result.append(skipExistingChunksDefined);
    result.append(", skipExistingChunks: ");
    result.append(skipExistingChunks);
    result.append(')');
    return result.toString();
  }

} //ExplorationMapLootFunctionImpl
