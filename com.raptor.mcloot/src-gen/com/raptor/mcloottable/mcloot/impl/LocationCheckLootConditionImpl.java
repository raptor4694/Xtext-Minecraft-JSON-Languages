/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.LocationCheckLootCondition;
import com.raptor.mcloottable.mcloot.LocationPredicate;
import com.raptor.mcloottable.mcloot.MclootPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Location Check Loot Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationCheckLootConditionImpl#isUndefinedOffsetX <em>Undefined Offset X</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationCheckLootConditionImpl#getOffsetX <em>Offset X</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationCheckLootConditionImpl#isUndefinedOffsetY <em>Undefined Offset Y</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationCheckLootConditionImpl#getOffsetY <em>Offset Y</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationCheckLootConditionImpl#isUndefinedOffsetZ <em>Undefined Offset Z</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationCheckLootConditionImpl#getOffsetZ <em>Offset Z</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.LocationCheckLootConditionImpl#getPredicate <em>Predicate</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LocationCheckLootConditionImpl extends NamedLootConditionImpl implements LocationCheckLootCondition
{
  /**
   * The default value of the '{@link #isUndefinedOffsetX() <em>Undefined Offset X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUndefinedOffsetX()
   * @generated
   * @ordered
   */
  protected static final boolean UNDEFINED_OFFSET_X_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUndefinedOffsetX() <em>Undefined Offset X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUndefinedOffsetX()
   * @generated
   * @ordered
   */
  protected boolean undefinedOffsetX = UNDEFINED_OFFSET_X_EDEFAULT;

  /**
   * The default value of the '{@link #getOffsetX() <em>Offset X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOffsetX()
   * @generated
   * @ordered
   */
  protected static final long OFFSET_X_EDEFAULT = 0L;

  /**
   * The cached value of the '{@link #getOffsetX() <em>Offset X</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOffsetX()
   * @generated
   * @ordered
   */
  protected long offsetX = OFFSET_X_EDEFAULT;

  /**
   * The default value of the '{@link #isUndefinedOffsetY() <em>Undefined Offset Y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUndefinedOffsetY()
   * @generated
   * @ordered
   */
  protected static final boolean UNDEFINED_OFFSET_Y_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUndefinedOffsetY() <em>Undefined Offset Y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUndefinedOffsetY()
   * @generated
   * @ordered
   */
  protected boolean undefinedOffsetY = UNDEFINED_OFFSET_Y_EDEFAULT;

  /**
   * The default value of the '{@link #getOffsetY() <em>Offset Y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOffsetY()
   * @generated
   * @ordered
   */
  protected static final long OFFSET_Y_EDEFAULT = 0L;

  /**
   * The cached value of the '{@link #getOffsetY() <em>Offset Y</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOffsetY()
   * @generated
   * @ordered
   */
  protected long offsetY = OFFSET_Y_EDEFAULT;

  /**
   * The default value of the '{@link #isUndefinedOffsetZ() <em>Undefined Offset Z</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUndefinedOffsetZ()
   * @generated
   * @ordered
   */
  protected static final boolean UNDEFINED_OFFSET_Z_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isUndefinedOffsetZ() <em>Undefined Offset Z</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isUndefinedOffsetZ()
   * @generated
   * @ordered
   */
  protected boolean undefinedOffsetZ = UNDEFINED_OFFSET_Z_EDEFAULT;

  /**
   * The default value of the '{@link #getOffsetZ() <em>Offset Z</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOffsetZ()
   * @generated
   * @ordered
   */
  protected static final long OFFSET_Z_EDEFAULT = 0L;

  /**
   * The cached value of the '{@link #getOffsetZ() <em>Offset Z</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOffsetZ()
   * @generated
   * @ordered
   */
  protected long offsetZ = OFFSET_Z_EDEFAULT;

  /**
   * The cached value of the '{@link #getPredicate() <em>Predicate</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredicate()
   * @generated
   * @ordered
   */
  protected LocationPredicate predicate;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LocationCheckLootConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.LOCATION_CHECK_LOOT_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isUndefinedOffsetX()
  {
    return undefinedOffsetX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUndefinedOffsetX(boolean newUndefinedOffsetX)
  {
    boolean oldUndefinedOffsetX = undefinedOffsetX;
    undefinedOffsetX = newUndefinedOffsetX;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_X, oldUndefinedOffsetX, undefinedOffsetX));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public long getOffsetX()
  {
    return offsetX;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOffsetX(long newOffsetX)
  {
    long oldOffsetX = offsetX;
    offsetX = newOffsetX;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_X, oldOffsetX, offsetX));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isUndefinedOffsetY()
  {
    return undefinedOffsetY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUndefinedOffsetY(boolean newUndefinedOffsetY)
  {
    boolean oldUndefinedOffsetY = undefinedOffsetY;
    undefinedOffsetY = newUndefinedOffsetY;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Y, oldUndefinedOffsetY, undefinedOffsetY));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public long getOffsetY()
  {
    return offsetY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOffsetY(long newOffsetY)
  {
    long oldOffsetY = offsetY;
    offsetY = newOffsetY;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Y, oldOffsetY, offsetY));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isUndefinedOffsetZ()
  {
    return undefinedOffsetZ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUndefinedOffsetZ(boolean newUndefinedOffsetZ)
  {
    boolean oldUndefinedOffsetZ = undefinedOffsetZ;
    undefinedOffsetZ = newUndefinedOffsetZ;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Z, oldUndefinedOffsetZ, undefinedOffsetZ));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public long getOffsetZ()
  {
    return offsetZ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOffsetZ(long newOffsetZ)
  {
    long oldOffsetZ = offsetZ;
    offsetZ = newOffsetZ;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Z, oldOffsetZ, offsetZ));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationPredicate getPredicate()
  {
    return predicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPredicate(LocationPredicate newPredicate, NotificationChain msgs)
  {
    LocationPredicate oldPredicate = predicate;
    predicate = newPredicate;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE, oldPredicate, newPredicate);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredicate(LocationPredicate newPredicate)
  {
    if (newPredicate != predicate)
    {
      NotificationChain msgs = null;
      if (predicate != null)
        msgs = ((InternalEObject)predicate).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE, null, msgs);
      if (newPredicate != null)
        msgs = ((InternalEObject)newPredicate).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE, null, msgs);
      msgs = basicSetPredicate(newPredicate, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE, newPredicate, newPredicate));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE:
        return basicSetPredicate(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_X:
        return isUndefinedOffsetX();
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_X:
        return getOffsetX();
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Y:
        return isUndefinedOffsetY();
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Y:
        return getOffsetY();
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Z:
        return isUndefinedOffsetZ();
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Z:
        return getOffsetZ();
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE:
        return getPredicate();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_X:
        setUndefinedOffsetX((Boolean)newValue);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_X:
        setOffsetX((Long)newValue);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Y:
        setUndefinedOffsetY((Boolean)newValue);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Y:
        setOffsetY((Long)newValue);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Z:
        setUndefinedOffsetZ((Boolean)newValue);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Z:
        setOffsetZ((Long)newValue);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE:
        setPredicate((LocationPredicate)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_X:
        setUndefinedOffsetX(UNDEFINED_OFFSET_X_EDEFAULT);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_X:
        setOffsetX(OFFSET_X_EDEFAULT);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Y:
        setUndefinedOffsetY(UNDEFINED_OFFSET_Y_EDEFAULT);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Y:
        setOffsetY(OFFSET_Y_EDEFAULT);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Z:
        setUndefinedOffsetZ(UNDEFINED_OFFSET_Z_EDEFAULT);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Z:
        setOffsetZ(OFFSET_Z_EDEFAULT);
        return;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE:
        setPredicate((LocationPredicate)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_X:
        return undefinedOffsetX != UNDEFINED_OFFSET_X_EDEFAULT;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_X:
        return offsetX != OFFSET_X_EDEFAULT;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Y:
        return undefinedOffsetY != UNDEFINED_OFFSET_Y_EDEFAULT;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Y:
        return offsetY != OFFSET_Y_EDEFAULT;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__UNDEFINED_OFFSET_Z:
        return undefinedOffsetZ != UNDEFINED_OFFSET_Z_EDEFAULT;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__OFFSET_Z:
        return offsetZ != OFFSET_Z_EDEFAULT;
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION__PREDICATE:
        return predicate != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (undefinedOffsetX: ");
    result.append(undefinedOffsetX);
    result.append(", offsetX: ");
    result.append(offsetX);
    result.append(", undefinedOffsetY: ");
    result.append(undefinedOffsetY);
    result.append(", offsetY: ");
    result.append(offsetY);
    result.append(", undefinedOffsetZ: ");
    result.append(undefinedOffsetZ);
    result.append(", offsetZ: ");
    result.append(offsetZ);
    result.append(')');
    return result.toString();
  }

} //LocationCheckLootConditionImpl
