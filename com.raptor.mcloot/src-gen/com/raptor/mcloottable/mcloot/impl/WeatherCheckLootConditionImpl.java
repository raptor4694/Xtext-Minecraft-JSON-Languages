/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.MclootPackage;
import com.raptor.mcloottable.mcloot.WeatherCheckLootCondition;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Weather Check Loot Condition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.WeatherCheckLootConditionImpl#isInverted <em>Inverted</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.WeatherCheckLootConditionImpl#isRaining <em>Raining</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.WeatherCheckLootConditionImpl#isThundering <em>Thundering</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WeatherCheckLootConditionImpl extends NamedLootConditionImpl implements WeatherCheckLootCondition
{
  /**
   * The default value of the '{@link #isInverted() <em>Inverted</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInverted()
   * @generated
   * @ordered
   */
  protected static final boolean INVERTED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isInverted() <em>Inverted</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isInverted()
   * @generated
   * @ordered
   */
  protected boolean inverted = INVERTED_EDEFAULT;

  /**
   * The default value of the '{@link #isRaining() <em>Raining</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRaining()
   * @generated
   * @ordered
   */
  protected static final boolean RAINING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRaining() <em>Raining</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRaining()
   * @generated
   * @ordered
   */
  protected boolean raining = RAINING_EDEFAULT;

  /**
   * The default value of the '{@link #isThundering() <em>Thundering</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isThundering()
   * @generated
   * @ordered
   */
  protected static final boolean THUNDERING_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isThundering() <em>Thundering</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isThundering()
   * @generated
   * @ordered
   */
  protected boolean thundering = THUNDERING_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WeatherCheckLootConditionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.WEATHER_CHECK_LOOT_CONDITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isInverted()
  {
    return inverted;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInverted(boolean newInverted)
  {
    boolean oldInverted = inverted;
    inverted = newInverted;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.WEATHER_CHECK_LOOT_CONDITION__INVERTED, oldInverted, inverted));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRaining()
  {
    return raining;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRaining(boolean newRaining)
  {
    boolean oldRaining = raining;
    raining = newRaining;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.WEATHER_CHECK_LOOT_CONDITION__RAINING, oldRaining, raining));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isThundering()
  {
    return thundering;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThundering(boolean newThundering)
  {
    boolean oldThundering = thundering;
    thundering = newThundering;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.WEATHER_CHECK_LOOT_CONDITION__THUNDERING, oldThundering, thundering));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__INVERTED:
        return isInverted();
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__RAINING:
        return isRaining();
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__THUNDERING:
        return isThundering();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__INVERTED:
        setInverted((Boolean)newValue);
        return;
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__RAINING:
        setRaining((Boolean)newValue);
        return;
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__THUNDERING:
        setThundering((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__INVERTED:
        setInverted(INVERTED_EDEFAULT);
        return;
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__RAINING:
        setRaining(RAINING_EDEFAULT);
        return;
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__THUNDERING:
        setThundering(THUNDERING_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__INVERTED:
        return inverted != INVERTED_EDEFAULT;
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__RAINING:
        return raining != RAINING_EDEFAULT;
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION__THUNDERING:
        return thundering != THUNDERING_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (inverted: ");
    result.append(inverted);
    result.append(", raining: ");
    result.append(raining);
    result.append(", thundering: ");
    result.append(thundering);
    result.append(')');
    return result.toString();
  }

} //WeatherCheckLootConditionImpl
