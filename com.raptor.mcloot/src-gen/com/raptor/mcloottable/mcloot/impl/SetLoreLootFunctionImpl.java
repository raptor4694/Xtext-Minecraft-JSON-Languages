/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.impl;

import com.raptor.mcloottable.mcloot.EnumEntitySource;
import com.raptor.mcloottable.mcloot.MCJsonValue;
import com.raptor.mcloottable.mcloot.MclootPackage;
import com.raptor.mcloottable.mcloot.SetLoreLootFunction;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Set Lore Loot Function</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.SetLoreLootFunctionImpl#isReplaceDefined <em>Replace Defined</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.SetLoreLootFunctionImpl#isReplace <em>Replace</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.SetLoreLootFunctionImpl#getEntity <em>Entity</em>}</li>
 *   <li>{@link com.raptor.mcloottable.mcloot.impl.SetLoreLootFunctionImpl#getLore <em>Lore</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SetLoreLootFunctionImpl extends LootFunctionImpl implements SetLoreLootFunction
{
  /**
   * The default value of the '{@link #isReplaceDefined() <em>Replace Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReplaceDefined()
   * @generated
   * @ordered
   */
  protected static final boolean REPLACE_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isReplaceDefined() <em>Replace Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReplaceDefined()
   * @generated
   * @ordered
   */
  protected boolean replaceDefined = REPLACE_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isReplace() <em>Replace</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReplace()
   * @generated
   * @ordered
   */
  protected static final boolean REPLACE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isReplace() <em>Replace</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isReplace()
   * @generated
   * @ordered
   */
  protected boolean replace = REPLACE_EDEFAULT;

  /**
   * The default value of the '{@link #getEntity() <em>Entity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntity()
   * @generated
   * @ordered
   */
  protected static final EnumEntitySource ENTITY_EDEFAULT = EnumEntitySource.THIS;

  /**
   * The cached value of the '{@link #getEntity() <em>Entity</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEntity()
   * @generated
   * @ordered
   */
  protected EnumEntitySource entity = ENTITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getLore() <em>Lore</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLore()
   * @generated
   * @ordered
   */
  protected EList<MCJsonValue> lore;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SetLoreLootFunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MclootPackage.Literals.SET_LORE_LOOT_FUNCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isReplaceDefined()
  {
    return replaceDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReplaceDefined(boolean newReplaceDefined)
  {
    boolean oldReplaceDefined = replaceDefined;
    replaceDefined = newReplaceDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE_DEFINED, oldReplaceDefined, replaceDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isReplace()
  {
    return replace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReplace(boolean newReplace)
  {
    boolean oldReplace = replace;
    replace = newReplace;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE, oldReplace, replace));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumEntitySource getEntity()
  {
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEntity(EnumEntitySource newEntity)
  {
    EnumEntitySource oldEntity = entity;
    entity = newEntity == null ? ENTITY_EDEFAULT : newEntity;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MclootPackage.SET_LORE_LOOT_FUNCTION__ENTITY, oldEntity, entity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<MCJsonValue> getLore()
  {
    if (lore == null)
    {
      lore = new EObjectContainmentEList<MCJsonValue>(MCJsonValue.class, this, MclootPackage.SET_LORE_LOOT_FUNCTION__LORE);
    }
    return lore;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MclootPackage.SET_LORE_LOOT_FUNCTION__LORE:
        return ((InternalEList<?>)getLore()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE_DEFINED:
        return isReplaceDefined();
      case MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE:
        return isReplace();
      case MclootPackage.SET_LORE_LOOT_FUNCTION__ENTITY:
        return getEntity();
      case MclootPackage.SET_LORE_LOOT_FUNCTION__LORE:
        return getLore();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE_DEFINED:
        setReplaceDefined((Boolean)newValue);
        return;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE:
        setReplace((Boolean)newValue);
        return;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__ENTITY:
        setEntity((EnumEntitySource)newValue);
        return;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__LORE:
        getLore().clear();
        getLore().addAll((Collection<? extends MCJsonValue>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE_DEFINED:
        setReplaceDefined(REPLACE_DEFINED_EDEFAULT);
        return;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE:
        setReplace(REPLACE_EDEFAULT);
        return;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__ENTITY:
        setEntity(ENTITY_EDEFAULT);
        return;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__LORE:
        getLore().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE_DEFINED:
        return replaceDefined != REPLACE_DEFINED_EDEFAULT;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__REPLACE:
        return replace != REPLACE_EDEFAULT;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__ENTITY:
        return entity != ENTITY_EDEFAULT;
      case MclootPackage.SET_LORE_LOOT_FUNCTION__LORE:
        return lore != null && !lore.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (replaceDefined: ");
    result.append(replaceDefined);
    result.append(", replace: ");
    result.append(replace);
    result.append(", entity: ");
    result.append(entity);
    result.append(')');
    return result.toString();
  }

} //SetLoreLootFunctionImpl
