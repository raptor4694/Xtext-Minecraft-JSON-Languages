/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.util;

import com.raptor.mcloottable.mcloot.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.raptor.mcloottable.mcloot.MclootPackage
 * @generated
 */
public class MclootAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MclootPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MclootAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MclootPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MclootSwitch<Adapter> modelSwitch =
    new MclootSwitch<Adapter>()
    {
      @Override
      public Adapter caseLootTable(LootTable object)
      {
        return createLootTableAdapter();
      }
      @Override
      public Adapter caseLootPool(LootPool object)
      {
        return createLootPoolAdapter();
      }
      @Override
      public Adapter caseLootEntry(LootEntry object)
      {
        return createLootEntryAdapter();
      }
      @Override
      public Adapter caseLootFunction(LootFunction object)
      {
        return createLootFunctionAdapter();
      }
      @Override
      public Adapter caseApplyBonusLootFunction(ApplyBonusLootFunction object)
      {
        return createApplyBonusLootFunctionAdapter();
      }
      @Override
      public Adapter caseCopyNameLootFunction(CopyNameLootFunction object)
      {
        return createCopyNameLootFunctionAdapter();
      }
      @Override
      public Adapter caseCopyNBTLootFunction(CopyNBTLootFunction object)
      {
        return createCopyNBTLootFunctionAdapter();
      }
      @Override
      public Adapter caseNBTOperation(NBTOperation object)
      {
        return createNBTOperationAdapter();
      }
      @Override
      public Adapter caseAppendNBTOperation(AppendNBTOperation object)
      {
        return createAppendNBTOperationAdapter();
      }
      @Override
      public Adapter caseReplaceNBTOperation(ReplaceNBTOperation object)
      {
        return createReplaceNBTOperationAdapter();
      }
      @Override
      public Adapter caseMergeNBTOperation(MergeNBTOperation object)
      {
        return createMergeNBTOperationAdapter();
      }
      @Override
      public Adapter caseCopyStateLootFunction(CopyStateLootFunction object)
      {
        return createCopyStateLootFunctionAdapter();
      }
      @Override
      public Adapter caseEnchantRandomlyLootFunction(EnchantRandomlyLootFunction object)
      {
        return createEnchantRandomlyLootFunctionAdapter();
      }
      @Override
      public Adapter caseEnchantWithLevelsLootFunction(EnchantWithLevelsLootFunction object)
      {
        return createEnchantWithLevelsLootFunctionAdapter();
      }
      @Override
      public Adapter caseExplorationMapLootFunction(ExplorationMapLootFunction object)
      {
        return createExplorationMapLootFunctionAdapter();
      }
      @Override
      public Adapter caseExplosionDecayLootFunction(ExplosionDecayLootFunction object)
      {
        return createExplosionDecayLootFunctionAdapter();
      }
      @Override
      public Adapter caseFurnaceSmeltLootFunction(FurnaceSmeltLootFunction object)
      {
        return createFurnaceSmeltLootFunctionAdapter();
      }
      @Override
      public Adapter caseFillPlayerHeadLootFunction(FillPlayerHeadLootFunction object)
      {
        return createFillPlayerHeadLootFunctionAdapter();
      }
      @Override
      public Adapter caseLimitCountLootFunction(LimitCountLootFunction object)
      {
        return createLimitCountLootFunctionAdapter();
      }
      @Override
      public Adapter caseLootingEnchantLootFunction(LootingEnchantLootFunction object)
      {
        return createLootingEnchantLootFunctionAdapter();
      }
      @Override
      public Adapter caseSetAttributesLootFunction(SetAttributesLootFunction object)
      {
        return createSetAttributesLootFunctionAdapter();
      }
      @Override
      public Adapter caseAttributeModifier(AttributeModifier object)
      {
        return createAttributeModifierAdapter();
      }
      @Override
      public Adapter caseSetContentsLootFunction(SetContentsLootFunction object)
      {
        return createSetContentsLootFunctionAdapter();
      }
      @Override
      public Adapter caseSetCountLootFunction(SetCountLootFunction object)
      {
        return createSetCountLootFunctionAdapter();
      }
      @Override
      public Adapter caseCount(Count object)
      {
        return createCountAdapter();
      }
      @Override
      public Adapter caseExactCount(ExactCount object)
      {
        return createExactCountAdapter();
      }
      @Override
      public Adapter caseSpecialCount(SpecialCount object)
      {
        return createSpecialCountAdapter();
      }
      @Override
      public Adapter caseUniformCount(UniformCount object)
      {
        return createUniformCountAdapter();
      }
      @Override
      public Adapter caseBinomialCount(BinomialCount object)
      {
        return createBinomialCountAdapter();
      }
      @Override
      public Adapter caseSetDamageLootFunction(SetDamageLootFunction object)
      {
        return createSetDamageLootFunctionAdapter();
      }
      @Override
      public Adapter caseSetLoreLootFunction(SetLoreLootFunction object)
      {
        return createSetLoreLootFunctionAdapter();
      }
      @Override
      public Adapter caseSetNameLootFunction(SetNameLootFunction object)
      {
        return createSetNameLootFunctionAdapter();
      }
      @Override
      public Adapter caseSetNBTLootFunction(SetNBTLootFunction object)
      {
        return createSetNBTLootFunctionAdapter();
      }
      @Override
      public Adapter caseSetStewEffectLootFunction(SetStewEffectLootFunction object)
      {
        return createSetStewEffectLootFunctionAdapter();
      }
      @Override
      public Adapter caseStewEffect(StewEffect object)
      {
        return createStewEffectAdapter();
      }
      @Override
      public Adapter caseLootCondition(LootCondition object)
      {
        return createLootConditionAdapter();
      }
      @Override
      public Adapter caseNamedLootCondition(NamedLootCondition object)
      {
        return createNamedLootConditionAdapter();
      }
      @Override
      public Adapter caseBlockStatePropertiesLootCondition(BlockStatePropertiesLootCondition object)
      {
        return createBlockStatePropertiesLootConditionAdapter();
      }
      @Override
      public Adapter caseBlockStateProperty(BlockStateProperty object)
      {
        return createBlockStatePropertyAdapter();
      }
      @Override
      public Adapter caseDamageSourcePropertiesLootCondition(DamageSourcePropertiesLootCondition object)
      {
        return createDamageSourcePropertiesLootConditionAdapter();
      }
      @Override
      public Adapter caseEntityPropertiesLootCondition(EntityPropertiesLootCondition object)
      {
        return createEntityPropertiesLootConditionAdapter();
      }
      @Override
      public Adapter caseEntityScoresLootCondition(EntityScoresLootCondition object)
      {
        return createEntityScoresLootConditionAdapter();
      }
      @Override
      public Adapter caseEntityScore(EntityScore object)
      {
        return createEntityScoreAdapter();
      }
      @Override
      public Adapter caseKilledByPlayerLootCondition(KilledByPlayerLootCondition object)
      {
        return createKilledByPlayerLootConditionAdapter();
      }
      @Override
      public Adapter caseLocationCheckLootCondition(LocationCheckLootCondition object)
      {
        return createLocationCheckLootConditionAdapter();
      }
      @Override
      public Adapter caseMatchToolLootCondition(MatchToolLootCondition object)
      {
        return createMatchToolLootConditionAdapter();
      }
      @Override
      public Adapter caseRandomChanceLootCondition(RandomChanceLootCondition object)
      {
        return createRandomChanceLootConditionAdapter();
      }
      @Override
      public Adapter caseReferenceLootCondition(ReferenceLootCondition object)
      {
        return createReferenceLootConditionAdapter();
      }
      @Override
      public Adapter caseSurvivesExplosionLootCondition(SurvivesExplosionLootCondition object)
      {
        return createSurvivesExplosionLootConditionAdapter();
      }
      @Override
      public Adapter caseTableBonusLootCondition(TableBonusLootCondition object)
      {
        return createTableBonusLootConditionAdapter();
      }
      @Override
      public Adapter caseTimeCheckLootCondition(TimeCheckLootCondition object)
      {
        return createTimeCheckLootConditionAdapter();
      }
      @Override
      public Adapter caseToolEnchantmentLootCondition(ToolEnchantmentLootCondition object)
      {
        return createToolEnchantmentLootConditionAdapter();
      }
      @Override
      public Adapter caseEnchantmentLevel(EnchantmentLevel object)
      {
        return createEnchantmentLevelAdapter();
      }
      @Override
      public Adapter caseWeatherCheckLootCondition(WeatherCheckLootCondition object)
      {
        return createWeatherCheckLootConditionAdapter();
      }
      @Override
      public Adapter caseEntityPredicate(EntityPredicate object)
      {
        return createEntityPredicateAdapter();
      }
      @Override
      public Adapter caseFishingHookPredicate(FishingHookPredicate object)
      {
        return createFishingHookPredicateAdapter();
      }
      @Override
      public Adapter caseEffectPredicate(EffectPredicate object)
      {
        return createEffectPredicateAdapter();
      }
      @Override
      public Adapter caseEquipmentPredicate(EquipmentPredicate object)
      {
        return createEquipmentPredicateAdapter();
      }
      @Override
      public Adapter caseEntityFlags(EntityFlags object)
      {
        return createEntityFlagsAdapter();
      }
      @Override
      public Adapter casePlayerPredicate(PlayerPredicate object)
      {
        return createPlayerPredicateAdapter();
      }
      @Override
      public Adapter caseAdvancementPredicate(AdvancementPredicate object)
      {
        return createAdvancementPredicateAdapter();
      }
      @Override
      public Adapter caseAdvancementCriteria(AdvancementCriteria object)
      {
        return createAdvancementCriteriaAdapter();
      }
      @Override
      public Adapter caseRecipePredicate(RecipePredicate object)
      {
        return createRecipePredicateAdapter();
      }
      @Override
      public Adapter caseStatisticPredicate(StatisticPredicate object)
      {
        return createStatisticPredicateAdapter();
      }
      @Override
      public Adapter caseSingleStatisticPredicate(SingleStatisticPredicate object)
      {
        return createSingleStatisticPredicateAdapter();
      }
      @Override
      public Adapter caseNamespacedStatisticPredicate(NamespacedStatisticPredicate object)
      {
        return createNamespacedStatisticPredicateAdapter();
      }
      @Override
      public Adapter caseUnnamespacedStatisticPredicate(UnnamespacedStatisticPredicate object)
      {
        return createUnnamespacedStatisticPredicateAdapter();
      }
      @Override
      public Adapter caseLocationPredicate(LocationPredicate object)
      {
        return createLocationPredicateAdapter();
      }
      @Override
      public Adapter caseItemPredicate(ItemPredicate object)
      {
        return createItemPredicateAdapter();
      }
      @Override
      public Adapter caseBlockPredicate(BlockPredicate object)
      {
        return createBlockPredicateAdapter();
      }
      @Override
      public Adapter caseBlockStatePropertyPredicate(BlockStatePropertyPredicate object)
      {
        return createBlockStatePropertyPredicateAdapter();
      }
      @Override
      public Adapter caseFluidPredicate(FluidPredicate object)
      {
        return createFluidPredicateAdapter();
      }
      @Override
      public Adapter caseMCJsonValue(MCJsonValue object)
      {
        return createMCJsonValueAdapter();
      }
      @Override
      public Adapter caseMCJsonObject(MCJsonObject object)
      {
        return createMCJsonObjectAdapter();
      }
      @Override
      public Adapter caseMCJsonEntry(MCJsonEntry object)
      {
        return createMCJsonEntryAdapter();
      }
      @Override
      public Adapter caseMCJsonArray(MCJsonArray object)
      {
        return createMCJsonArrayAdapter();
      }
      @Override
      public Adapter caseMCJsonString(MCJsonString object)
      {
        return createMCJsonStringAdapter();
      }
      @Override
      public Adapter caseMCJsonNumber(MCJsonNumber object)
      {
        return createMCJsonNumberAdapter();
      }
      @Override
      public Adapter caseMCJsonIntegral(MCJsonIntegral object)
      {
        return createMCJsonIntegralAdapter();
      }
      @Override
      public Adapter caseMCJsonFloatingPoint(MCJsonFloatingPoint object)
      {
        return createMCJsonFloatingPointAdapter();
      }
      @Override
      public Adapter caseMCJsonBoolean(MCJsonBoolean object)
      {
        return createMCJsonBooleanAdapter();
      }
      @Override
      public Adapter caseMCJsonNull(MCJsonNull object)
      {
        return createMCJsonNullAdapter();
      }
      @Override
      public Adapter caseLongRange(LongRange object)
      {
        return createLongRangeAdapter();
      }
      @Override
      public Adapter caseExactLongRange(ExactLongRange object)
      {
        return createExactLongRangeAdapter();
      }
      @Override
      public Adapter caseNormalLongRange(NormalLongRange object)
      {
        return createNormalLongRangeAdapter();
      }
      @Override
      public Adapter caseDoubleRange(DoubleRange object)
      {
        return createDoubleRangeAdapter();
      }
      @Override
      public Adapter caseExactDoubleRange(ExactDoubleRange object)
      {
        return createExactDoubleRangeAdapter();
      }
      @Override
      public Adapter caseNormalDoubleRange(NormalDoubleRange object)
      {
        return createNormalDoubleRangeAdapter();
      }
      @Override
      public Adapter caseLootFunctionWithConditions(LootFunctionWithConditions object)
      {
        return createLootFunctionWithConditionsAdapter();
      }
      @Override
      public Adapter caseAlternativeLootCondition(AlternativeLootCondition object)
      {
        return createAlternativeLootConditionAdapter();
      }
      @Override
      public Adapter caseInvertedLootCondition(InvertedLootCondition object)
      {
        return createInvertedLootConditionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LootTable <em>Loot Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LootTable
   * @generated
   */
  public Adapter createLootTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LootPool <em>Loot Pool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LootPool
   * @generated
   */
  public Adapter createLootPoolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LootEntry <em>Loot Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LootEntry
   * @generated
   */
  public Adapter createLootEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LootFunction <em>Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LootFunction
   * @generated
   */
  public Adapter createLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ApplyBonusLootFunction <em>Apply Bonus Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ApplyBonusLootFunction
   * @generated
   */
  public Adapter createApplyBonusLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.CopyNameLootFunction <em>Copy Name Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.CopyNameLootFunction
   * @generated
   */
  public Adapter createCopyNameLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.CopyNBTLootFunction <em>Copy NBT Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.CopyNBTLootFunction
   * @generated
   */
  public Adapter createCopyNBTLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.NBTOperation <em>NBT Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.NBTOperation
   * @generated
   */
  public Adapter createNBTOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.AppendNBTOperation <em>Append NBT Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.AppendNBTOperation
   * @generated
   */
  public Adapter createAppendNBTOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ReplaceNBTOperation <em>Replace NBT Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ReplaceNBTOperation
   * @generated
   */
  public Adapter createReplaceNBTOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MergeNBTOperation <em>Merge NBT Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MergeNBTOperation
   * @generated
   */
  public Adapter createMergeNBTOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.CopyStateLootFunction <em>Copy State Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.CopyStateLootFunction
   * @generated
   */
  public Adapter createCopyStateLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EnchantRandomlyLootFunction <em>Enchant Randomly Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EnchantRandomlyLootFunction
   * @generated
   */
  public Adapter createEnchantRandomlyLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EnchantWithLevelsLootFunction <em>Enchant With Levels Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EnchantWithLevelsLootFunction
   * @generated
   */
  public Adapter createEnchantWithLevelsLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ExplorationMapLootFunction <em>Exploration Map Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ExplorationMapLootFunction
   * @generated
   */
  public Adapter createExplorationMapLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ExplosionDecayLootFunction <em>Explosion Decay Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ExplosionDecayLootFunction
   * @generated
   */
  public Adapter createExplosionDecayLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.FurnaceSmeltLootFunction <em>Furnace Smelt Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.FurnaceSmeltLootFunction
   * @generated
   */
  public Adapter createFurnaceSmeltLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.FillPlayerHeadLootFunction <em>Fill Player Head Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.FillPlayerHeadLootFunction
   * @generated
   */
  public Adapter createFillPlayerHeadLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LimitCountLootFunction <em>Limit Count Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LimitCountLootFunction
   * @generated
   */
  public Adapter createLimitCountLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LootingEnchantLootFunction <em>Looting Enchant Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LootingEnchantLootFunction
   * @generated
   */
  public Adapter createLootingEnchantLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SetAttributesLootFunction <em>Set Attributes Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SetAttributesLootFunction
   * @generated
   */
  public Adapter createSetAttributesLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.AttributeModifier <em>Attribute Modifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.AttributeModifier
   * @generated
   */
  public Adapter createAttributeModifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SetContentsLootFunction <em>Set Contents Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SetContentsLootFunction
   * @generated
   */
  public Adapter createSetContentsLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SetCountLootFunction <em>Set Count Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SetCountLootFunction
   * @generated
   */
  public Adapter createSetCountLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.Count <em>Count</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.Count
   * @generated
   */
  public Adapter createCountAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ExactCount <em>Exact Count</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ExactCount
   * @generated
   */
  public Adapter createExactCountAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SpecialCount <em>Special Count</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SpecialCount
   * @generated
   */
  public Adapter createSpecialCountAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.UniformCount <em>Uniform Count</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.UniformCount
   * @generated
   */
  public Adapter createUniformCountAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.BinomialCount <em>Binomial Count</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.BinomialCount
   * @generated
   */
  public Adapter createBinomialCountAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SetDamageLootFunction <em>Set Damage Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SetDamageLootFunction
   * @generated
   */
  public Adapter createSetDamageLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SetLoreLootFunction <em>Set Lore Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SetLoreLootFunction
   * @generated
   */
  public Adapter createSetLoreLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SetNameLootFunction <em>Set Name Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SetNameLootFunction
   * @generated
   */
  public Adapter createSetNameLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SetNBTLootFunction <em>Set NBT Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SetNBTLootFunction
   * @generated
   */
  public Adapter createSetNBTLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SetStewEffectLootFunction <em>Set Stew Effect Loot Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SetStewEffectLootFunction
   * @generated
   */
  public Adapter createSetStewEffectLootFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.StewEffect <em>Stew Effect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.StewEffect
   * @generated
   */
  public Adapter createStewEffectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LootCondition <em>Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LootCondition
   * @generated
   */
  public Adapter createLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.NamedLootCondition <em>Named Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.NamedLootCondition
   * @generated
   */
  public Adapter createNamedLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.BlockStatePropertiesLootCondition <em>Block State Properties Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.BlockStatePropertiesLootCondition
   * @generated
   */
  public Adapter createBlockStatePropertiesLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.BlockStateProperty <em>Block State Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.BlockStateProperty
   * @generated
   */
  public Adapter createBlockStatePropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.DamageSourcePropertiesLootCondition <em>Damage Source Properties Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.DamageSourcePropertiesLootCondition
   * @generated
   */
  public Adapter createDamageSourcePropertiesLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EntityPropertiesLootCondition <em>Entity Properties Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EntityPropertiesLootCondition
   * @generated
   */
  public Adapter createEntityPropertiesLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EntityScoresLootCondition <em>Entity Scores Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EntityScoresLootCondition
   * @generated
   */
  public Adapter createEntityScoresLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EntityScore <em>Entity Score</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EntityScore
   * @generated
   */
  public Adapter createEntityScoreAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.KilledByPlayerLootCondition <em>Killed By Player Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.KilledByPlayerLootCondition
   * @generated
   */
  public Adapter createKilledByPlayerLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LocationCheckLootCondition <em>Location Check Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LocationCheckLootCondition
   * @generated
   */
  public Adapter createLocationCheckLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MatchToolLootCondition <em>Match Tool Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MatchToolLootCondition
   * @generated
   */
  public Adapter createMatchToolLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.RandomChanceLootCondition <em>Random Chance Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.RandomChanceLootCondition
   * @generated
   */
  public Adapter createRandomChanceLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ReferenceLootCondition <em>Reference Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ReferenceLootCondition
   * @generated
   */
  public Adapter createReferenceLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SurvivesExplosionLootCondition <em>Survives Explosion Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SurvivesExplosionLootCondition
   * @generated
   */
  public Adapter createSurvivesExplosionLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.TableBonusLootCondition <em>Table Bonus Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.TableBonusLootCondition
   * @generated
   */
  public Adapter createTableBonusLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.TimeCheckLootCondition <em>Time Check Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.TimeCheckLootCondition
   * @generated
   */
  public Adapter createTimeCheckLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ToolEnchantmentLootCondition <em>Tool Enchantment Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ToolEnchantmentLootCondition
   * @generated
   */
  public Adapter createToolEnchantmentLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EnchantmentLevel <em>Enchantment Level</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EnchantmentLevel
   * @generated
   */
  public Adapter createEnchantmentLevelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.WeatherCheckLootCondition <em>Weather Check Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.WeatherCheckLootCondition
   * @generated
   */
  public Adapter createWeatherCheckLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EntityPredicate <em>Entity Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EntityPredicate
   * @generated
   */
  public Adapter createEntityPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.FishingHookPredicate <em>Fishing Hook Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.FishingHookPredicate
   * @generated
   */
  public Adapter createFishingHookPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EffectPredicate <em>Effect Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EffectPredicate
   * @generated
   */
  public Adapter createEffectPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EquipmentPredicate <em>Equipment Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EquipmentPredicate
   * @generated
   */
  public Adapter createEquipmentPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.EntityFlags <em>Entity Flags</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.EntityFlags
   * @generated
   */
  public Adapter createEntityFlagsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.PlayerPredicate <em>Player Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.PlayerPredicate
   * @generated
   */
  public Adapter createPlayerPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.AdvancementPredicate <em>Advancement Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.AdvancementPredicate
   * @generated
   */
  public Adapter createAdvancementPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.AdvancementCriteria <em>Advancement Criteria</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.AdvancementCriteria
   * @generated
   */
  public Adapter createAdvancementCriteriaAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.RecipePredicate <em>Recipe Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.RecipePredicate
   * @generated
   */
  public Adapter createRecipePredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.StatisticPredicate <em>Statistic Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.StatisticPredicate
   * @generated
   */
  public Adapter createStatisticPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.SingleStatisticPredicate <em>Single Statistic Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.SingleStatisticPredicate
   * @generated
   */
  public Adapter createSingleStatisticPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.NamespacedStatisticPredicate <em>Namespaced Statistic Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.NamespacedStatisticPredicate
   * @generated
   */
  public Adapter createNamespacedStatisticPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.UnnamespacedStatisticPredicate <em>Unnamespaced Statistic Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.UnnamespacedStatisticPredicate
   * @generated
   */
  public Adapter createUnnamespacedStatisticPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LocationPredicate <em>Location Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LocationPredicate
   * @generated
   */
  public Adapter createLocationPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ItemPredicate <em>Item Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ItemPredicate
   * @generated
   */
  public Adapter createItemPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.BlockPredicate <em>Block Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.BlockPredicate
   * @generated
   */
  public Adapter createBlockPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.BlockStatePropertyPredicate <em>Block State Property Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.BlockStatePropertyPredicate
   * @generated
   */
  public Adapter createBlockStatePropertyPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.FluidPredicate <em>Fluid Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.FluidPredicate
   * @generated
   */
  public Adapter createFluidPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonValue <em>MC Json Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonValue
   * @generated
   */
  public Adapter createMCJsonValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonObject <em>MC Json Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonObject
   * @generated
   */
  public Adapter createMCJsonObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonEntry <em>MC Json Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonEntry
   * @generated
   */
  public Adapter createMCJsonEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonArray <em>MC Json Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonArray
   * @generated
   */
  public Adapter createMCJsonArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonString <em>MC Json String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonString
   * @generated
   */
  public Adapter createMCJsonStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonNumber <em>MC Json Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonNumber
   * @generated
   */
  public Adapter createMCJsonNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonIntegral <em>MC Json Integral</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonIntegral
   * @generated
   */
  public Adapter createMCJsonIntegralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonFloatingPoint <em>MC Json Floating Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonFloatingPoint
   * @generated
   */
  public Adapter createMCJsonFloatingPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonBoolean <em>MC Json Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonBoolean
   * @generated
   */
  public Adapter createMCJsonBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.MCJsonNull <em>MC Json Null</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.MCJsonNull
   * @generated
   */
  public Adapter createMCJsonNullAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LongRange <em>Long Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LongRange
   * @generated
   */
  public Adapter createLongRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ExactLongRange <em>Exact Long Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ExactLongRange
   * @generated
   */
  public Adapter createExactLongRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.NormalLongRange <em>Normal Long Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.NormalLongRange
   * @generated
   */
  public Adapter createNormalLongRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.DoubleRange <em>Double Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.DoubleRange
   * @generated
   */
  public Adapter createDoubleRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.ExactDoubleRange <em>Exact Double Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.ExactDoubleRange
   * @generated
   */
  public Adapter createExactDoubleRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.NormalDoubleRange <em>Normal Double Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.NormalDoubleRange
   * @generated
   */
  public Adapter createNormalDoubleRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.LootFunctionWithConditions <em>Loot Function With Conditions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.LootFunctionWithConditions
   * @generated
   */
  public Adapter createLootFunctionWithConditionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.AlternativeLootCondition <em>Alternative Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.AlternativeLootCondition
   * @generated
   */
  public Adapter createAlternativeLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcloottable.mcloot.InvertedLootCondition <em>Inverted Loot Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcloottable.mcloot.InvertedLootCondition
   * @generated
   */
  public Adapter createInvertedLootConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MclootAdapterFactory
