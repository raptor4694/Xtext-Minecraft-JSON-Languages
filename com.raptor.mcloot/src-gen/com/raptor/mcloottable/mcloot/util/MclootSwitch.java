/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcloottable.mcloot.util;

import com.raptor.mcloottable.mcloot.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.raptor.mcloottable.mcloot.MclootPackage
 * @generated
 */
public class MclootSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MclootPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MclootSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MclootPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MclootPackage.LOOT_TABLE:
      {
        LootTable lootTable = (LootTable)theEObject;
        T result = caseLootTable(lootTable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LOOT_POOL:
      {
        LootPool lootPool = (LootPool)theEObject;
        T result = caseLootPool(lootPool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LOOT_ENTRY:
      {
        LootEntry lootEntry = (LootEntry)theEObject;
        T result = caseLootEntry(lootEntry);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LOOT_FUNCTION:
      {
        LootFunction lootFunction = (LootFunction)theEObject;
        T result = caseLootFunction(lootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.APPLY_BONUS_LOOT_FUNCTION:
      {
        ApplyBonusLootFunction applyBonusLootFunction = (ApplyBonusLootFunction)theEObject;
        T result = caseApplyBonusLootFunction(applyBonusLootFunction);
        if (result == null) result = caseLootFunction(applyBonusLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.COPY_NAME_LOOT_FUNCTION:
      {
        CopyNameLootFunction copyNameLootFunction = (CopyNameLootFunction)theEObject;
        T result = caseCopyNameLootFunction(copyNameLootFunction);
        if (result == null) result = caseLootFunction(copyNameLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.COPY_NBT_LOOT_FUNCTION:
      {
        CopyNBTLootFunction copyNBTLootFunction = (CopyNBTLootFunction)theEObject;
        T result = caseCopyNBTLootFunction(copyNBTLootFunction);
        if (result == null) result = caseLootFunction(copyNBTLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.NBT_OPERATION:
      {
        NBTOperation nbtOperation = (NBTOperation)theEObject;
        T result = caseNBTOperation(nbtOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.APPEND_NBT_OPERATION:
      {
        AppendNBTOperation appendNBTOperation = (AppendNBTOperation)theEObject;
        T result = caseAppendNBTOperation(appendNBTOperation);
        if (result == null) result = caseNBTOperation(appendNBTOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.REPLACE_NBT_OPERATION:
      {
        ReplaceNBTOperation replaceNBTOperation = (ReplaceNBTOperation)theEObject;
        T result = caseReplaceNBTOperation(replaceNBTOperation);
        if (result == null) result = caseNBTOperation(replaceNBTOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MERGE_NBT_OPERATION:
      {
        MergeNBTOperation mergeNBTOperation = (MergeNBTOperation)theEObject;
        T result = caseMergeNBTOperation(mergeNBTOperation);
        if (result == null) result = caseNBTOperation(mergeNBTOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.COPY_STATE_LOOT_FUNCTION:
      {
        CopyStateLootFunction copyStateLootFunction = (CopyStateLootFunction)theEObject;
        T result = caseCopyStateLootFunction(copyStateLootFunction);
        if (result == null) result = caseLootFunction(copyStateLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ENCHANT_RANDOMLY_LOOT_FUNCTION:
      {
        EnchantRandomlyLootFunction enchantRandomlyLootFunction = (EnchantRandomlyLootFunction)theEObject;
        T result = caseEnchantRandomlyLootFunction(enchantRandomlyLootFunction);
        if (result == null) result = caseLootFunction(enchantRandomlyLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ENCHANT_WITH_LEVELS_LOOT_FUNCTION:
      {
        EnchantWithLevelsLootFunction enchantWithLevelsLootFunction = (EnchantWithLevelsLootFunction)theEObject;
        T result = caseEnchantWithLevelsLootFunction(enchantWithLevelsLootFunction);
        if (result == null) result = caseLootFunction(enchantWithLevelsLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.EXPLORATION_MAP_LOOT_FUNCTION:
      {
        ExplorationMapLootFunction explorationMapLootFunction = (ExplorationMapLootFunction)theEObject;
        T result = caseExplorationMapLootFunction(explorationMapLootFunction);
        if (result == null) result = caseLootFunction(explorationMapLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.EXPLOSION_DECAY_LOOT_FUNCTION:
      {
        ExplosionDecayLootFunction explosionDecayLootFunction = (ExplosionDecayLootFunction)theEObject;
        T result = caseExplosionDecayLootFunction(explosionDecayLootFunction);
        if (result == null) result = caseLootFunction(explosionDecayLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.FURNACE_SMELT_LOOT_FUNCTION:
      {
        FurnaceSmeltLootFunction furnaceSmeltLootFunction = (FurnaceSmeltLootFunction)theEObject;
        T result = caseFurnaceSmeltLootFunction(furnaceSmeltLootFunction);
        if (result == null) result = caseLootFunction(furnaceSmeltLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.FILL_PLAYER_HEAD_LOOT_FUNCTION:
      {
        FillPlayerHeadLootFunction fillPlayerHeadLootFunction = (FillPlayerHeadLootFunction)theEObject;
        T result = caseFillPlayerHeadLootFunction(fillPlayerHeadLootFunction);
        if (result == null) result = caseLootFunction(fillPlayerHeadLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LIMIT_COUNT_LOOT_FUNCTION:
      {
        LimitCountLootFunction limitCountLootFunction = (LimitCountLootFunction)theEObject;
        T result = caseLimitCountLootFunction(limitCountLootFunction);
        if (result == null) result = caseLootFunction(limitCountLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LOOTING_ENCHANT_LOOT_FUNCTION:
      {
        LootingEnchantLootFunction lootingEnchantLootFunction = (LootingEnchantLootFunction)theEObject;
        T result = caseLootingEnchantLootFunction(lootingEnchantLootFunction);
        if (result == null) result = caseLootFunction(lootingEnchantLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SET_ATTRIBUTES_LOOT_FUNCTION:
      {
        SetAttributesLootFunction setAttributesLootFunction = (SetAttributesLootFunction)theEObject;
        T result = caseSetAttributesLootFunction(setAttributesLootFunction);
        if (result == null) result = caseLootFunction(setAttributesLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ATTRIBUTE_MODIFIER:
      {
        AttributeModifier attributeModifier = (AttributeModifier)theEObject;
        T result = caseAttributeModifier(attributeModifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SET_CONTENTS_LOOT_FUNCTION:
      {
        SetContentsLootFunction setContentsLootFunction = (SetContentsLootFunction)theEObject;
        T result = caseSetContentsLootFunction(setContentsLootFunction);
        if (result == null) result = caseLootFunction(setContentsLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SET_COUNT_LOOT_FUNCTION:
      {
        SetCountLootFunction setCountLootFunction = (SetCountLootFunction)theEObject;
        T result = caseSetCountLootFunction(setCountLootFunction);
        if (result == null) result = caseLootFunction(setCountLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.COUNT:
      {
        Count count = (Count)theEObject;
        T result = caseCount(count);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.EXACT_COUNT:
      {
        ExactCount exactCount = (ExactCount)theEObject;
        T result = caseExactCount(exactCount);
        if (result == null) result = caseCount(exactCount);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SPECIAL_COUNT:
      {
        SpecialCount specialCount = (SpecialCount)theEObject;
        T result = caseSpecialCount(specialCount);
        if (result == null) result = caseCount(specialCount);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.UNIFORM_COUNT:
      {
        UniformCount uniformCount = (UniformCount)theEObject;
        T result = caseUniformCount(uniformCount);
        if (result == null) result = caseSpecialCount(uniformCount);
        if (result == null) result = caseCount(uniformCount);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.BINOMIAL_COUNT:
      {
        BinomialCount binomialCount = (BinomialCount)theEObject;
        T result = caseBinomialCount(binomialCount);
        if (result == null) result = caseSpecialCount(binomialCount);
        if (result == null) result = caseCount(binomialCount);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SET_DAMAGE_LOOT_FUNCTION:
      {
        SetDamageLootFunction setDamageLootFunction = (SetDamageLootFunction)theEObject;
        T result = caseSetDamageLootFunction(setDamageLootFunction);
        if (result == null) result = caseLootFunction(setDamageLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SET_LORE_LOOT_FUNCTION:
      {
        SetLoreLootFunction setLoreLootFunction = (SetLoreLootFunction)theEObject;
        T result = caseSetLoreLootFunction(setLoreLootFunction);
        if (result == null) result = caseLootFunction(setLoreLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SET_NAME_LOOT_FUNCTION:
      {
        SetNameLootFunction setNameLootFunction = (SetNameLootFunction)theEObject;
        T result = caseSetNameLootFunction(setNameLootFunction);
        if (result == null) result = caseLootFunction(setNameLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SET_NBT_LOOT_FUNCTION:
      {
        SetNBTLootFunction setNBTLootFunction = (SetNBTLootFunction)theEObject;
        T result = caseSetNBTLootFunction(setNBTLootFunction);
        if (result == null) result = caseLootFunction(setNBTLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SET_STEW_EFFECT_LOOT_FUNCTION:
      {
        SetStewEffectLootFunction setStewEffectLootFunction = (SetStewEffectLootFunction)theEObject;
        T result = caseSetStewEffectLootFunction(setStewEffectLootFunction);
        if (result == null) result = caseLootFunction(setStewEffectLootFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.STEW_EFFECT:
      {
        StewEffect stewEffect = (StewEffect)theEObject;
        T result = caseStewEffect(stewEffect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LOOT_CONDITION:
      {
        LootCondition lootCondition = (LootCondition)theEObject;
        T result = caseLootCondition(lootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.NAMED_LOOT_CONDITION:
      {
        NamedLootCondition namedLootCondition = (NamedLootCondition)theEObject;
        T result = caseNamedLootCondition(namedLootCondition);
        if (result == null) result = caseLootCondition(namedLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.BLOCK_STATE_PROPERTIES_LOOT_CONDITION:
      {
        BlockStatePropertiesLootCondition blockStatePropertiesLootCondition = (BlockStatePropertiesLootCondition)theEObject;
        T result = caseBlockStatePropertiesLootCondition(blockStatePropertiesLootCondition);
        if (result == null) result = caseNamedLootCondition(blockStatePropertiesLootCondition);
        if (result == null) result = caseLootCondition(blockStatePropertiesLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.BLOCK_STATE_PROPERTY:
      {
        BlockStateProperty blockStateProperty = (BlockStateProperty)theEObject;
        T result = caseBlockStateProperty(blockStateProperty);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.DAMAGE_SOURCE_PROPERTIES_LOOT_CONDITION:
      {
        DamageSourcePropertiesLootCondition damageSourcePropertiesLootCondition = (DamageSourcePropertiesLootCondition)theEObject;
        T result = caseDamageSourcePropertiesLootCondition(damageSourcePropertiesLootCondition);
        if (result == null) result = caseNamedLootCondition(damageSourcePropertiesLootCondition);
        if (result == null) result = caseLootCondition(damageSourcePropertiesLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ENTITY_PROPERTIES_LOOT_CONDITION:
      {
        EntityPropertiesLootCondition entityPropertiesLootCondition = (EntityPropertiesLootCondition)theEObject;
        T result = caseEntityPropertiesLootCondition(entityPropertiesLootCondition);
        if (result == null) result = caseNamedLootCondition(entityPropertiesLootCondition);
        if (result == null) result = caseLootCondition(entityPropertiesLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ENTITY_SCORES_LOOT_CONDITION:
      {
        EntityScoresLootCondition entityScoresLootCondition = (EntityScoresLootCondition)theEObject;
        T result = caseEntityScoresLootCondition(entityScoresLootCondition);
        if (result == null) result = caseNamedLootCondition(entityScoresLootCondition);
        if (result == null) result = caseLootCondition(entityScoresLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ENTITY_SCORE:
      {
        EntityScore entityScore = (EntityScore)theEObject;
        T result = caseEntityScore(entityScore);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.KILLED_BY_PLAYER_LOOT_CONDITION:
      {
        KilledByPlayerLootCondition killedByPlayerLootCondition = (KilledByPlayerLootCondition)theEObject;
        T result = caseKilledByPlayerLootCondition(killedByPlayerLootCondition);
        if (result == null) result = caseNamedLootCondition(killedByPlayerLootCondition);
        if (result == null) result = caseLootCondition(killedByPlayerLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LOCATION_CHECK_LOOT_CONDITION:
      {
        LocationCheckLootCondition locationCheckLootCondition = (LocationCheckLootCondition)theEObject;
        T result = caseLocationCheckLootCondition(locationCheckLootCondition);
        if (result == null) result = caseNamedLootCondition(locationCheckLootCondition);
        if (result == null) result = caseLootCondition(locationCheckLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MATCH_TOOL_LOOT_CONDITION:
      {
        MatchToolLootCondition matchToolLootCondition = (MatchToolLootCondition)theEObject;
        T result = caseMatchToolLootCondition(matchToolLootCondition);
        if (result == null) result = caseNamedLootCondition(matchToolLootCondition);
        if (result == null) result = caseLootCondition(matchToolLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.RANDOM_CHANCE_LOOT_CONDITION:
      {
        RandomChanceLootCondition randomChanceLootCondition = (RandomChanceLootCondition)theEObject;
        T result = caseRandomChanceLootCondition(randomChanceLootCondition);
        if (result == null) result = caseNamedLootCondition(randomChanceLootCondition);
        if (result == null) result = caseLootCondition(randomChanceLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.REFERENCE_LOOT_CONDITION:
      {
        ReferenceLootCondition referenceLootCondition = (ReferenceLootCondition)theEObject;
        T result = caseReferenceLootCondition(referenceLootCondition);
        if (result == null) result = caseNamedLootCondition(referenceLootCondition);
        if (result == null) result = caseLootCondition(referenceLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SURVIVES_EXPLOSION_LOOT_CONDITION:
      {
        SurvivesExplosionLootCondition survivesExplosionLootCondition = (SurvivesExplosionLootCondition)theEObject;
        T result = caseSurvivesExplosionLootCondition(survivesExplosionLootCondition);
        if (result == null) result = caseNamedLootCondition(survivesExplosionLootCondition);
        if (result == null) result = caseLootCondition(survivesExplosionLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.TABLE_BONUS_LOOT_CONDITION:
      {
        TableBonusLootCondition tableBonusLootCondition = (TableBonusLootCondition)theEObject;
        T result = caseTableBonusLootCondition(tableBonusLootCondition);
        if (result == null) result = caseNamedLootCondition(tableBonusLootCondition);
        if (result == null) result = caseLootCondition(tableBonusLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.TIME_CHECK_LOOT_CONDITION:
      {
        TimeCheckLootCondition timeCheckLootCondition = (TimeCheckLootCondition)theEObject;
        T result = caseTimeCheckLootCondition(timeCheckLootCondition);
        if (result == null) result = caseNamedLootCondition(timeCheckLootCondition);
        if (result == null) result = caseLootCondition(timeCheckLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.TOOL_ENCHANTMENT_LOOT_CONDITION:
      {
        ToolEnchantmentLootCondition toolEnchantmentLootCondition = (ToolEnchantmentLootCondition)theEObject;
        T result = caseToolEnchantmentLootCondition(toolEnchantmentLootCondition);
        if (result == null) result = caseNamedLootCondition(toolEnchantmentLootCondition);
        if (result == null) result = caseLootCondition(toolEnchantmentLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ENCHANTMENT_LEVEL:
      {
        EnchantmentLevel enchantmentLevel = (EnchantmentLevel)theEObject;
        T result = caseEnchantmentLevel(enchantmentLevel);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.WEATHER_CHECK_LOOT_CONDITION:
      {
        WeatherCheckLootCondition weatherCheckLootCondition = (WeatherCheckLootCondition)theEObject;
        T result = caseWeatherCheckLootCondition(weatherCheckLootCondition);
        if (result == null) result = caseNamedLootCondition(weatherCheckLootCondition);
        if (result == null) result = caseLootCondition(weatherCheckLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ENTITY_PREDICATE:
      {
        EntityPredicate entityPredicate = (EntityPredicate)theEObject;
        T result = caseEntityPredicate(entityPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.FISHING_HOOK_PREDICATE:
      {
        FishingHookPredicate fishingHookPredicate = (FishingHookPredicate)theEObject;
        T result = caseFishingHookPredicate(fishingHookPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.EFFECT_PREDICATE:
      {
        EffectPredicate effectPredicate = (EffectPredicate)theEObject;
        T result = caseEffectPredicate(effectPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.EQUIPMENT_PREDICATE:
      {
        EquipmentPredicate equipmentPredicate = (EquipmentPredicate)theEObject;
        T result = caseEquipmentPredicate(equipmentPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ENTITY_FLAGS:
      {
        EntityFlags entityFlags = (EntityFlags)theEObject;
        T result = caseEntityFlags(entityFlags);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.PLAYER_PREDICATE:
      {
        PlayerPredicate playerPredicate = (PlayerPredicate)theEObject;
        T result = casePlayerPredicate(playerPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ADVANCEMENT_PREDICATE:
      {
        AdvancementPredicate advancementPredicate = (AdvancementPredicate)theEObject;
        T result = caseAdvancementPredicate(advancementPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ADVANCEMENT_CRITERIA:
      {
        AdvancementCriteria advancementCriteria = (AdvancementCriteria)theEObject;
        T result = caseAdvancementCriteria(advancementCriteria);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.RECIPE_PREDICATE:
      {
        RecipePredicate recipePredicate = (RecipePredicate)theEObject;
        T result = caseRecipePredicate(recipePredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.STATISTIC_PREDICATE:
      {
        StatisticPredicate statisticPredicate = (StatisticPredicate)theEObject;
        T result = caseStatisticPredicate(statisticPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.SINGLE_STATISTIC_PREDICATE:
      {
        SingleStatisticPredicate singleStatisticPredicate = (SingleStatisticPredicate)theEObject;
        T result = caseSingleStatisticPredicate(singleStatisticPredicate);
        if (result == null) result = caseStatisticPredicate(singleStatisticPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.NAMESPACED_STATISTIC_PREDICATE:
      {
        NamespacedStatisticPredicate namespacedStatisticPredicate = (NamespacedStatisticPredicate)theEObject;
        T result = caseNamespacedStatisticPredicate(namespacedStatisticPredicate);
        if (result == null) result = caseStatisticPredicate(namespacedStatisticPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.UNNAMESPACED_STATISTIC_PREDICATE:
      {
        UnnamespacedStatisticPredicate unnamespacedStatisticPredicate = (UnnamespacedStatisticPredicate)theEObject;
        T result = caseUnnamespacedStatisticPredicate(unnamespacedStatisticPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LOCATION_PREDICATE:
      {
        LocationPredicate locationPredicate = (LocationPredicate)theEObject;
        T result = caseLocationPredicate(locationPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ITEM_PREDICATE:
      {
        ItemPredicate itemPredicate = (ItemPredicate)theEObject;
        T result = caseItemPredicate(itemPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.BLOCK_PREDICATE:
      {
        BlockPredicate blockPredicate = (BlockPredicate)theEObject;
        T result = caseBlockPredicate(blockPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.BLOCK_STATE_PROPERTY_PREDICATE:
      {
        BlockStatePropertyPredicate blockStatePropertyPredicate = (BlockStatePropertyPredicate)theEObject;
        T result = caseBlockStatePropertyPredicate(blockStatePropertyPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.FLUID_PREDICATE:
      {
        FluidPredicate fluidPredicate = (FluidPredicate)theEObject;
        T result = caseFluidPredicate(fluidPredicate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_VALUE:
      {
        MCJsonValue mcJsonValue = (MCJsonValue)theEObject;
        T result = caseMCJsonValue(mcJsonValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_OBJECT:
      {
        MCJsonObject mcJsonObject = (MCJsonObject)theEObject;
        T result = caseMCJsonObject(mcJsonObject);
        if (result == null) result = caseMCJsonValue(mcJsonObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_ENTRY:
      {
        MCJsonEntry mcJsonEntry = (MCJsonEntry)theEObject;
        T result = caseMCJsonEntry(mcJsonEntry);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_ARRAY:
      {
        MCJsonArray mcJsonArray = (MCJsonArray)theEObject;
        T result = caseMCJsonArray(mcJsonArray);
        if (result == null) result = caseMCJsonValue(mcJsonArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_STRING:
      {
        MCJsonString mcJsonString = (MCJsonString)theEObject;
        T result = caseMCJsonString(mcJsonString);
        if (result == null) result = caseMCJsonValue(mcJsonString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_NUMBER:
      {
        MCJsonNumber mcJsonNumber = (MCJsonNumber)theEObject;
        T result = caseMCJsonNumber(mcJsonNumber);
        if (result == null) result = caseMCJsonValue(mcJsonNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_INTEGRAL:
      {
        MCJsonIntegral mcJsonIntegral = (MCJsonIntegral)theEObject;
        T result = caseMCJsonIntegral(mcJsonIntegral);
        if (result == null) result = caseMCJsonNumber(mcJsonIntegral);
        if (result == null) result = caseMCJsonValue(mcJsonIntegral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_FLOATING_POINT:
      {
        MCJsonFloatingPoint mcJsonFloatingPoint = (MCJsonFloatingPoint)theEObject;
        T result = caseMCJsonFloatingPoint(mcJsonFloatingPoint);
        if (result == null) result = caseMCJsonNumber(mcJsonFloatingPoint);
        if (result == null) result = caseMCJsonValue(mcJsonFloatingPoint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_BOOLEAN:
      {
        MCJsonBoolean mcJsonBoolean = (MCJsonBoolean)theEObject;
        T result = caseMCJsonBoolean(mcJsonBoolean);
        if (result == null) result = caseMCJsonValue(mcJsonBoolean);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.MC_JSON_NULL:
      {
        MCJsonNull mcJsonNull = (MCJsonNull)theEObject;
        T result = caseMCJsonNull(mcJsonNull);
        if (result == null) result = caseMCJsonValue(mcJsonNull);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LONG_RANGE:
      {
        LongRange longRange = (LongRange)theEObject;
        T result = caseLongRange(longRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.EXACT_LONG_RANGE:
      {
        ExactLongRange exactLongRange = (ExactLongRange)theEObject;
        T result = caseExactLongRange(exactLongRange);
        if (result == null) result = caseLongRange(exactLongRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.NORMAL_LONG_RANGE:
      {
        NormalLongRange normalLongRange = (NormalLongRange)theEObject;
        T result = caseNormalLongRange(normalLongRange);
        if (result == null) result = caseLongRange(normalLongRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.DOUBLE_RANGE:
      {
        DoubleRange doubleRange = (DoubleRange)theEObject;
        T result = caseDoubleRange(doubleRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.EXACT_DOUBLE_RANGE:
      {
        ExactDoubleRange exactDoubleRange = (ExactDoubleRange)theEObject;
        T result = caseExactDoubleRange(exactDoubleRange);
        if (result == null) result = caseDoubleRange(exactDoubleRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.NORMAL_DOUBLE_RANGE:
      {
        NormalDoubleRange normalDoubleRange = (NormalDoubleRange)theEObject;
        T result = caseNormalDoubleRange(normalDoubleRange);
        if (result == null) result = caseDoubleRange(normalDoubleRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.LOOT_FUNCTION_WITH_CONDITIONS:
      {
        LootFunctionWithConditions lootFunctionWithConditions = (LootFunctionWithConditions)theEObject;
        T result = caseLootFunctionWithConditions(lootFunctionWithConditions);
        if (result == null) result = caseLootFunction(lootFunctionWithConditions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.ALTERNATIVE_LOOT_CONDITION:
      {
        AlternativeLootCondition alternativeLootCondition = (AlternativeLootCondition)theEObject;
        T result = caseAlternativeLootCondition(alternativeLootCondition);
        if (result == null) result = caseLootCondition(alternativeLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MclootPackage.INVERTED_LOOT_CONDITION:
      {
        InvertedLootCondition invertedLootCondition = (InvertedLootCondition)theEObject;
        T result = caseInvertedLootCondition(invertedLootCondition);
        if (result == null) result = caseLootCondition(invertedLootCondition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loot Table</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loot Table</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLootTable(LootTable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loot Pool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loot Pool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLootPool(LootPool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loot Entry</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loot Entry</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLootEntry(LootEntry object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLootFunction(LootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Apply Bonus Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Apply Bonus Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseApplyBonusLootFunction(ApplyBonusLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Copy Name Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Copy Name Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCopyNameLootFunction(CopyNameLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Copy NBT Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Copy NBT Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCopyNBTLootFunction(CopyNBTLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTOperation(NBTOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Append NBT Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Append NBT Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAppendNBTOperation(AppendNBTOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Replace NBT Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Replace NBT Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReplaceNBTOperation(ReplaceNBTOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Merge NBT Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Merge NBT Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMergeNBTOperation(MergeNBTOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Copy State Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Copy State Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCopyStateLootFunction(CopyStateLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enchant Randomly Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enchant Randomly Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnchantRandomlyLootFunction(EnchantRandomlyLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enchant With Levels Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enchant With Levels Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnchantWithLevelsLootFunction(EnchantWithLevelsLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exploration Map Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exploration Map Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExplorationMapLootFunction(ExplorationMapLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Explosion Decay Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Explosion Decay Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExplosionDecayLootFunction(ExplosionDecayLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Furnace Smelt Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Furnace Smelt Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFurnaceSmeltLootFunction(FurnaceSmeltLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fill Player Head Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fill Player Head Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFillPlayerHeadLootFunction(FillPlayerHeadLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Limit Count Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Limit Count Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLimitCountLootFunction(LimitCountLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Looting Enchant Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Looting Enchant Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLootingEnchantLootFunction(LootingEnchantLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Attributes Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Attributes Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetAttributesLootFunction(SetAttributesLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Modifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Modifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeModifier(AttributeModifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Contents Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Contents Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetContentsLootFunction(SetContentsLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Count Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Count Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetCountLootFunction(SetCountLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Count</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Count</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCount(Count object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exact Count</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exact Count</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExactCount(ExactCount object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Special Count</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Special Count</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecialCount(SpecialCount object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Uniform Count</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Uniform Count</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUniformCount(UniformCount object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binomial Count</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binomial Count</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinomialCount(BinomialCount object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Damage Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Damage Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetDamageLootFunction(SetDamageLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Lore Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Lore Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetLoreLootFunction(SetLoreLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Name Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Name Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetNameLootFunction(SetNameLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set NBT Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set NBT Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetNBTLootFunction(SetNBTLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Stew Effect Loot Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Stew Effect Loot Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetStewEffectLootFunction(SetStewEffectLootFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stew Effect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stew Effect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStewEffect(StewEffect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLootCondition(LootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Named Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Named Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamedLootCondition(NamedLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block State Properties Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block State Properties Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockStatePropertiesLootCondition(BlockStatePropertiesLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block State Property</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block State Property</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockStateProperty(BlockStateProperty object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Damage Source Properties Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Damage Source Properties Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDamageSourcePropertiesLootCondition(DamageSourcePropertiesLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Properties Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Properties Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityPropertiesLootCondition(EntityPropertiesLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Scores Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Scores Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityScoresLootCondition(EntityScoresLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Score</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Score</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityScore(EntityScore object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Killed By Player Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Killed By Player Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKilledByPlayerLootCondition(KilledByPlayerLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Location Check Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Location Check Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocationCheckLootCondition(LocationCheckLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Match Tool Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Match Tool Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMatchToolLootCondition(MatchToolLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Random Chance Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Random Chance Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRandomChanceLootCondition(RandomChanceLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Reference Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Reference Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReferenceLootCondition(ReferenceLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Survives Explosion Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Survives Explosion Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSurvivesExplosionLootCondition(SurvivesExplosionLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Table Bonus Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Table Bonus Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTableBonusLootCondition(TableBonusLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time Check Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time Check Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeCheckLootCondition(TimeCheckLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tool Enchantment Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tool Enchantment Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseToolEnchantmentLootCondition(ToolEnchantmentLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enchantment Level</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enchantment Level</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnchantmentLevel(EnchantmentLevel object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Weather Check Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Weather Check Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWeatherCheckLootCondition(WeatherCheckLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityPredicate(EntityPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fishing Hook Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fishing Hook Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFishingHookPredicate(FishingHookPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Effect Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Effect Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEffectPredicate(EffectPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equipment Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equipment Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquipmentPredicate(EquipmentPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Flags</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Flags</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityFlags(EntityFlags object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Player Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Player Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlayerPredicate(PlayerPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Advancement Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Advancement Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdvancementPredicate(AdvancementPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Advancement Criteria</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Advancement Criteria</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAdvancementCriteria(AdvancementCriteria object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Recipe Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Recipe Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRecipePredicate(RecipePredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statistic Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statistic Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatisticPredicate(StatisticPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Single Statistic Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Single Statistic Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSingleStatisticPredicate(SingleStatisticPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Namespaced Statistic Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Namespaced Statistic Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamespacedStatisticPredicate(NamespacedStatisticPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Unnamespaced Statistic Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Unnamespaced Statistic Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUnnamespacedStatisticPredicate(UnnamespacedStatisticPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Location Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Location Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocationPredicate(LocationPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Item Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Item Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseItemPredicate(ItemPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockPredicate(BlockPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block State Property Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block State Property Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlockStatePropertyPredicate(BlockStatePropertyPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Fluid Predicate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Fluid Predicate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFluidPredicate(FluidPredicate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonValue(MCJsonValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonObject(MCJsonObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Entry</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Entry</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonEntry(MCJsonEntry object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonArray(MCJsonArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonString(MCJsonString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonNumber(MCJsonNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Integral</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Integral</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonIntegral(MCJsonIntegral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Floating Point</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Floating Point</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonFloatingPoint(MCJsonFloatingPoint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Boolean</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Boolean</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonBoolean(MCJsonBoolean object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MC Json Null</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MC Json Null</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMCJsonNull(MCJsonNull object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Long Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Long Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLongRange(LongRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exact Long Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exact Long Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExactLongRange(ExactLongRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Normal Long Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Normal Long Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNormalLongRange(NormalLongRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Double Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Double Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoubleRange(DoubleRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exact Double Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exact Double Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExactDoubleRange(ExactDoubleRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Normal Double Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Normal Double Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNormalDoubleRange(NormalDoubleRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loot Function With Conditions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loot Function With Conditions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLootFunctionWithConditions(LootFunctionWithConditions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Alternative Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Alternative Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlternativeLootCondition(AlternativeLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inverted Loot Condition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inverted Loot Condition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvertedLootCondition(InvertedLootCondition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MclootSwitch
