/*
 * generated by Xtext 2.21.0
 */
package com.raptor.mcblockstate.generator

import com.google.inject.Inject
import com.raptor.mcblockstate.mcblockstate.*
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.conversion.impl.STRINGValueConverter
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.nodemodel.util.NodeModelUtils

import static com.raptor.mcblockstate.mcblockstate.McblockstatePackage.Literals.*
import static extension com.raptor.mcblockstate.utils.McblockstateUtils.*

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class McblockstateGenerator extends AbstractGenerator {
	
	@Inject STRINGValueConverter stringValueConverter
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile(resource.URI.trimFileExtension.appendFileExtension('json').lastSegment, 
			formatBlockstate(resource.allContents.filter(Blockstate).next)
		)
	}
	
	def dispatch formatBlockstate(CustomBlockstate it) {
		formatJson(json)
	}
	
	def dispatch formatBlockstate(VariantsBlockstate it) '''
		{
			"variants": {
				«FOR variant : variants SEPARATOR ','»
					«variant.propertyString.asLiteral»: «formatModelList(variant.models)»
				«ENDFOR»
			}
		}
	'''
	
	def dispatch formatBlockstate(MultipartBlockstate it) '''
		{
			"multipart": [
				«FOR acase : cases SEPARATOR ','»
					«formatCase(acase)»
				«ENDFOR»
			]
		}
	'''
	
	def formatCase(Case it) '''
		{
			«IF condition !== null»
			"when": «formatCondition(condition)»,
			«ENDIF»
			"apply": «formatModelList(models)»
		}
	'''

	def dispatch formatCondition(BaseCaseCondition it) '''
		{
			«FOR property : properties SEPARATOR ','»
			«property.name.asLiteral»: «IF property instanceof NormalBlockstatePropertyPredicate»«property.values.join('|').asLiteral»«ELSEIF property instanceof BooleanBlockstatePropertyPredicate»«IF property.isInverted»false«ELSE»true«ENDIF»«ENDIF»
			«ENDFOR»
		}
	'''

	def dispatch formatCondition(OrCaseCondition it) '''
		{
			"OR": [
				«FOR option : options SEPARATOR ','»
					«formatCondition(option)»
				«ENDFOR»
			]
		}
	'''
	
	def formatModelList(ModelList it) {
		if (models.size == 1) {
			formatModel(models.get(0))
		} else if (models.isEmpty) {
			'''[]'''
		} else {
			'''
			[
				«FOR model : models SEPARATOR ','»
				«formatModel(model)»
				«ENDFOR»
			]
			'''
		}
	}
	
	def formatModel(Model it) '''{ "model": «location.asLiteral»«IF isWeightDefined», "weight": «weight»«ENDIF»«IF isXDefined», "x": «x»«ENDIF»«IF isYDefined», "y": «y»«ENDIF»«IF isUvlockDefined», "uvlock": «uvlock»«ENDIF» }'''
	
	def dispatch formatJson(MCJsonString it) '''«value.asLiteral»'''
	
	def dispatch formatJson(MCJsonBoolean it) '''«value»'''
	
	def dispatch formatJson(MCJsonIntegral it) '''«value»'''
	
	def dispatch formatJson(MCJsonFloatingPoint it) '''«value»'''
	
	def dispatch formatJson(MCJsonNull it) '''null'''
	
	def dispatch formatJson(MCJsonArray it) {
		if (elements.isEmpty) {
			'''[]'''
		} else if (elements.stream.anyMatch[isComplicated]) {
			'''
			[
				«FOR element : elements SEPARATOR ','»
				«formatJson(element)»
				«ENDFOR»
			]
			'''
		} else {
			'''[«FOR element : elements SEPARATOR ', '»«formatJson(element)»«ENDFOR»]'''
		}
	} 
	
	def dispatch formatJson(MCJsonObject it) {
		if (entries.isEmpty) {
			'''{}'''
		} else {
			'''
			{
				«FOR entry : entries SEPARATOR ','»
				«entry.name.asLiteral»: «formatJson(entry.value)»
				«ENDFOR»
			}
			'''
		}
	}
	
	def dispatch boolean isComplicated(MCJsonObject it) { entries.size > 0 }
	
	def dispatch boolean isComplicated(MCJsonArray it) { elements.size > 0 }
	
	def dispatch boolean isComplicated(MCJsonValue it) { false }
	
	def static getPropertyString(Variant it) {
		properties.map['''«name»=«value»'''].sort().join(',')
	}
	
	def asLiteral(String str) { stringValueConverter.toString(str) }
	
}
