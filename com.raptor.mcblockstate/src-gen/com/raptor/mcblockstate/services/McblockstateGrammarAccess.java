/*
 * generated by Xtext 2.21.0
 */
package com.raptor.mcblockstate.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class McblockstateGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BlockstateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.Blockstate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final RuleCall cVariantsBlockstateParserRuleCall_0_0_0 = (RuleCall)cAlternatives_0_0.eContents().get(0);
		private final RuleCall cMultipartBlockstateParserRuleCall_0_0_1 = (RuleCall)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cCustomBlockstateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Blockstate:
		//	-> (VariantsBlockstate | MultipartBlockstate) | CustomBlockstate;
		@Override public ParserRule getRule() { return rule; }
		
		//-> (VariantsBlockstate | MultipartBlockstate) | CustomBlockstate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//-> (VariantsBlockstate | MultipartBlockstate)
		public Group getGroup_0() { return cGroup_0; }
		
		//(VariantsBlockstate | MultipartBlockstate)
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//VariantsBlockstate
		public RuleCall getVariantsBlockstateParserRuleCall_0_0_0() { return cVariantsBlockstateParserRuleCall_0_0_0; }
		
		//MultipartBlockstate
		public RuleCall getMultipartBlockstateParserRuleCall_0_0_1() { return cMultipartBlockstateParserRuleCall_0_0_1; }
		
		//CustomBlockstate
		public RuleCall getCustomBlockstateParserRuleCall_1() { return cCustomBlockstateParserRuleCall_1; }
	}
	public class VariantsBlockstateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.VariantsBlockstate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariantsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cVariantsBlockstateAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVariantsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVariantsVariantParserRuleCall_3_0 = (RuleCall)cVariantsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariantsBlockstate:
		//	"variants" {VariantsBlockstate} '{'
		//	//(variants+=Variant (->(',' variants+=Variant =>(',' variants+=Variant)* ','?) | variants+=Variant*))?
		//	variants+=Variant*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//"variants" {VariantsBlockstate} '{' //(variants+=Variant (->(',' variants+=Variant =>(',' variants+=Variant)* ','?) | variants+=Variant*))?
		//variants+=Variant* '}'
		public Group getGroup() { return cGroup; }
		
		//"variants"
		public Keyword getVariantsKeyword_0() { return cVariantsKeyword_0; }
		
		//{VariantsBlockstate}
		public Action getVariantsBlockstateAction_1() { return cVariantsBlockstateAction_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		////(variants+=Variant (->(',' variants+=Variant =>(',' variants+=Variant)* ','?) | variants+=Variant*))?
		//variants+=Variant*
		public Assignment getVariantsAssignment_3() { return cVariantsAssignment_3; }
		
		//Variant
		public RuleCall getVariantsVariantParserRuleCall_3_0() { return cVariantsVariantParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class VariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.Variant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPropertiesBlockstatePropertyParserRuleCall_1_0_0 = (RuleCall)cPropertiesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cPropertiesBlockstatePropertyParserRuleCall_1_1_0_1_0 = (RuleCall)cPropertiesAssignment_1_1_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cModelsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cModelsModelListParserRuleCall_4_0 = (RuleCall)cModelsAssignment_4.eContents().get(0);
		
		//Variant:
		//	'[' (properties+=BlockstateProperty => (',' properties+=BlockstateProperty)* ','?)?
		//	']'
		//	'='
		//	models=ModelList;
		@Override public ParserRule getRule() { return rule; }
		
		//'[' (properties+=BlockstateProperty => (',' properties+=BlockstateProperty)* ','?)? ']' '=' models=ModelList
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//(properties+=BlockstateProperty => (',' properties+=BlockstateProperty)* ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//properties+=BlockstateProperty
		public Assignment getPropertiesAssignment_1_0() { return cPropertiesAssignment_1_0; }
		
		//BlockstateProperty
		public RuleCall getPropertiesBlockstatePropertyParserRuleCall_1_0_0() { return cPropertiesBlockstatePropertyParserRuleCall_1_0_0; }
		
		//=> (',' properties+=BlockstateProperty)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//(',' properties+=BlockstateProperty)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_0_0() { return cCommaKeyword_1_1_0_0; }
		
		//properties+=BlockstateProperty
		public Assignment getPropertiesAssignment_1_1_0_1() { return cPropertiesAssignment_1_1_0_1; }
		
		//BlockstateProperty
		public RuleCall getPropertiesBlockstatePropertyParserRuleCall_1_1_0_1_0() { return cPropertiesBlockstatePropertyParserRuleCall_1_1_0_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//models=ModelList
		public Assignment getModelsAssignment_4() { return cModelsAssignment_4; }
		
		//ModelList
		public RuleCall getModelsModelListParserRuleCall_4_0() { return cModelsModelListParserRuleCall_4_0; }
	}
	public class BlockstatePropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.BlockstateProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameBlockstatePropertyValueParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBlockstatePropertyValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//BlockstateProperty:
		//	name=BlockstatePropertyValue '=' value=BlockstatePropertyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=BlockstatePropertyValue '=' value=BlockstatePropertyValue
		public Group getGroup() { return cGroup; }
		
		//name=BlockstatePropertyValue
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//BlockstatePropertyValue
		public RuleCall getNameBlockstatePropertyValueParserRuleCall_0_0() { return cNameBlockstatePropertyValueParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=BlockstatePropertyValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//BlockstatePropertyValue
		public RuleCall getValueBlockstatePropertyValueParserRuleCall_2_0() { return cValueBlockstatePropertyValueParserRuleCall_2_0; }
	}
	public class MultipartBlockstateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MultipartBlockstate");
		private final Assignment cCasesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCasesCaseParserRuleCall_0 = (RuleCall)cCasesAssignment.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//MultipartBlockstate:
		//	cases+=Case+;
		@Override public ParserRule getRule() { return rule; }
		
		//cases+=Case+
		public Assignment getCasesAssignment() { return cCasesAssignment; }
		
		//Case
		public RuleCall getCasesCaseParserRuleCall_0() { return cCasesCaseParserRuleCall_0; }
	}
	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cWhenKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConditionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConditionCaseConditionParserRuleCall_0_2_0 = (RuleCall)cConditionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cApplyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cModelsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModelsModelListParserRuleCall_2_0 = (RuleCall)cModelsAssignment_2.eContents().get(0);
		
		//Case:
		//	("when" '(' condition=CaseCondition ')')? "apply" models=ModelList;
		@Override public ParserRule getRule() { return rule; }
		
		//("when" '(' condition=CaseCondition ')')? "apply" models=ModelList
		public Group getGroup() { return cGroup; }
		
		//("when" '(' condition=CaseCondition ')')?
		public Group getGroup_0() { return cGroup_0; }
		
		//"when"
		public Keyword getWhenKeyword_0_0() { return cWhenKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//condition=CaseCondition
		public Assignment getConditionAssignment_0_2() { return cConditionAssignment_0_2; }
		
		//CaseCondition
		public RuleCall getConditionCaseConditionParserRuleCall_0_2_0() { return cConditionCaseConditionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//"apply"
		public Keyword getApplyKeyword_1() { return cApplyKeyword_1; }
		
		//models=ModelList
		public Assignment getModelsAssignment_2() { return cModelsAssignment_2; }
		
		//ModelList
		public RuleCall getModelsModelListParserRuleCall_2_0() { return cModelsModelListParserRuleCall_2_0; }
	}
	public class CaseConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.CaseCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseCaseConditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cOrCaseConditionOptionsAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Assignment cOptionsAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cOptionsBaseCaseConditionParserRuleCall_1_0_2_0 = (RuleCall)cOptionsAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_3 = (Group)cGroup_1_0.eContents().get(3);
		private final Keyword cVerticalLineKeyword_1_0_3_0 = (Keyword)cGroup_1_0_3.eContents().get(0);
		private final Assignment cOptionsAssignment_1_0_3_1 = (Assignment)cGroup_1_0_3.eContents().get(1);
		private final RuleCall cOptionsBaseCaseConditionParserRuleCall_1_0_3_1_0 = (RuleCall)cOptionsAssignment_1_0_3_1.eContents().get(0);
		
		//CaseCondition:
		//	BaseCaseCondition -> ('|' {OrCaseCondition.options+=current} options+=BaseCaseCondition ('|'
		//	options+=BaseCaseCondition)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//BaseCaseCondition -> ('|' {OrCaseCondition.options+=current} options+=BaseCaseCondition ('|'
		//options+=BaseCaseCondition)*)?
		public Group getGroup() { return cGroup; }
		
		//BaseCaseCondition
		public RuleCall getBaseCaseConditionParserRuleCall_0() { return cBaseCaseConditionParserRuleCall_0; }
		
		//-> ('|' {OrCaseCondition.options+=current} options+=BaseCaseCondition ('|' options+=BaseCaseCondition)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//('|' {OrCaseCondition.options+=current} options+=BaseCaseCondition ('|' options+=BaseCaseCondition)*)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0_0() { return cVerticalLineKeyword_1_0_0; }
		
		//{OrCaseCondition.options+=current}
		public Action getOrCaseConditionOptionsAction_1_0_1() { return cOrCaseConditionOptionsAction_1_0_1; }
		
		//options+=BaseCaseCondition
		public Assignment getOptionsAssignment_1_0_2() { return cOptionsAssignment_1_0_2; }
		
		//BaseCaseCondition
		public RuleCall getOptionsBaseCaseConditionParserRuleCall_1_0_2_0() { return cOptionsBaseCaseConditionParserRuleCall_1_0_2_0; }
		
		//('|' options+=BaseCaseCondition)*
		public Group getGroup_1_0_3() { return cGroup_1_0_3; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_0_3_0() { return cVerticalLineKeyword_1_0_3_0; }
		
		//options+=BaseCaseCondition
		public Assignment getOptionsAssignment_1_0_3_1() { return cOptionsAssignment_1_0_3_1; }
		
		//BaseCaseCondition
		public RuleCall getOptionsBaseCaseConditionParserRuleCall_1_0_3_1_0() { return cOptionsBaseCaseConditionParserRuleCall_1_0_3_1_0; }
	}
	public class BaseCaseConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.BaseCaseCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cCaseConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBaseCaseConditionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertiesBlockstatePropertyPredicateParserRuleCall_1_1_0 = (RuleCall)cPropertiesAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cAmpersandKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cPropertiesBlockstatePropertyPredicateParserRuleCall_1_2_1_0 = (RuleCall)cPropertiesAssignment_1_2_1.eContents().get(0);
		
		//BaseCaseCondition CaseCondition:
		//	'(' CaseCondition ')'
		//	| {BaseCaseCondition} properties+=BlockstatePropertyPredicate ('&' properties+=BlockstatePropertyPredicate)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' CaseCondition ')' | {BaseCaseCondition} properties+=BlockstatePropertyPredicate ('&'
		//properties+=BlockstatePropertyPredicate)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' CaseCondition ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//CaseCondition
		public RuleCall getCaseConditionParserRuleCall_0_1() { return cCaseConditionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//{BaseCaseCondition} properties+=BlockstatePropertyPredicate ('&' properties+=BlockstatePropertyPredicate)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BaseCaseCondition}
		public Action getBaseCaseConditionAction_1_0() { return cBaseCaseConditionAction_1_0; }
		
		//properties+=BlockstatePropertyPredicate
		public Assignment getPropertiesAssignment_1_1() { return cPropertiesAssignment_1_1; }
		
		//BlockstatePropertyPredicate
		public RuleCall getPropertiesBlockstatePropertyPredicateParserRuleCall_1_1_0() { return cPropertiesBlockstatePropertyPredicateParserRuleCall_1_1_0; }
		
		//('&' properties+=BlockstatePropertyPredicate)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_2_0() { return cAmpersandKeyword_1_2_0; }
		
		//properties+=BlockstatePropertyPredicate
		public Assignment getPropertiesAssignment_1_2_1() { return cPropertiesAssignment_1_2_1; }
		
		//BlockstatePropertyPredicate
		public RuleCall getPropertiesBlockstatePropertyPredicateParserRuleCall_1_2_1_0() { return cPropertiesBlockstatePropertyPredicateParserRuleCall_1_2_1_0; }
	}
	public class BlockstatePropertyPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.BlockstatePropertyPredicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cNormalBlockstatePropertyPredicateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameBlockstatePropertyValueParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_2_0 = (Alternatives)cGroup_0_2.eContents().get(0);
		private final Group cGroup_0_2_0_0 = (Group)cAlternatives_0_2_0.eContents().get(0);
		private final Alternatives cAlternatives_0_2_0_0_0 = (Alternatives)cGroup_0_2_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2_0_0_0_0 = (Keyword)cAlternatives_0_2_0_0_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_0_2_0_0_0_1 = (Keyword)cAlternatives_0_2_0_0_0.eContents().get(1);
		private final Assignment cValuesAssignment_0_2_0_0_1 = (Assignment)cGroup_0_2_0_0.eContents().get(1);
		private final RuleCall cValuesBlockstatePropertyValueParserRuleCall_0_2_0_0_1_0 = (RuleCall)cValuesAssignment_0_2_0_0_1.eContents().get(0);
		private final Group cGroup_0_2_0_1 = (Group)cAlternatives_0_2_0.eContents().get(1);
		private final Keyword cInKeyword_0_2_0_1_0 = (Keyword)cGroup_0_2_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_2_0_1_1 = (Keyword)cGroup_0_2_0_1.eContents().get(1);
		private final Group cGroup_0_2_0_1_2 = (Group)cGroup_0_2_0_1.eContents().get(2);
		private final Assignment cValuesAssignment_0_2_0_1_2_0 = (Assignment)cGroup_0_2_0_1_2.eContents().get(0);
		private final RuleCall cValuesBlockstatePropertyValueParserRuleCall_0_2_0_1_2_0_0 = (RuleCall)cValuesAssignment_0_2_0_1_2_0.eContents().get(0);
		private final Group cGroup_0_2_0_1_2_1 = (Group)cGroup_0_2_0_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_0_1_2_1_0 = (Keyword)cGroup_0_2_0_1_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_0_2_0_1_2_1_1 = (Assignment)cGroup_0_2_0_1_2_1.eContents().get(1);
		private final RuleCall cValuesBlockstatePropertyValueParserRuleCall_0_2_0_1_2_1_1_0 = (RuleCall)cValuesAssignment_0_2_0_1_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2_0_1_2_2 = (Keyword)cGroup_0_2_0_1_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_0_2_0_1_3 = (Keyword)cGroup_0_2_0_1.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBooleanBlockstatePropertyPredicateAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cInvertedAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cInvertedExclamationMarkKeyword_1_1_0 = (Keyword)cInvertedAssignment_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameBlockstatePropertyValueParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//BlockstatePropertyPredicate:
		//	{NormalBlockstatePropertyPredicate} name=BlockstatePropertyValue -> (('=' | '==') values+=BlockstatePropertyValue |
		//	"in" '(' (values+=BlockstatePropertyValue (',' values+=BlockstatePropertyValue)* ','?)? ')') |
		//	{BooleanBlockstatePropertyPredicate} inverted?='!'? name=BlockstatePropertyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{NormalBlockstatePropertyPredicate} name=BlockstatePropertyValue -> (('=' | '==') values+=BlockstatePropertyValue | "in"
		//'(' (values+=BlockstatePropertyValue (',' values+=BlockstatePropertyValue)* ','?)? ')') |
		//{BooleanBlockstatePropertyPredicate} inverted?='!'? name=BlockstatePropertyValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{NormalBlockstatePropertyPredicate} name=BlockstatePropertyValue -> (('=' | '==') values+=BlockstatePropertyValue | "in"
		//'(' (values+=BlockstatePropertyValue (',' values+=BlockstatePropertyValue)* ','?)? ')')
		public Group getGroup_0() { return cGroup_0; }
		
		//{NormalBlockstatePropertyPredicate}
		public Action getNormalBlockstatePropertyPredicateAction_0_0() { return cNormalBlockstatePropertyPredicateAction_0_0; }
		
		//name=BlockstatePropertyValue
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//BlockstatePropertyValue
		public RuleCall getNameBlockstatePropertyValueParserRuleCall_0_1_0() { return cNameBlockstatePropertyValueParserRuleCall_0_1_0; }
		
		//-> (('=' | '==') values+=BlockstatePropertyValue | "in" '(' (values+=BlockstatePropertyValue (','
		//values+=BlockstatePropertyValue)* ','?)? ')')
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//(('=' | '==') values+=BlockstatePropertyValue | "in" '(' (values+=BlockstatePropertyValue (','
		//values+=BlockstatePropertyValue)* ','?)? ')')
		public Alternatives getAlternatives_0_2_0() { return cAlternatives_0_2_0; }
		
		//('=' | '==') values+=BlockstatePropertyValue
		public Group getGroup_0_2_0_0() { return cGroup_0_2_0_0; }
		
		//('=' | '==')
		public Alternatives getAlternatives_0_2_0_0_0() { return cAlternatives_0_2_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_2_0_0_0_0() { return cEqualsSignKeyword_0_2_0_0_0_0; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0_2_0_0_0_1() { return cEqualsSignEqualsSignKeyword_0_2_0_0_0_1; }
		
		//values+=BlockstatePropertyValue
		public Assignment getValuesAssignment_0_2_0_0_1() { return cValuesAssignment_0_2_0_0_1; }
		
		//BlockstatePropertyValue
		public RuleCall getValuesBlockstatePropertyValueParserRuleCall_0_2_0_0_1_0() { return cValuesBlockstatePropertyValueParserRuleCall_0_2_0_0_1_0; }
		
		//"in" '(' (values+=BlockstatePropertyValue (',' values+=BlockstatePropertyValue)* ','?)? ')'
		public Group getGroup_0_2_0_1() { return cGroup_0_2_0_1; }
		
		//"in"
		public Keyword getInKeyword_0_2_0_1_0() { return cInKeyword_0_2_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2_0_1_1() { return cLeftParenthesisKeyword_0_2_0_1_1; }
		
		//(values+=BlockstatePropertyValue (',' values+=BlockstatePropertyValue)* ','?)?
		public Group getGroup_0_2_0_1_2() { return cGroup_0_2_0_1_2; }
		
		//values+=BlockstatePropertyValue
		public Assignment getValuesAssignment_0_2_0_1_2_0() { return cValuesAssignment_0_2_0_1_2_0; }
		
		//BlockstatePropertyValue
		public RuleCall getValuesBlockstatePropertyValueParserRuleCall_0_2_0_1_2_0_0() { return cValuesBlockstatePropertyValueParserRuleCall_0_2_0_1_2_0_0; }
		
		//(',' values+=BlockstatePropertyValue)*
		public Group getGroup_0_2_0_1_2_1() { return cGroup_0_2_0_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_0_2_0_1_2_1_0() { return cCommaKeyword_0_2_0_1_2_1_0; }
		
		//values+=BlockstatePropertyValue
		public Assignment getValuesAssignment_0_2_0_1_2_1_1() { return cValuesAssignment_0_2_0_1_2_1_1; }
		
		//BlockstatePropertyValue
		public RuleCall getValuesBlockstatePropertyValueParserRuleCall_0_2_0_1_2_1_1_0() { return cValuesBlockstatePropertyValueParserRuleCall_0_2_0_1_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_0_2_0_1_2_2() { return cCommaKeyword_0_2_0_1_2_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2_0_1_3() { return cRightParenthesisKeyword_0_2_0_1_3; }
		
		//{BooleanBlockstatePropertyPredicate} inverted?='!'? name=BlockstatePropertyValue
		public Group getGroup_1() { return cGroup_1; }
		
		//{BooleanBlockstatePropertyPredicate}
		public Action getBooleanBlockstatePropertyPredicateAction_1_0() { return cBooleanBlockstatePropertyPredicateAction_1_0; }
		
		//inverted?='!'?
		public Assignment getInvertedAssignment_1_1() { return cInvertedAssignment_1_1; }
		
		//'!'
		public Keyword getInvertedExclamationMarkKeyword_1_1_0() { return cInvertedExclamationMarkKeyword_1_1_0; }
		
		//name=BlockstatePropertyValue
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//BlockstatePropertyValue
		public RuleCall getNameBlockstatePropertyValueParserRuleCall_1_2_0() { return cNameBlockstatePropertyValueParserRuleCall_1_2_0; }
	}
	public class CustomBlockstateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.CustomBlockstate");
		private final Assignment cJsonAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJsonMCJsonObjectParserRuleCall_0 = (RuleCall)cJsonAssignment.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//CustomBlockstate:
		//	json=MCJsonObject;
		@Override public ParserRule getRule() { return rule; }
		
		//json=MCJsonObject
		public Assignment getJsonAssignment() { return cJsonAssignment; }
		
		//MCJsonObject
		public RuleCall getJsonMCJsonObjectParserRuleCall_0() { return cJsonMCJsonObjectParserRuleCall_0; }
	}
	public class BlockstatePropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.BlockstatePropertyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cNullKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cVariantsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cMultipartKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cInKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cWhenKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cApplyKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cXKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cYKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cUvlockKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final RuleCall cIDTerminalRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cSTRINGTerminalRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cDOUBLETerminalRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cLONGParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		////BlockstatePropertyName: Identifier | STRING;
		//BlockstatePropertyValue:
		//	"true" | "false" | "null" | "variants" | "multipart" | "in" | "when" | "apply" | "x" | "y" | "uvlock" | ID | STRING |
		//	DOUBLE | LONG;
		@Override public ParserRule getRule() { return rule; }
		
		//"true" | "false" | "null" | "variants" | "multipart" | "in" | "when" | "apply" | "x" | "y" | "uvlock" | ID | STRING |
		//DOUBLE | LONG
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
		
		//"null"
		public Keyword getNullKeyword_2() { return cNullKeyword_2; }
		
		//"variants"
		public Keyword getVariantsKeyword_3() { return cVariantsKeyword_3; }
		
		//"multipart"
		public Keyword getMultipartKeyword_4() { return cMultipartKeyword_4; }
		
		//"in"
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//"when"
		public Keyword getWhenKeyword_6() { return cWhenKeyword_6; }
		
		//"apply"
		public Keyword getApplyKeyword_7() { return cApplyKeyword_7; }
		
		//"x"
		public Keyword getXKeyword_8() { return cXKeyword_8; }
		
		//"y"
		public Keyword getYKeyword_9() { return cYKeyword_9; }
		
		//"uvlock"
		public Keyword getUvlockKeyword_10() { return cUvlockKeyword_10; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_11() { return cIDTerminalRuleCall_11; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_12() { return cSTRINGTerminalRuleCall_12; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_13() { return cDOUBLETerminalRuleCall_13; }
		
		//LONG
		public RuleCall getLONGParserRuleCall_14() { return cLONGParserRuleCall_14; }
	}
	public class ModelListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.ModelList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Action cModelListAction_0_1 = (Action)cGroup_0.eContents().get(1);
		private final Assignment cModelsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cModelsModelParserRuleCall_0_2_0 = (RuleCall)cModelsAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cModelsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cModelsModelParserRuleCall_1_0 = (RuleCall)cModelsAssignment_1.eContents().get(0);
		
		//ModelList:
		//	'{' {ModelList} models+=Model*
		//	-> '}' | models+=Model;
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {ModelList} models+=Model* -> '}' | models+=Model
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'{' {ModelList} models+=Model* -> '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_0() { return cLeftCurlyBracketKeyword_0_0; }
		
		//{ModelList}
		public Action getModelListAction_0_1() { return cModelListAction_0_1; }
		
		////(models+=Model =>(',' models+=Model)* ','?)?
		//models+=Model*
		public Assignment getModelsAssignment_0_2() { return cModelsAssignment_0_2; }
		
		//Model
		public RuleCall getModelsModelParserRuleCall_0_2_0() { return cModelsModelParserRuleCall_0_2_0; }
		
		//-> '}'
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }
		
		//models+=Model
		public Assignment getModelsAssignment_1() { return cModelsAssignment_1; }
		
		//Model
		public RuleCall getModelsModelParserRuleCall_1_0() { return cModelsModelParserRuleCall_1_0; }
	}
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationNamespacedLocationParserRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cWeightDefinedAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cWeightDefinedAsteriskKeyword_1_0_0_0 = (Keyword)cWeightDefinedAssignment_1_0_0.eContents().get(0);
		private final Assignment cWeightAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cWeightULONGTerminalRuleCall_1_0_1_0 = (RuleCall)cWeightAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_2_0_1 = (UnorderedGroup)cGroup_2_0.eContents().get(1);
		private final Group cGroup_2_0_1_0 = (Group)cUnorderedGroup_2_0_1.eContents().get(0);
		private final Assignment cXDefinedAssignment_2_0_1_0_0 = (Assignment)cGroup_2_0_1_0.eContents().get(0);
		private final Keyword cXDefinedXKeyword_2_0_1_0_0_0 = (Keyword)cXDefinedAssignment_2_0_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1_0_1 = (Keyword)cGroup_2_0_1_0.eContents().get(1);
		private final Assignment cXAssignment_2_0_1_0_2 = (Assignment)cGroup_2_0_1_0.eContents().get(2);
		private final RuleCall cXLONGParserRuleCall_2_0_1_0_2_0 = (RuleCall)cXAssignment_2_0_1_0_2.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cUnorderedGroup_2_0_1.eContents().get(1);
		private final Assignment cYDefinedAssignment_2_0_1_1_0 = (Assignment)cGroup_2_0_1_1.eContents().get(0);
		private final Keyword cYDefinedYKeyword_2_0_1_1_0_0 = (Keyword)cYDefinedAssignment_2_0_1_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1_1_1 = (Keyword)cGroup_2_0_1_1.eContents().get(1);
		private final Assignment cYAssignment_2_0_1_1_2 = (Assignment)cGroup_2_0_1_1.eContents().get(2);
		private final RuleCall cYLONGParserRuleCall_2_0_1_1_2_0 = (RuleCall)cYAssignment_2_0_1_1_2.eContents().get(0);
		private final Group cGroup_2_0_1_2 = (Group)cUnorderedGroup_2_0_1.eContents().get(2);
		private final Assignment cUvlockDefinedAssignment_2_0_1_2_0 = (Assignment)cGroup_2_0_1_2.eContents().get(0);
		private final Keyword cUvlockDefinedUvlockKeyword_2_0_1_2_0_0 = (Keyword)cUvlockDefinedAssignment_2_0_1_2_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_0_1_2_1 = (Keyword)cGroup_2_0_1_2.eContents().get(1);
		private final Alternatives cAlternatives_2_0_1_2_2 = (Alternatives)cGroup_2_0_1_2.eContents().get(2);
		private final Assignment cUvlockAssignment_2_0_1_2_2_0 = (Assignment)cAlternatives_2_0_1_2_2.eContents().get(0);
		private final Keyword cUvlockTrueKeyword_2_0_1_2_2_0_0 = (Keyword)cUvlockAssignment_2_0_1_2_2_0.eContents().get(0);
		private final Keyword cFalseKeyword_2_0_1_2_2_1 = (Keyword)cAlternatives_2_0_1_2_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		
		//Model:
		//	location=NamespacedLocation -> (weightDefined?='*' weight=ULONG)? -> ('(' ((xDefined?="x" '=' x=LONG)?
		//	& (yDefined?="y" '=' y=LONG)?
		//	& (uvlockDefined?="uvlock" '=' (uvlock?="true" | "false"))?) ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//location=NamespacedLocation -> (weightDefined?='*' weight=ULONG)? -> ('(' ((xDefined?="x" '=' x=LONG)? & (yDefined?="y"
		//'=' y=LONG)? & (uvlockDefined?="uvlock" '=' (uvlock?="true" | "false"))?) ')')?
		public Group getGroup() { return cGroup; }
		
		//location=NamespacedLocation
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }
		
		//NamespacedLocation
		public RuleCall getLocationNamespacedLocationParserRuleCall_0_0() { return cLocationNamespacedLocationParserRuleCall_0_0; }
		
		//-> (weightDefined?='*' weight=ULONG)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(weightDefined?='*' weight=ULONG)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//weightDefined?='*'
		public Assignment getWeightDefinedAssignment_1_0_0() { return cWeightDefinedAssignment_1_0_0; }
		
		//'*'
		public Keyword getWeightDefinedAsteriskKeyword_1_0_0_0() { return cWeightDefinedAsteriskKeyword_1_0_0_0; }
		
		//weight=ULONG
		public Assignment getWeightAssignment_1_0_1() { return cWeightAssignment_1_0_1; }
		
		//ULONG
		public RuleCall getWeightULONGTerminalRuleCall_1_0_1_0() { return cWeightULONGTerminalRuleCall_1_0_1_0; }
		
		//-> ('(' ((xDefined?="x" '=' x=LONG)? & (yDefined?="y" '=' y=LONG)? & (uvlockDefined?="uvlock" '=' (uvlock?="true" |
		//"false"))?) ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//('(' ((xDefined?="x" '=' x=LONG)? & (yDefined?="y" '=' y=LONG)? & (uvlockDefined?="uvlock" '=' (uvlock?="true" |
		//"false"))?) ')')
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0_0() { return cLeftParenthesisKeyword_2_0_0; }
		
		//((xDefined?="x" '=' x=LONG)? & (yDefined?="y" '=' y=LONG)? & (uvlockDefined?="uvlock" '=' (uvlock?="true" | "false"))?)
		public UnorderedGroup getUnorderedGroup_2_0_1() { return cUnorderedGroup_2_0_1; }
		
		//(xDefined?="x" '=' x=LONG)?
		public Group getGroup_2_0_1_0() { return cGroup_2_0_1_0; }
		
		//xDefined?="x"
		public Assignment getXDefinedAssignment_2_0_1_0_0() { return cXDefinedAssignment_2_0_1_0_0; }
		
		//"x"
		public Keyword getXDefinedXKeyword_2_0_1_0_0_0() { return cXDefinedXKeyword_2_0_1_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0_1_0_1() { return cEqualsSignKeyword_2_0_1_0_1; }
		
		//x=LONG
		public Assignment getXAssignment_2_0_1_0_2() { return cXAssignment_2_0_1_0_2; }
		
		//LONG
		public RuleCall getXLONGParserRuleCall_2_0_1_0_2_0() { return cXLONGParserRuleCall_2_0_1_0_2_0; }
		
		//(yDefined?="y" '=' y=LONG)?
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//yDefined?="y"
		public Assignment getYDefinedAssignment_2_0_1_1_0() { return cYDefinedAssignment_2_0_1_1_0; }
		
		//"y"
		public Keyword getYDefinedYKeyword_2_0_1_1_0_0() { return cYDefinedYKeyword_2_0_1_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0_1_1_1() { return cEqualsSignKeyword_2_0_1_1_1; }
		
		//y=LONG
		public Assignment getYAssignment_2_0_1_1_2() { return cYAssignment_2_0_1_1_2; }
		
		//LONG
		public RuleCall getYLONGParserRuleCall_2_0_1_1_2_0() { return cYLONGParserRuleCall_2_0_1_1_2_0; }
		
		//(uvlockDefined?="uvlock" '=' (uvlock?="true" | "false"))?
		public Group getGroup_2_0_1_2() { return cGroup_2_0_1_2; }
		
		//uvlockDefined?="uvlock"
		public Assignment getUvlockDefinedAssignment_2_0_1_2_0() { return cUvlockDefinedAssignment_2_0_1_2_0; }
		
		//"uvlock"
		public Keyword getUvlockDefinedUvlockKeyword_2_0_1_2_0_0() { return cUvlockDefinedUvlockKeyword_2_0_1_2_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_0_1_2_1() { return cEqualsSignKeyword_2_0_1_2_1; }
		
		//(uvlock?="true" | "false")
		public Alternatives getAlternatives_2_0_1_2_2() { return cAlternatives_2_0_1_2_2; }
		
		//uvlock?="true"
		public Assignment getUvlockAssignment_2_0_1_2_2_0() { return cUvlockAssignment_2_0_1_2_2_0; }
		
		//"true"
		public Keyword getUvlockTrueKeyword_2_0_1_2_2_0_0() { return cUvlockTrueKeyword_2_0_1_2_2_0_0; }
		
		//"false"
		public Keyword getFalseKeyword_2_0_1_2_2_1() { return cFalseKeyword_2_0_1_2_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_0_2() { return cRightParenthesisKeyword_2_0_2; }
	}
	public class MCJsonValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMCJsonObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMCJsonArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMCJsonStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMCJsonNumberParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMCJsonBooleanParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMCJsonNullParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//MCJsonValue:
		//	MCJsonObject
		//	| MCJsonArray
		//	| MCJsonString
		//	| MCJsonNumber
		//	| MCJsonBoolean
		//	| MCJsonNull;
		@Override public ParserRule getRule() { return rule; }
		
		//MCJsonObject | MCJsonArray | MCJsonString | MCJsonNumber | MCJsonBoolean | MCJsonNull
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MCJsonObject
		public RuleCall getMCJsonObjectParserRuleCall_0() { return cMCJsonObjectParserRuleCall_0; }
		
		//MCJsonArray
		public RuleCall getMCJsonArrayParserRuleCall_1() { return cMCJsonArrayParserRuleCall_1; }
		
		//MCJsonString
		public RuleCall getMCJsonStringParserRuleCall_2() { return cMCJsonStringParserRuleCall_2; }
		
		//MCJsonNumber
		public RuleCall getMCJsonNumberParserRuleCall_3() { return cMCJsonNumberParserRuleCall_3; }
		
		//MCJsonBoolean
		public RuleCall getMCJsonBooleanParserRuleCall_4() { return cMCJsonBooleanParserRuleCall_4; }
		
		//MCJsonNull
		public RuleCall getMCJsonNullParserRuleCall_5() { return cMCJsonNullParserRuleCall_5; }
	}
	public class MCJsonObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMCJsonObjectAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesMCJsonEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesMCJsonEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MCJsonObject:
		//	'{' {MCJsonObject} (entries+=MCJsonEntry (',' entries+=MCJsonEntry)* ','?)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {MCJsonObject} (entries+=MCJsonEntry (',' entries+=MCJsonEntry)* ','?)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{MCJsonObject}
		public Action getMCJsonObjectAction_1() { return cMCJsonObjectAction_1; }
		
		//(entries+=MCJsonEntry (',' entries+=MCJsonEntry)* ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=MCJsonEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//MCJsonEntry
		public RuleCall getEntriesMCJsonEntryParserRuleCall_2_0_0() { return cEntriesMCJsonEntryParserRuleCall_2_0_0; }
		
		//(',' entries+=MCJsonEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entries+=MCJsonEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//MCJsonEntry
		public RuleCall getEntriesMCJsonEntryParserRuleCall_2_1_1_0() { return cEntriesMCJsonEntryParserRuleCall_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class MCJsonEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueMCJsonValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MCJsonEntry:
		//	name=STRING ':' value=MCJsonValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=STRING ':' value=MCJsonValue
		public Group getGroup() { return cGroup; }
		
		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=MCJsonValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//MCJsonValue
		public RuleCall getValueMCJsonValueParserRuleCall_2_0() { return cValueMCJsonValueParserRuleCall_2_0; }
	}
	public class MCJsonArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMCJsonArrayAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsMCJsonValueParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsMCJsonValueParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MCJsonArray:
		//	'[' {MCJsonArray} (elements+=MCJsonValue (',' elements+=MCJsonValue)* ','?)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' {MCJsonArray} (elements+=MCJsonValue (',' elements+=MCJsonValue)* ','?)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{MCJsonArray}
		public Action getMCJsonArrayAction_1() { return cMCJsonArrayAction_1; }
		
		//(elements+=MCJsonValue (',' elements+=MCJsonValue)* ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=MCJsonValue
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//MCJsonValue
		public RuleCall getElementsMCJsonValueParserRuleCall_2_0_0() { return cElementsMCJsonValueParserRuleCall_2_0_0; }
		
		//(',' elements+=MCJsonValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=MCJsonValue
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//MCJsonValue
		public RuleCall getElementsMCJsonValueParserRuleCall_2_1_1_0() { return cElementsMCJsonValueParserRuleCall_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class MCJsonStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//MCJsonString:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class MCJsonNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMCJsonIntegralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMCJsonFloatingPointParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MCJsonNumber:
		//	MCJsonIntegral
		//	| MCJsonFloatingPoint;
		@Override public ParserRule getRule() { return rule; }
		
		//MCJsonIntegral | MCJsonFloatingPoint
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MCJsonIntegral
		public RuleCall getMCJsonIntegralParserRuleCall_0() { return cMCJsonIntegralParserRuleCall_0; }
		
		//MCJsonFloatingPoint
		public RuleCall getMCJsonFloatingPointParserRuleCall_1() { return cMCJsonFloatingPointParserRuleCall_1; }
	}
	public class MCJsonIntegralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonIntegral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLONGParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//MCJsonIntegral:
		//	value=LONG;
		@Override public ParserRule getRule() { return rule; }
		
		//value=LONG
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//LONG
		public RuleCall getValueLONGParserRuleCall_0() { return cValueLONGParserRuleCall_0; }
	}
	public class MCJsonFloatingPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonFloatingPoint");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//MCJsonFloatingPoint:
		//	value=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	public class MCJsonBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cMCJsonBooleanAction_1_1 = (Action)cGroup_1.eContents().get(1);
		
		//MCJsonBoolean:
		//	value?="true" | "false" {MCJsonBoolean};
		@Override public ParserRule getRule() { return rule; }
		
		//value?="true" | "false" {MCJsonBoolean}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value?="true"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//"false" {MCJsonBoolean}
		public Group getGroup_1() { return cGroup_1; }
		
		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//{MCJsonBoolean}
		public Action getMCJsonBooleanAction_1_1() { return cMCJsonBooleanAction_1_1; }
	}
	public class MCJsonNullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.MCJsonNull");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNullKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMCJsonNullAction_1 = (Action)cGroup.eContents().get(1);
		
		//MCJsonNull:
		//	"null" {MCJsonNull};
		@Override public ParserRule getRule() { return rule; }
		
		//"null" {MCJsonNull}
		public Group getGroup() { return cGroup; }
		
		//"null"
		public Keyword getNullKeyword_0() { return cNullKeyword_0; }
		
		//{MCJsonNull}
		public Action getMCJsonNullAction_1() { return cMCJsonNullAction_1; }
	}
	public class NamespacedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.NamespacedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//NamespacedID hidden():
		//	Key -> (':' Key)?;
		@Override public ParserRule getRule() { return rule; }
		
		//Key -> (':' Key)?
		public Group getGroup() { return cGroup; }
		
		//Key
		public RuleCall getKeyParserRuleCall_0() { return cKeyParserRuleCall_0; }
		
		//-> (':' Key)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(':' Key)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }
		
		//Key
		public RuleCall getKeyParserRuleCall_1_0_1() { return cKeyParserRuleCall_1_0_1; }
	}
	public class NamespacedLocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.NamespacedLocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cKeyParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cSolidusKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cKeyParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		
		//NamespacedLocation hidden():
		//	Key -> (':' Key)? -> ('/' Key)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Key -> (':' Key)? -> ('/' Key)*
		public Group getGroup() { return cGroup; }
		
		//Key
		public RuleCall getKeyParserRuleCall_0() { return cKeyParserRuleCall_0; }
		
		//-> (':' Key)?
		public Group getGroup_1() { return cGroup_1; }
		
		//(':' Key)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_0() { return cColonKeyword_1_0_0; }
		
		//Key
		public RuleCall getKeyParserRuleCall_1_0_1() { return cKeyParserRuleCall_1_0_1; }
		
		//-> ('/' Key)*
		public Group getGroup_2() { return cGroup_2; }
		
		//('/' Key)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'/'
		public Keyword getSolidusKeyword_2_0_0() { return cSolidusKeyword_2_0_0; }
		
		//Key
		public RuleCall getKeyParserRuleCall_2_0_1() { return cKeyParserRuleCall_2_0_1; }
	}
	public class KeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.Key");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Key hidden():
		//	Identifier ('.' Identifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier ('.' Identifier)*
		public Group getGroup() { return cGroup; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//('.' Identifier)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_1_1() { return cIdentifierParserRuleCall_1_1; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cKeywordParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Identifier hidden():
		//	ID | Keyword;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | Keyword
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//Keyword
		public RuleCall getKeywordParserRuleCall_1() { return cKeywordParserRuleCall_1; }
	}
	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.Keyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cApplyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cMultipartKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cNullKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cTrueKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cUvlockKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cVariantsKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cWhenKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//Keyword:
		//	"apply" | "false" | "multipart" | "null" | "true" | "uvlock" | "variants" | "when";
		@Override public ParserRule getRule() { return rule; }
		
		//"apply" | "false" | "multipart" | "null" | "true" | "uvlock" | "variants" | "when"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"apply"
		public Keyword getApplyKeyword_0() { return cApplyKeyword_0; }
		
		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
		
		//"multipart"
		public Keyword getMultipartKeyword_2() { return cMultipartKeyword_2; }
		
		//"null"
		public Keyword getNullKeyword_3() { return cNullKeyword_3; }
		
		//"true"
		public Keyword getTrueKeyword_4() { return cTrueKeyword_4; }
		
		//"uvlock"
		public Keyword getUvlockKeyword_5() { return cUvlockKeyword_5; }
		
		//"variants"
		public Keyword getVariantsKeyword_6() { return cVariantsKeyword_6; }
		
		//"when"
		public Keyword getWhenKeyword_7() { return cWhenKeyword_7; }
	}
	public class LONGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.LONG");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cULONGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSLONGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LONG ecore::ELong:
		//	ULONG | SLONG;
		@Override public ParserRule getRule() { return rule; }
		
		//ULONG | SLONG
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ULONG
		public RuleCall getULONGTerminalRuleCall_0() { return cULONGTerminalRuleCall_0; }
		
		//SLONG
		public RuleCall getSLONGTerminalRuleCall_1() { return cSLONGTerminalRuleCall_1; }
	}
	
	
	private final BlockstateElements pBlockstate;
	private final VariantsBlockstateElements pVariantsBlockstate;
	private final VariantElements pVariant;
	private final BlockstatePropertyElements pBlockstateProperty;
	private final MultipartBlockstateElements pMultipartBlockstate;
	private final CaseElements pCase;
	private final CaseConditionElements pCaseCondition;
	private final BaseCaseConditionElements pBaseCaseCondition;
	private final BlockstatePropertyPredicateElements pBlockstatePropertyPredicate;
	private final CustomBlockstateElements pCustomBlockstate;
	private final BlockstatePropertyValueElements pBlockstatePropertyValue;
	private final ModelListElements pModelList;
	private final ModelElements pModel;
	private final MCJsonValueElements pMCJsonValue;
	private final MCJsonObjectElements pMCJsonObject;
	private final MCJsonEntryElements pMCJsonEntry;
	private final MCJsonArrayElements pMCJsonArray;
	private final MCJsonStringElements pMCJsonString;
	private final MCJsonNumberElements pMCJsonNumber;
	private final MCJsonIntegralElements pMCJsonIntegral;
	private final MCJsonFloatingPointElements pMCJsonFloatingPoint;
	private final MCJsonBooleanElements pMCJsonBoolean;
	private final MCJsonNullElements pMCJsonNull;
	private final NamespacedIDElements pNamespacedID;
	private final NamespacedLocationElements pNamespacedLocation;
	private final KeyElements pKey;
	private final IdentifierElements pIdentifier;
	private final KeywordElements pKeyword;
	private final LONGElements pLONG;
	private final TerminalRule tSIGN;
	private final TerminalRule tDIGITS;
	private final TerminalRule tEXPONENT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tULONG;
	private final TerminalRule tSLONG;
	private final TerminalRule tSTRING;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public McblockstateGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pBlockstate = new BlockstateElements();
		this.pVariantsBlockstate = new VariantsBlockstateElements();
		this.pVariant = new VariantElements();
		this.pBlockstateProperty = new BlockstatePropertyElements();
		this.pMultipartBlockstate = new MultipartBlockstateElements();
		this.pCase = new CaseElements();
		this.pCaseCondition = new CaseConditionElements();
		this.pBaseCaseCondition = new BaseCaseConditionElements();
		this.pBlockstatePropertyPredicate = new BlockstatePropertyPredicateElements();
		this.pCustomBlockstate = new CustomBlockstateElements();
		this.pBlockstatePropertyValue = new BlockstatePropertyValueElements();
		this.pModelList = new ModelListElements();
		this.pModel = new ModelElements();
		this.pMCJsonValue = new MCJsonValueElements();
		this.pMCJsonObject = new MCJsonObjectElements();
		this.pMCJsonEntry = new MCJsonEntryElements();
		this.pMCJsonArray = new MCJsonArrayElements();
		this.pMCJsonString = new MCJsonStringElements();
		this.pMCJsonNumber = new MCJsonNumberElements();
		this.pMCJsonIntegral = new MCJsonIntegralElements();
		this.pMCJsonFloatingPoint = new MCJsonFloatingPointElements();
		this.pMCJsonBoolean = new MCJsonBooleanElements();
		this.pMCJsonNull = new MCJsonNullElements();
		this.pNamespacedID = new NamespacedIDElements();
		this.pNamespacedLocation = new NamespacedLocationElements();
		this.pKey = new KeyElements();
		this.pIdentifier = new IdentifierElements();
		this.pKeyword = new KeywordElements();
		this.pLONG = new LONGElements();
		this.tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.SIGN");
		this.tDIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.DIGITS");
		this.tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.EXPONENT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.DOUBLE");
		this.tULONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.ULONG");
		this.tSLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.SLONG");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.STRING");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcblockstate.Mcblockstate.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.raptor.mcblockstate.Mcblockstate".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Blockstate:
	//	-> (VariantsBlockstate | MultipartBlockstate) | CustomBlockstate;
	public BlockstateElements getBlockstateAccess() {
		return pBlockstate;
	}
	
	public ParserRule getBlockstateRule() {
		return getBlockstateAccess().getRule();
	}
	
	//VariantsBlockstate:
	//	"variants" {VariantsBlockstate} '{'
	//	//(variants+=Variant (->(',' variants+=Variant =>(',' variants+=Variant)* ','?) | variants+=Variant*))?
	//	variants+=Variant*
	//	'}';
	public VariantsBlockstateElements getVariantsBlockstateAccess() {
		return pVariantsBlockstate;
	}
	
	public ParserRule getVariantsBlockstateRule() {
		return getVariantsBlockstateAccess().getRule();
	}
	
	//Variant:
	//	'[' (properties+=BlockstateProperty => (',' properties+=BlockstateProperty)* ','?)?
	//	']'
	//	'='
	//	models=ModelList;
	public VariantElements getVariantAccess() {
		return pVariant;
	}
	
	public ParserRule getVariantRule() {
		return getVariantAccess().getRule();
	}
	
	//BlockstateProperty:
	//	name=BlockstatePropertyValue '=' value=BlockstatePropertyValue;
	public BlockstatePropertyElements getBlockstatePropertyAccess() {
		return pBlockstateProperty;
	}
	
	public ParserRule getBlockstatePropertyRule() {
		return getBlockstatePropertyAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//MultipartBlockstate:
	//	cases+=Case+;
	public MultipartBlockstateElements getMultipartBlockstateAccess() {
		return pMultipartBlockstate;
	}
	
	public ParserRule getMultipartBlockstateRule() {
		return getMultipartBlockstateAccess().getRule();
	}
	
	//Case:
	//	("when" '(' condition=CaseCondition ')')? "apply" models=ModelList;
	public CaseElements getCaseAccess() {
		return pCase;
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}
	
	//CaseCondition:
	//	BaseCaseCondition -> ('|' {OrCaseCondition.options+=current} options+=BaseCaseCondition ('|'
	//	options+=BaseCaseCondition)*)?;
	public CaseConditionElements getCaseConditionAccess() {
		return pCaseCondition;
	}
	
	public ParserRule getCaseConditionRule() {
		return getCaseConditionAccess().getRule();
	}
	
	//BaseCaseCondition CaseCondition:
	//	'(' CaseCondition ')'
	//	| {BaseCaseCondition} properties+=BlockstatePropertyPredicate ('&' properties+=BlockstatePropertyPredicate)*;
	public BaseCaseConditionElements getBaseCaseConditionAccess() {
		return pBaseCaseCondition;
	}
	
	public ParserRule getBaseCaseConditionRule() {
		return getBaseCaseConditionAccess().getRule();
	}
	
	//BlockstatePropertyPredicate:
	//	{NormalBlockstatePropertyPredicate} name=BlockstatePropertyValue -> (('=' | '==') values+=BlockstatePropertyValue |
	//	"in" '(' (values+=BlockstatePropertyValue (',' values+=BlockstatePropertyValue)* ','?)? ')') |
	//	{BooleanBlockstatePropertyPredicate} inverted?='!'? name=BlockstatePropertyValue;
	public BlockstatePropertyPredicateElements getBlockstatePropertyPredicateAccess() {
		return pBlockstatePropertyPredicate;
	}
	
	public ParserRule getBlockstatePropertyPredicateRule() {
		return getBlockstatePropertyPredicateAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//CustomBlockstate:
	//	json=MCJsonObject;
	public CustomBlockstateElements getCustomBlockstateAccess() {
		return pCustomBlockstate;
	}
	
	public ParserRule getCustomBlockstateRule() {
		return getCustomBlockstateAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	////BlockstatePropertyName: Identifier | STRING;
	//BlockstatePropertyValue:
	//	"true" | "false" | "null" | "variants" | "multipart" | "in" | "when" | "apply" | "x" | "y" | "uvlock" | ID | STRING |
	//	DOUBLE | LONG;
	public BlockstatePropertyValueElements getBlockstatePropertyValueAccess() {
		return pBlockstatePropertyValue;
	}
	
	public ParserRule getBlockstatePropertyValueRule() {
		return getBlockstatePropertyValueAccess().getRule();
	}
	
	//ModelList:
	//	'{' {ModelList} models+=Model*
	//	-> '}' | models+=Model;
	public ModelListElements getModelListAccess() {
		return pModelList;
	}
	
	public ParserRule getModelListRule() {
		return getModelListAccess().getRule();
	}
	
	//Model:
	//	location=NamespacedLocation -> (weightDefined?='*' weight=ULONG)? -> ('(' ((xDefined?="x" '=' x=LONG)?
	//	& (yDefined?="y" '=' y=LONG)?
	//	& (uvlockDefined?="uvlock" '=' (uvlock?="true" | "false"))?) ')')?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//MCJsonValue:
	//	MCJsonObject
	//	| MCJsonArray
	//	| MCJsonString
	//	| MCJsonNumber
	//	| MCJsonBoolean
	//	| MCJsonNull;
	public MCJsonValueElements getMCJsonValueAccess() {
		return pMCJsonValue;
	}
	
	public ParserRule getMCJsonValueRule() {
		return getMCJsonValueAccess().getRule();
	}
	
	//MCJsonObject:
	//	'{' {MCJsonObject} (entries+=MCJsonEntry (',' entries+=MCJsonEntry)* ','?)?
	//	'}';
	public MCJsonObjectElements getMCJsonObjectAccess() {
		return pMCJsonObject;
	}
	
	public ParserRule getMCJsonObjectRule() {
		return getMCJsonObjectAccess().getRule();
	}
	
	//MCJsonEntry:
	//	name=STRING ':' value=MCJsonValue;
	public MCJsonEntryElements getMCJsonEntryAccess() {
		return pMCJsonEntry;
	}
	
	public ParserRule getMCJsonEntryRule() {
		return getMCJsonEntryAccess().getRule();
	}
	
	//MCJsonArray:
	//	'[' {MCJsonArray} (elements+=MCJsonValue (',' elements+=MCJsonValue)* ','?)?
	//	']';
	public MCJsonArrayElements getMCJsonArrayAccess() {
		return pMCJsonArray;
	}
	
	public ParserRule getMCJsonArrayRule() {
		return getMCJsonArrayAccess().getRule();
	}
	
	//MCJsonString:
	//	value=STRING;
	public MCJsonStringElements getMCJsonStringAccess() {
		return pMCJsonString;
	}
	
	public ParserRule getMCJsonStringRule() {
		return getMCJsonStringAccess().getRule();
	}
	
	//MCJsonNumber:
	//	MCJsonIntegral
	//	| MCJsonFloatingPoint;
	public MCJsonNumberElements getMCJsonNumberAccess() {
		return pMCJsonNumber;
	}
	
	public ParserRule getMCJsonNumberRule() {
		return getMCJsonNumberAccess().getRule();
	}
	
	//MCJsonIntegral:
	//	value=LONG;
	public MCJsonIntegralElements getMCJsonIntegralAccess() {
		return pMCJsonIntegral;
	}
	
	public ParserRule getMCJsonIntegralRule() {
		return getMCJsonIntegralAccess().getRule();
	}
	
	//MCJsonFloatingPoint:
	//	value=DOUBLE;
	public MCJsonFloatingPointElements getMCJsonFloatingPointAccess() {
		return pMCJsonFloatingPoint;
	}
	
	public ParserRule getMCJsonFloatingPointRule() {
		return getMCJsonFloatingPointAccess().getRule();
	}
	
	//MCJsonBoolean:
	//	value?="true" | "false" {MCJsonBoolean};
	public MCJsonBooleanElements getMCJsonBooleanAccess() {
		return pMCJsonBoolean;
	}
	
	public ParserRule getMCJsonBooleanRule() {
		return getMCJsonBooleanAccess().getRule();
	}
	
	//MCJsonNull:
	//	"null" {MCJsonNull};
	public MCJsonNullElements getMCJsonNullAccess() {
		return pMCJsonNull;
	}
	
	public ParserRule getMCJsonNullRule() {
		return getMCJsonNullAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//NamespacedID hidden():
	//	Key -> (':' Key)?;
	public NamespacedIDElements getNamespacedIDAccess() {
		return pNamespacedID;
	}
	
	public ParserRule getNamespacedIDRule() {
		return getNamespacedIDAccess().getRule();
	}
	
	//NamespacedLocation hidden():
	//	Key -> (':' Key)? -> ('/' Key)*;
	public NamespacedLocationElements getNamespacedLocationAccess() {
		return pNamespacedLocation;
	}
	
	public ParserRule getNamespacedLocationRule() {
		return getNamespacedLocationAccess().getRule();
	}
	
	//Key hidden():
	//	Identifier ('.' Identifier)*;
	public KeyElements getKeyAccess() {
		return pKey;
	}
	
	public ParserRule getKeyRule() {
		return getKeyAccess().getRule();
	}
	
	//Identifier hidden():
	//	ID | Keyword;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//Keyword:
	//	"apply" | "false" | "multipart" | "null" | "true" | "uvlock" | "variants" | "when";
	public KeywordElements getKeywordAccess() {
		return pKeyword;
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}
	
	//LONG ecore::ELong:
	//	ULONG | SLONG;
	public LONGElements getLONGAccess() {
		return pLONG;
	}
	
	public ParserRule getLONGRule() {
		return getLONGAccess().getRule();
	}
	
	//terminal fragment SIGN:
	//	'+' | '-';
	public TerminalRule getSIGNRule() {
		return tSIGN;
	}
	
	//terminal fragment DIGITS:
	//	'0'..'9'+;
	public TerminalRule getDIGITSRule() {
		return tDIGITS;
	}
	
	//terminal fragment EXPONENT:
	//	('e' | 'E') SIGN? DIGITS;
	public TerminalRule getEXPONENTRule() {
		return tEXPONENT;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	SIGN? ('.' DIGITS EXPONENT? | DIGITS ('.' DIGITS EXPONENT? | EXPONENT));
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal ULONG returns ecore::ELong:
	//	DIGITS;
	public TerminalRule getULONGRule() {
		return tULONG;
	}
	
	//terminal SLONG returns ecore::ELong:
	//	SIGN DIGITS;
	public TerminalRule getSLONGRule() {
		return tSLONG;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'
	//	| "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
