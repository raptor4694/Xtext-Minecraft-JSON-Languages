/*
 * generated by Xtext 2.21.0
 */
package com.raptor.mcblockstate.serializer;

import com.google.inject.Inject;
import com.raptor.mcblockstate.services.McblockstateGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class McblockstateSyntacticSequencer extends AbstractSyntacticSequencer {

	protected McblockstateGrammarAccess grammarAccess;
	protected AbstractElementAlias match_BaseCaseCondition_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_BaseCaseCondition_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_BlockstatePropertyPredicate_CommaKeyword_0_2_0_1_2_2_q;
	protected AbstractElementAlias match_BlockstatePropertyPredicate_EqualsSignEqualsSignKeyword_0_2_0_0_0_1_or_EqualsSignKeyword_0_2_0_0_0_0;
	protected AbstractElementAlias match_MCJsonArray_CommaKeyword_2_2_q;
	protected AbstractElementAlias match_MCJsonObject_CommaKeyword_2_2_q;
	protected AbstractElementAlias match_Model___LeftParenthesisKeyword_2_0_0_RightParenthesisKeyword_2_0_2__q;
	protected AbstractElementAlias match_Variant_CommaKeyword_1_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (McblockstateGrammarAccess) access;
		match_BaseCaseCondition_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getBaseCaseConditionAccess().getLeftParenthesisKeyword_0_0());
		match_BaseCaseCondition_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getBaseCaseConditionAccess().getLeftParenthesisKeyword_0_0());
		match_BlockstatePropertyPredicate_CommaKeyword_0_2_0_1_2_2_q = new TokenAlias(false, true, grammarAccess.getBlockstatePropertyPredicateAccess().getCommaKeyword_0_2_0_1_2_2());
		match_BlockstatePropertyPredicate_EqualsSignEqualsSignKeyword_0_2_0_0_0_1_or_EqualsSignKeyword_0_2_0_0_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBlockstatePropertyPredicateAccess().getEqualsSignEqualsSignKeyword_0_2_0_0_0_1()), new TokenAlias(false, false, grammarAccess.getBlockstatePropertyPredicateAccess().getEqualsSignKeyword_0_2_0_0_0_0()));
		match_MCJsonArray_CommaKeyword_2_2_q = new TokenAlias(false, true, grammarAccess.getMCJsonArrayAccess().getCommaKeyword_2_2());
		match_MCJsonObject_CommaKeyword_2_2_q = new TokenAlias(false, true, grammarAccess.getMCJsonObjectAccess().getCommaKeyword_2_2());
		match_Model___LeftParenthesisKeyword_2_0_0_RightParenthesisKeyword_2_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getModelAccess().getLeftParenthesisKeyword_2_0_0()), new TokenAlias(false, false, grammarAccess.getModelAccess().getRightParenthesisKeyword_2_0_2()));
		match_Variant_CommaKeyword_1_2_q = new TokenAlias(false, true, grammarAccess.getVariantAccess().getCommaKeyword_1_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_BaseCaseCondition_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_BaseCaseCondition_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BaseCaseCondition_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_BaseCaseCondition_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BlockstatePropertyPredicate_CommaKeyword_0_2_0_1_2_2_q.equals(syntax))
				emit_BlockstatePropertyPredicate_CommaKeyword_0_2_0_1_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BlockstatePropertyPredicate_EqualsSignEqualsSignKeyword_0_2_0_0_0_1_or_EqualsSignKeyword_0_2_0_0_0_0.equals(syntax))
				emit_BlockstatePropertyPredicate_EqualsSignEqualsSignKeyword_0_2_0_0_0_1_or_EqualsSignKeyword_0_2_0_0_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MCJsonArray_CommaKeyword_2_2_q.equals(syntax))
				emit_MCJsonArray_CommaKeyword_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MCJsonObject_CommaKeyword_2_2_q.equals(syntax))
				emit_MCJsonObject_CommaKeyword_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Model___LeftParenthesisKeyword_2_0_0_RightParenthesisKeyword_2_0_2__q.equals(syntax))
				emit_Model___LeftParenthesisKeyword_2_0_0_RightParenthesisKeyword_2_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Variant_CommaKeyword_1_2_q.equals(syntax))
				emit_Variant_CommaKeyword_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) properties+=BlockstatePropertyPredicate
	 *     (rule start) (ambiguity) {OrCaseCondition.options+=}
	 */
	protected void emit_BaseCaseCondition_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {OrCaseCondition.options+=}
	 */
	protected void emit_BaseCaseCondition_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     values+=BlockstatePropertyValue (ambiguity) ')' (rule end)
	 */
	protected void emit_BlockstatePropertyPredicate_CommaKeyword_0_2_0_1_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | '=='
	 *
	 * This ambiguous syntax occurs at:
	 *     name=BlockstatePropertyValue (ambiguity) values+=BlockstatePropertyValue
	 */
	protected void emit_BlockstatePropertyPredicate_EqualsSignEqualsSignKeyword_0_2_0_0_0_1_or_EqualsSignKeyword_0_2_0_0_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     elements+=MCJsonValue (ambiguity) ']' (rule end)
	 */
	protected void emit_MCJsonArray_CommaKeyword_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     entries+=MCJsonEntry (ambiguity) '}' (rule end)
	 */
	protected void emit_MCJsonObject_CommaKeyword_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     location=NamespacedLocation (ambiguity) (rule end)
	 *     weight=ULONG (ambiguity) (rule end)
	 */
	protected void emit_Model___LeftParenthesisKeyword_2_0_0_RightParenthesisKeyword_2_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     properties+=BlockstateProperty (ambiguity) ']' '=' models=ModelList
	 */
	protected void emit_Variant_CommaKeyword_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
