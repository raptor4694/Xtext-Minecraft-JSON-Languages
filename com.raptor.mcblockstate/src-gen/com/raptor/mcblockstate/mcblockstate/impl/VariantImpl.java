/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcblockstate.mcblockstate.impl;

import com.raptor.mcblockstate.mcblockstate.BlockstateProperty;
import com.raptor.mcblockstate.mcblockstate.McblockstatePackage;
import com.raptor.mcblockstate.mcblockstate.ModelList;
import com.raptor.mcblockstate.mcblockstate.Variant;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Variant</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcblockstate.mcblockstate.impl.VariantImpl#getProperties <em>Properties</em>}</li>
 *   <li>{@link com.raptor.mcblockstate.mcblockstate.impl.VariantImpl#getModels <em>Models</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VariantImpl extends MinimalEObjectImpl.Container implements Variant
{
  /**
   * The cached value of the '{@link #getProperties() <em>Properties</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProperties()
   * @generated
   * @ordered
   */
  protected EList<BlockstateProperty> properties;

  /**
   * The cached value of the '{@link #getModels() <em>Models</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getModels()
   * @generated
   * @ordered
   */
  protected ModelList models;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariantImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return McblockstatePackage.Literals.VARIANT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<BlockstateProperty> getProperties()
  {
    if (properties == null)
    {
      properties = new EObjectContainmentEList<BlockstateProperty>(BlockstateProperty.class, this, McblockstatePackage.VARIANT__PROPERTIES);
    }
    return properties;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelList getModels()
  {
    return models;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetModels(ModelList newModels, NotificationChain msgs)
  {
    ModelList oldModels = models;
    models = newModels;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McblockstatePackage.VARIANT__MODELS, oldModels, newModels);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setModels(ModelList newModels)
  {
    if (newModels != models)
    {
      NotificationChain msgs = null;
      if (models != null)
        msgs = ((InternalEObject)models).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McblockstatePackage.VARIANT__MODELS, null, msgs);
      if (newModels != null)
        msgs = ((InternalEObject)newModels).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McblockstatePackage.VARIANT__MODELS, null, msgs);
      msgs = basicSetModels(newModels, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McblockstatePackage.VARIANT__MODELS, newModels, newModels));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case McblockstatePackage.VARIANT__PROPERTIES:
        return ((InternalEList<?>)getProperties()).basicRemove(otherEnd, msgs);
      case McblockstatePackage.VARIANT__MODELS:
        return basicSetModels(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case McblockstatePackage.VARIANT__PROPERTIES:
        return getProperties();
      case McblockstatePackage.VARIANT__MODELS:
        return getModels();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case McblockstatePackage.VARIANT__PROPERTIES:
        getProperties().clear();
        getProperties().addAll((Collection<? extends BlockstateProperty>)newValue);
        return;
      case McblockstatePackage.VARIANT__MODELS:
        setModels((ModelList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case McblockstatePackage.VARIANT__PROPERTIES:
        getProperties().clear();
        return;
      case McblockstatePackage.VARIANT__MODELS:
        setModels((ModelList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case McblockstatePackage.VARIANT__PROPERTIES:
        return properties != null && !properties.isEmpty();
      case McblockstatePackage.VARIANT__MODELS:
        return models != null;
    }
    return super.eIsSet(featureID);
  }

} //VariantImpl
