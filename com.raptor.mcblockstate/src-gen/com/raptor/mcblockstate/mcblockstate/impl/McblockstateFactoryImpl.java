/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcblockstate.mcblockstate.impl;

import com.raptor.mcblockstate.mcblockstate.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class McblockstateFactoryImpl extends EFactoryImpl implements McblockstateFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static McblockstateFactory init()
  {
    try
    {
      McblockstateFactory theMcblockstateFactory = (McblockstateFactory)EPackage.Registry.INSTANCE.getEFactory(McblockstatePackage.eNS_URI);
      if (theMcblockstateFactory != null)
      {
        return theMcblockstateFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new McblockstateFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public McblockstateFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case McblockstatePackage.BLOCKSTATE: return createBlockstate();
      case McblockstatePackage.VARIANTS_BLOCKSTATE: return createVariantsBlockstate();
      case McblockstatePackage.VARIANT: return createVariant();
      case McblockstatePackage.BLOCKSTATE_PROPERTY: return createBlockstateProperty();
      case McblockstatePackage.MULTIPART_BLOCKSTATE: return createMultipartBlockstate();
      case McblockstatePackage.CASE: return createCase();
      case McblockstatePackage.CASE_CONDITION: return createCaseCondition();
      case McblockstatePackage.BLOCKSTATE_PROPERTY_PREDICATE: return createBlockstatePropertyPredicate();
      case McblockstatePackage.CUSTOM_BLOCKSTATE: return createCustomBlockstate();
      case McblockstatePackage.MODEL_LIST: return createModelList();
      case McblockstatePackage.MODEL: return createModel();
      case McblockstatePackage.MC_JSON_VALUE: return createMCJsonValue();
      case McblockstatePackage.MC_JSON_OBJECT: return createMCJsonObject();
      case McblockstatePackage.MC_JSON_ENTRY: return createMCJsonEntry();
      case McblockstatePackage.MC_JSON_ARRAY: return createMCJsonArray();
      case McblockstatePackage.MC_JSON_STRING: return createMCJsonString();
      case McblockstatePackage.MC_JSON_NUMBER: return createMCJsonNumber();
      case McblockstatePackage.MC_JSON_INTEGRAL: return createMCJsonIntegral();
      case McblockstatePackage.MC_JSON_FLOATING_POINT: return createMCJsonFloatingPoint();
      case McblockstatePackage.MC_JSON_BOOLEAN: return createMCJsonBoolean();
      case McblockstatePackage.MC_JSON_NULL: return createMCJsonNull();
      case McblockstatePackage.OR_CASE_CONDITION: return createOrCaseCondition();
      case McblockstatePackage.BASE_CASE_CONDITION: return createBaseCaseCondition();
      case McblockstatePackage.NORMAL_BLOCKSTATE_PROPERTY_PREDICATE: return createNormalBlockstatePropertyPredicate();
      case McblockstatePackage.BOOLEAN_BLOCKSTATE_PROPERTY_PREDICATE: return createBooleanBlockstatePropertyPredicate();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Blockstate createBlockstate()
  {
    BlockstateImpl blockstate = new BlockstateImpl();
    return blockstate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariantsBlockstate createVariantsBlockstate()
  {
    VariantsBlockstateImpl variantsBlockstate = new VariantsBlockstateImpl();
    return variantsBlockstate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variant createVariant()
  {
    VariantImpl variant = new VariantImpl();
    return variant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockstateProperty createBlockstateProperty()
  {
    BlockstatePropertyImpl blockstateProperty = new BlockstatePropertyImpl();
    return blockstateProperty;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MultipartBlockstate createMultipartBlockstate()
  {
    MultipartBlockstateImpl multipartBlockstate = new MultipartBlockstateImpl();
    return multipartBlockstate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Case createCase()
  {
    CaseImpl case_ = new CaseImpl();
    return case_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CaseCondition createCaseCondition()
  {
    CaseConditionImpl caseCondition = new CaseConditionImpl();
    return caseCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockstatePropertyPredicate createBlockstatePropertyPredicate()
  {
    BlockstatePropertyPredicateImpl blockstatePropertyPredicate = new BlockstatePropertyPredicateImpl();
    return blockstatePropertyPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CustomBlockstate createCustomBlockstate()
  {
    CustomBlockstateImpl customBlockstate = new CustomBlockstateImpl();
    return customBlockstate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModelList createModelList()
  {
    ModelListImpl modelList = new ModelListImpl();
    return modelList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonValue createMCJsonValue()
  {
    MCJsonValueImpl mcJsonValue = new MCJsonValueImpl();
    return mcJsonValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonObject createMCJsonObject()
  {
    MCJsonObjectImpl mcJsonObject = new MCJsonObjectImpl();
    return mcJsonObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonEntry createMCJsonEntry()
  {
    MCJsonEntryImpl mcJsonEntry = new MCJsonEntryImpl();
    return mcJsonEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonArray createMCJsonArray()
  {
    MCJsonArrayImpl mcJsonArray = new MCJsonArrayImpl();
    return mcJsonArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonString createMCJsonString()
  {
    MCJsonStringImpl mcJsonString = new MCJsonStringImpl();
    return mcJsonString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonNumber createMCJsonNumber()
  {
    MCJsonNumberImpl mcJsonNumber = new MCJsonNumberImpl();
    return mcJsonNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonIntegral createMCJsonIntegral()
  {
    MCJsonIntegralImpl mcJsonIntegral = new MCJsonIntegralImpl();
    return mcJsonIntegral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonFloatingPoint createMCJsonFloatingPoint()
  {
    MCJsonFloatingPointImpl mcJsonFloatingPoint = new MCJsonFloatingPointImpl();
    return mcJsonFloatingPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonBoolean createMCJsonBoolean()
  {
    MCJsonBooleanImpl mcJsonBoolean = new MCJsonBooleanImpl();
    return mcJsonBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonNull createMCJsonNull()
  {
    MCJsonNullImpl mcJsonNull = new MCJsonNullImpl();
    return mcJsonNull;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OrCaseCondition createOrCaseCondition()
  {
    OrCaseConditionImpl orCaseCondition = new OrCaseConditionImpl();
    return orCaseCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BaseCaseCondition createBaseCaseCondition()
  {
    BaseCaseConditionImpl baseCaseCondition = new BaseCaseConditionImpl();
    return baseCaseCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NormalBlockstatePropertyPredicate createNormalBlockstatePropertyPredicate()
  {
    NormalBlockstatePropertyPredicateImpl normalBlockstatePropertyPredicate = new NormalBlockstatePropertyPredicateImpl();
    return normalBlockstatePropertyPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanBlockstatePropertyPredicate createBooleanBlockstatePropertyPredicate()
  {
    BooleanBlockstatePropertyPredicateImpl booleanBlockstatePropertyPredicate = new BooleanBlockstatePropertyPredicateImpl();
    return booleanBlockstatePropertyPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public McblockstatePackage getMcblockstatePackage()
  {
    return (McblockstatePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static McblockstatePackage getPackage()
  {
    return McblockstatePackage.eINSTANCE;
  }

} //McblockstateFactoryImpl
