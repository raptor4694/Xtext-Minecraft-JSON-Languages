/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcblockstate.mcblockstate.util;

import com.raptor.mcblockstate.mcblockstate.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.raptor.mcblockstate.mcblockstate.McblockstatePackage
 * @generated
 */
public class McblockstateAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static McblockstatePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public McblockstateAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = McblockstatePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected McblockstateSwitch<Adapter> modelSwitch =
    new McblockstateSwitch<Adapter>()
    {
      @Override
      public Adapter caseBlockstate(Blockstate object)
      {
        return createBlockstateAdapter();
      }
      @Override
      public Adapter caseVariantsBlockstate(VariantsBlockstate object)
      {
        return createVariantsBlockstateAdapter();
      }
      @Override
      public Adapter caseVariant(Variant object)
      {
        return createVariantAdapter();
      }
      @Override
      public Adapter caseBlockstateProperty(BlockstateProperty object)
      {
        return createBlockstatePropertyAdapter();
      }
      @Override
      public Adapter caseMultipartBlockstate(MultipartBlockstate object)
      {
        return createMultipartBlockstateAdapter();
      }
      @Override
      public Adapter caseCase(Case object)
      {
        return createCaseAdapter();
      }
      @Override
      public Adapter caseCaseCondition(CaseCondition object)
      {
        return createCaseConditionAdapter();
      }
      @Override
      public Adapter caseBlockstatePropertyPredicate(BlockstatePropertyPredicate object)
      {
        return createBlockstatePropertyPredicateAdapter();
      }
      @Override
      public Adapter caseCustomBlockstate(CustomBlockstate object)
      {
        return createCustomBlockstateAdapter();
      }
      @Override
      public Adapter caseModelList(ModelList object)
      {
        return createModelListAdapter();
      }
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseMCJsonValue(MCJsonValue object)
      {
        return createMCJsonValueAdapter();
      }
      @Override
      public Adapter caseMCJsonObject(MCJsonObject object)
      {
        return createMCJsonObjectAdapter();
      }
      @Override
      public Adapter caseMCJsonEntry(MCJsonEntry object)
      {
        return createMCJsonEntryAdapter();
      }
      @Override
      public Adapter caseMCJsonArray(MCJsonArray object)
      {
        return createMCJsonArrayAdapter();
      }
      @Override
      public Adapter caseMCJsonString(MCJsonString object)
      {
        return createMCJsonStringAdapter();
      }
      @Override
      public Adapter caseMCJsonNumber(MCJsonNumber object)
      {
        return createMCJsonNumberAdapter();
      }
      @Override
      public Adapter caseMCJsonIntegral(MCJsonIntegral object)
      {
        return createMCJsonIntegralAdapter();
      }
      @Override
      public Adapter caseMCJsonFloatingPoint(MCJsonFloatingPoint object)
      {
        return createMCJsonFloatingPointAdapter();
      }
      @Override
      public Adapter caseMCJsonBoolean(MCJsonBoolean object)
      {
        return createMCJsonBooleanAdapter();
      }
      @Override
      public Adapter caseMCJsonNull(MCJsonNull object)
      {
        return createMCJsonNullAdapter();
      }
      @Override
      public Adapter caseOrCaseCondition(OrCaseCondition object)
      {
        return createOrCaseConditionAdapter();
      }
      @Override
      public Adapter caseBaseCaseCondition(BaseCaseCondition object)
      {
        return createBaseCaseConditionAdapter();
      }
      @Override
      public Adapter caseNormalBlockstatePropertyPredicate(NormalBlockstatePropertyPredicate object)
      {
        return createNormalBlockstatePropertyPredicateAdapter();
      }
      @Override
      public Adapter caseBooleanBlockstatePropertyPredicate(BooleanBlockstatePropertyPredicate object)
      {
        return createBooleanBlockstatePropertyPredicateAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.Blockstate <em>Blockstate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.Blockstate
   * @generated
   */
  public Adapter createBlockstateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.VariantsBlockstate <em>Variants Blockstate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.VariantsBlockstate
   * @generated
   */
  public Adapter createVariantsBlockstateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.Variant <em>Variant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.Variant
   * @generated
   */
  public Adapter createVariantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.BlockstateProperty <em>Blockstate Property</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.BlockstateProperty
   * @generated
   */
  public Adapter createBlockstatePropertyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MultipartBlockstate <em>Multipart Blockstate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MultipartBlockstate
   * @generated
   */
  public Adapter createMultipartBlockstateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.Case <em>Case</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.Case
   * @generated
   */
  public Adapter createCaseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.CaseCondition <em>Case Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.CaseCondition
   * @generated
   */
  public Adapter createCaseConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.BlockstatePropertyPredicate <em>Blockstate Property Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.BlockstatePropertyPredicate
   * @generated
   */
  public Adapter createBlockstatePropertyPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.CustomBlockstate <em>Custom Blockstate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.CustomBlockstate
   * @generated
   */
  public Adapter createCustomBlockstateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.ModelList <em>Model List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.ModelList
   * @generated
   */
  public Adapter createModelListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonValue <em>MC Json Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonValue
   * @generated
   */
  public Adapter createMCJsonValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonObject <em>MC Json Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonObject
   * @generated
   */
  public Adapter createMCJsonObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonEntry <em>MC Json Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonEntry
   * @generated
   */
  public Adapter createMCJsonEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonArray <em>MC Json Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonArray
   * @generated
   */
  public Adapter createMCJsonArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonString <em>MC Json String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonString
   * @generated
   */
  public Adapter createMCJsonStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonNumber <em>MC Json Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonNumber
   * @generated
   */
  public Adapter createMCJsonNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonIntegral <em>MC Json Integral</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonIntegral
   * @generated
   */
  public Adapter createMCJsonIntegralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonFloatingPoint <em>MC Json Floating Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonFloatingPoint
   * @generated
   */
  public Adapter createMCJsonFloatingPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonBoolean <em>MC Json Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonBoolean
   * @generated
   */
  public Adapter createMCJsonBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.MCJsonNull <em>MC Json Null</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.MCJsonNull
   * @generated
   */
  public Adapter createMCJsonNullAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.OrCaseCondition <em>Or Case Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.OrCaseCondition
   * @generated
   */
  public Adapter createOrCaseConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.BaseCaseCondition <em>Base Case Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.BaseCaseCondition
   * @generated
   */
  public Adapter createBaseCaseConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.NormalBlockstatePropertyPredicate <em>Normal Blockstate Property Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.NormalBlockstatePropertyPredicate
   * @generated
   */
  public Adapter createNormalBlockstatePropertyPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcblockstate.mcblockstate.BooleanBlockstatePropertyPredicate <em>Boolean Blockstate Property Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcblockstate.mcblockstate.BooleanBlockstatePropertyPredicate
   * @generated
   */
  public Adapter createBooleanBlockstatePropertyPredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //McblockstateAdapterFactory
