/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.tests;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import com.raptor.mcmodel.mcmodel.Model;
import com.raptor.mcmodel.tests.McmodelInjectorProvider;
import java.util.Collections;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(McmodelInjectorProvider.class)
@SuppressWarnings("all")
public class McmodelParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;
  
  @Test
  public void loadModel() {
    String _formatBooleanCase = this.formatBooleanCase("bypassesArmor", "bypasses_armor");
    String _formatBooleanCase_1 = this.formatBooleanCase("bypassesInvulnerability", "bypasses_invulnerability");
    String _formatBooleanCase_2 = this.formatBooleanCase("bypassesMagic", "bypasses_magic");
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"direct_entity\" directEntity=EntityPredicate");
    String _formatBooleanCase_3 = this.formatBooleanCase("explosion", "is_explosion");
    String _formatBooleanCase_4 = this.formatBooleanCase("fire", "is_fire");
    String _formatBooleanCase_5 = this.formatBooleanCase("magic", "is_magic");
    String _formatBooleanCase_6 = this.formatBooleanCase("projectile", "is_projectile");
    String _formatBooleanCase_7 = this.formatBooleanCase("lightning", "is_lightning");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("\"source_entity\" sourceEntity=EntityPredicate");
    final List<String> cases = Collections.<String>unmodifiableList(CollectionLiterals.<String>newArrayList(_formatBooleanCase, _formatBooleanCase_1, _formatBooleanCase_2, _builder.toString(), _formatBooleanCase_3, _formatBooleanCase_4, _formatBooleanCase_5, _formatBooleanCase_6, _formatBooleanCase_7, _builder_1.toString()));
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("DamageSourcePropertiesLootCondition:");
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("id=\"damage_source\" \'(\' (");
    _builder_2.newLine();
    _builder_2.append("\t\t");
    {
      int _size = cases.size();
      IntegerRange _upTo = new IntegerRange(1, _size);
      boolean _hasElements = false;
      for(final Integer num : _upTo) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder_2.appendImmediate("\n| ", "\t\t");
        }
        _builder_2.append("DamageSourcePropertiesLootCondition_");
        _builder_2.append(num, "\t\t");
      }
    }
    _builder_2.newLineIfNotEmpty();
    _builder_2.append("\t");
    _builder_2.append(") \')\'");
    _builder_2.newLine();
    _builder_2.append(";");
    _builder_2.newLine();
    _builder_2.newLine();
    {
      int _size_1 = cases.size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size_1, true);
      for(final Integer num_1 : _doubleDotLessThan) {
        _builder_2.append("fragment DamageSourcePropertiesLootCondition_");
        _builder_2.append(((num_1).intValue() + 1));
        _builder_2.append(" returns DamageSourcePropertiesLootCondition:");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        String _get = cases.get((num_1).intValue());
        _builder_2.append(_get, "\t");
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append("(");
        _builder_2.newLine();
        _builder_2.append("\t\t");
        {
          int _size_2 = cases.size();
          final Function1<Integer, Boolean> _function = (Integer it) -> {
            return Boolean.valueOf((!Objects.equal(it, num_1)));
          };
          Iterable<Integer> _filter = IterableExtensions.<Integer>filter(new ExclusiveRange(0, _size_2, true), _function);
          boolean _hasElements_1 = false;
          for(final Integer i : _filter) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder_2.appendImmediate("\n& ", "\t\t");
            }
            _builder_2.append("(\'&\' ");
            String _get_1 = cases.get((i).intValue());
            _builder_2.append(_get_1, "\t\t");
            _builder_2.append(")?");
          }
        }
        _builder_2.newLineIfNotEmpty();
        _builder_2.append("\t");
        _builder_2.append(")");
        _builder_2.newLine();
        _builder_2.append(";");
        _builder_2.newLine();
        _builder_2.newLine();
      }
    }
    InputOutput.<String>println(_builder_2.toString());
  }
  
  public String formatDoubleCase(final String name) {
    return this.formatDoubleCase(name, name);
  }
  
  public String formatDoubleCase(final String name, final String kw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(name);
    _builder.append("Defined?=\"");
    _builder.append(kw);
    _builder.append("\" (\'=\'|\'==\') ");
    _builder.append(name);
    _builder.append("=PERCENTAGE");
    return _builder.toString();
  }
  
  public String formatBooleanCase(final String name) {
    return this.formatBooleanCase(name, name);
  }
  
  public String formatBooleanCase(final String name, final String kw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("(");
    _builder.append(name);
    _builder.append("Defined?=\'!\' \"");
    _builder.append(kw);
    _builder.append("\" | ");
    _builder.append(name);
    _builder.append("Defined?=\"");
    _builder.append(kw);
    _builder.append("\" (\'!=\' (");
    _builder.append(name);
    _builder.append("?=\"false\" | \"true\") | (\'=\'|\'==\') (");
    _builder.append(name);
    _builder.append("?=\"true\" | \"false\")) | ");
    _builder.append(name);
    _builder.append("?=\"");
    _builder.append(kw);
    _builder.append("\")");
    return _builder.toString();
  }
}
