grammar com.raptor.mcentity.MCEntity hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate mcentity "http://www.raptor.com/mcentity/MCEntity"

EntityData:
	nbt=NBTCompound
;

//DefaultEntityDatum returns EntityDatum:
//	"Pos" {PosDatum} ':' pos=Vec3D |
//	"Motion" {MotionDatum} ':' motion=Vec3D |
//	"Rotation" {RotationDatum} ':' rotation=Vec2F |
//	"FallDistance" {FallDistanceDatum} ':' fallDistance=FloatAssumed |
//	"Fire" {FireDatum} ':' fire=ShortAssumed |
//	"Air" {AirDatum} ':' air=ShortAssumed |
//	"OnGround" {OnGroundDatum} ':' (onGround?="true" | "false") |
//	"NoGravity" {NoGravityDatum} ':' (noGravity?="true" | "false") |
//	"Invulnerable" {InvulnerableDatum} ':' (invulnerable?="true" | "false") |
//	"PortalCooldown" {PortalCooldownDatum} ':' portalCooldown=INT |
//	"UUIDMost" {UUIDMostDatum} ':' uuidMost=LongAssumed |
//	"UUIDLeast" {UUIDLeastDatum} ':' uuidLeast=LongAssumed |
//	"CustomName" {CustomNameDatum} ':' customName=JSONTextComponent |
//;
//
//Vec3D:
//	'[' x=DoubleAssumed ',' y=DoubleAssumed ',' z=DoubleAssumed ','? ']'
//;
//
//Vec2F:
//	'[' first=FloatAssumed ',' second=FloatAssumed ','? ']'
//;

NBTValue:
	NBTJSONTextComponent
	| NBTCompound
	| NBTByteArray
	| NBTLongArray
	| NBTIntArray
	| NBTArray
	| NBTBool
	| NBTNumber
	| NamespacedKey
	| NBTString
;

//DoNotUse_NBTValue returns NBTValue:
//	Vec3D
//;

NBTCompound:
	'{' {NBTCompound}
		(entries+=NBTEntry (',' entries+=NBTEntry)* ','?)?
	'}'
;

NBTEntry:
	key=(STRING | UnquotedString) ':' value=NBTValue
;

NBTByteArray:
	NBT_BYTE_ARRAY_START {NBTByteArray}
//		(elements+=ByteAssumed (',' elements+=ByteAssumed)* ','?)?
		(elements+=BYTE (',' elements+=BYTE)* ','?)?
	']'
;

NBTLongArray:
	NBT_LONG_ARRAY_START {NBTLongArray}
//		(elements+=LongAssumed (',' elements+=LongAssumed)* ','?)?
		(elements+=LONG (',' elements+=LONG)* ','?)?
	']'
;

NBTIntArray:
	NBT_INT_ARRAY_START {NBTIntArray}
		(elements+=INT (',' elements+=INT)* ','?)?
	']'
;

//ByteAssumed returns ecore::EByte: BYTE | INT;
//
//ShortAssumed returns ecore::EShort: SHORT | INT;
//
//FloatAssumed returns ecore::EFloat: FLOAT | INT;
//
//DoubleAssumed returns ecore::EDouble: DOUBLE | INT;
//
//LongAssumed returns ecore::ELong: LONG | INT;

NBTArray:
	'[' {NBTArray}
		((elements+=NBTCompound (',' elements+=NBTCompound)*
		| elements+=NBTByteArray (',' elements+=NBTByteArray)*
		| elements+=NBTLongArray (',' elements+=NBTLongArray)*
		| elements+=NBTIntArray (',' elements+=NBTIntArray)*
		| elements+=NBTArray (',' elements+=NBTArray)*
		| elements+=(NBTBool | NBTNumber) (',' elements+=(NBTBool | NBTNumber))*
		| elements+=NBTString (',' elements+=NBTString)*
		| elements+=NBTJSONTextComponent (',' elements+=NBTJSONTextComponent)*
		) ','?)?
	']'
;

NBTBool:
	(value?="true" | "false" {NBTBool})
;

NBTNumber:
	NBTFloat
	| NBTDouble
	| NBTLong
	| NBTShort
	| NBTByte
	| NBTInt
;

NBTFloat:
	value=FLOAT
;

NBTDouble:
	value=DOUBLE
;

NBTLong:
	value=LONG
;

NBTShort:
	value=SHORT
;

NBTByte:
	value=BYTE
;

NBTInt:
	value=INT
;

NBTString:
	value=(STRING | SINGLE_STRING | UnquotedString)
;

NBTJSONTextComponent:
	JSON_TEXT_BEGIN_OBJ
		value=NBTJSONTextComponentObject
	JSON_TEXT_END_OBJ
	|
	JSON_TEXT_BEGIN_ARRAY
		value=NBTJSONTextComponentArray
	JSON_TEXT_END_ARRAY
	|
	JSON_TEXT_BEGIN_STR
		value=NBTJSONTextComponentString
	JSON_TEXT_END_STR
;

NBTJSONTextComponentObject returns JSONTextComponent:
	{JSONObject}
	(entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?
; 

NBTJSONTextComponentString returns JSONTextComponent:
	{JSONString}
	value=STRING
;

NBTJSONTextComponentArray returns JSONTextComponent:
	{JSONArray}
	(entries+=JSONValue (',' entries+=JSONValue)* ','?)?
;

JSONTextComponent:
	JSONObject | JSONArray | JSONString
;

JSONValue:
	JSONObject
	| JSONArray
	| JSONString
	| JSONNumber
	| JSONBool
	| Selector
;

JSONBool:
	(value?="true" | "false" {JSONBool})
;

JSONNumber:
	JSONDouble
	| JSONLong
;

JSONDouble:
	value=DOUBLE
;

JSONLong:
	value=INTAsLong
;

INTAsLong returns ecore::ELong: INT;

JSONObject:
	'{' {JSONObject}
		(entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?
	'}'
;

JSONEntry:
	key=STRING ':' value=JSONValue
;

JSONArray:
	'[' {JSONArray}
		(entries+=JSONValue (',' entries+=JSONValue)* ','?)?
	']'
;

JSONString:
	value=STRING
;



//JSONTextComponent:
//	JSONArrayTextComponent
//	| JSONStringTextComponent
//	| JSONObjectTextComponent
//;
//
//JSONStringTextComponent:
//	text=STRING
//;
//
//JSONArrayTextComponent:
//	'[' {JSONArrayTextComponent}
//		(values+=JSONTextComponent (',' values+=JSONTextComponent)* ','?)?
//	']'
//;
//
//JSONObjectTextComponent:
//	'{' {JSONObjectTextComponent}
//	(
//		("text" ':' text=(STRING | SINGLE_STRING)
//			| "translate" ':' translate=UnquotedString (',' "with" ':' ^with=JSONArrayTextComponent)?
//			| "score" ':' score=JSONTextScore
//			| "selector" selector?=':' (selectorString=STRING | selectorValue=Selector)
//			| "keybind" ':' keybind=UnquotedString
//			| "nbt" ':' nbt=STRING 
//				((',' "interpret" ':' (interpret?="true" | "false"))?
//				& (',' ("block" ':' block=STRING))
//				)
//		)
//		& ()
//	)
//	'}'
//;

//JSONTextScore:
//	'{' {JSONTextScore} (
//		"name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector)
//			(
//				(',' "objective" ':' objective=(STRING|UnquotedString))
//				& (',' "value" valuePresent?=':' value=INT)?
//			)
//		| "objective" ':' objective=(STRING|UnquotedString)
//			(
//				(',' "name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector))
//				& (',' "value" valuePresent?=':' value=INT)?
//			)
//		| "value" valuePresent?=':' value=INT
//			(
//				(',' "name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector))
//				& (',' "objective" ':' objective=(STRING|UnquotedString))
//			)
//	)
//	'}'
//;

Selector hidden():
	type=SelectorType ('[' arguments=SelectorArguments ']')?
;

SelectorArguments hidden(WS, ML_COMMENT, SL_COMMENT):
	filters+=SelectorFilter (',' filters+=SelectorFilter)*
;

SelectorFilter:
	name=ID '=' (inverted?='!')? value=SelectorValue
;

SelectorValue:
	NBTCompound
	| NamespacedKey
	| IntRange
	| DoubleRange
	| IntSelectorValue
	| DoubleSelectorValue
	| StringSelectorValue
	| BoolSelectorValue
;

IntRange:
	{ClosedIntRange} begin=INT '..' end=INT
	| {OpenEndedIntRange} begin=INT '..'
	| {OpenBeginningIntRange} '..' end=INT
;

DoubleRange:
	{ClosedDoubleRange} (begin=INTasDouble '..' end=DOUBLE | begin=DOUBLE '..' end=DOUBLEorINT)
	| {OpenEndedDoubleRange} begin=DOUBLE '..'
	| {OpenBeginningDoubleRange} '..' end=DOUBLE
;

IntSelectorValue:
	value=INTAsLong
;

DoubleSelectorValue:
	value=DOUBLE
;

DOUBLEorINT returns ecore::EDouble:
	DOUBLE | INT
;

INTasDouble returns ecore::EDouble: INT;

BoolSelectorValue:
	(value?="true" | "false" {BoolSelectorValue})
;

StringSelectorValue:
	value=(STRING | UnquotedString)
;

//SelectorFilter:
//	PositionFilter
//	| DistanceFilter
//;
//
//PositionFilter:
//	"x" '=' x=DoubleAssumed ',' "y" '=' y=DoubleAssumed ',' "z" '=' z=DoubleAssumed
//;
//
//DistanceFilter:
//	"distance" '=' (min=DoubleAssumed (range?='..' max=DoubleAssumed?)?)
//;

NamespacedKey hidden():
	namespace=UnquotedString ':' key=NamespacedKeyKey// | key=NamespacedKeyKey2) 
;

NamespacedKeyKey hidden():
	UnquotedString ('/' UnquotedString)*
;

NamespacedKeyKey2 hidden():
	UnquotedString ('/' UnquotedString)+
;

//enum SortMethod:
//	NEAREST="nearest"
//	| RANDOM="random"
//;

enum SelectorType:
	NEAREST_PLAYER="@p"
	| ALL_PLAYERS="@a"
	| SELF="@s"
	| ENTITIES="@e"
	| RANDOM_PLAYER="@r"
;
//
//Username hidden():
//	(INT | LONG | SHORT | BYTE) ID
//	| ID
//;

UnquotedString hidden():
	(ID | '-' | '.' | '+') (ID | '-' | '.' | '+' | INT | FLOAT | DOUBLE | LONG | SHORT | BYTE)*
;

terminal NBT_BYTE_ARRAY_START: '[B;';
terminal NBT_INT_ARRAY_START: '[I;';
terminal NBT_LONG_ARRAY_START: '[L;';

terminal fragment SIGN: ('-'|'+')?;
terminal fragment EXP: ('e'|'E') SIGN ('0'..'9')+;

terminal FLOAT returns ecore::EFloat:
	SIGN (('0'..'9')+ ('.' ('0'..'9')*)?
		 | '.' ('0'..'9')+)
	EXP? ('f'|'F')
;
terminal DOUBLE returns ecore::EDouble:
	SIGN (('0'..'9')+ ('.' ('0'..'9')* EXP? ('d'|'D')? 
			          | EXP ('d'|'D')?
			          | ('d'|'D'))
	     | '.' ('0'..'9')+ EXP? ('d'|'D')?)
;

terminal fragment HEX_DIGIT: ('0'..'9') | ('a'..'f') | ('A'..'F');

terminal fragment INTBASE:
	'0' ('x' | 'X') HEX_DIGIT HEX_DIGIT?
	|
	'0' ('b' | 'B') (('0'|'1') (('0'|'1') (('0'|'1') (('0'|'1') (('0'|'1') (('0'|'1') (('0'|'1') (('0'|'1')?))?)?)?)?)?)?)?
	|
	'0' 
	|
	'1' (('0'..'9') ('0'..'9')?)?
	|
	'2' (
		'5' ('0'..'5')?
		|
		('0'..'4') ('0'..'9')?
		|
		('6'..'9')?
	)
	|
	('3'..'9') ('0'..'9')?
;

terminal fragment SIGNEDINTBASE:
	'0' ('x' | 'X') HEX_DIGIT+
	|
	'0' ('b' | 'B') ('0'|'1')+
	|
	SIGN ('0' | ('1'..'9') ('0'..'9')*)
;


terminal LONG returns ecore::ELong:
	SIGNEDINTBASE ('l'|'L')
;

terminal SHORT returns ecore::EShort:
	SIGNEDINTBASE ('s'|'S')
;

terminal INT returns ecore::EInt:
	SIGNEDINTBASE
	| "rgb" WS? '(' WS? INTBASE WS? ',' WS? INTBASE WS? ',' WS? INTBASE WS? ')'
;

terminal BYTE returns ecore::EByte:
	SIGN ('0' | ('1'..'9') ('0'..'9')*) ('b'|'B')
;

terminal ID: ('a'..'z'|'A'..'Z'|'_'|'0'..'9')+;

terminal JSON_TEXT_BEGIN_OBJ: "'{";
terminal JSON_TEXT_END_OBJ: "}'";

terminal JSON_TEXT_BEGIN_ARRAY: "'[";
terminal JSON_TEXT_END_ARRAY: "]'";

terminal JSON_TEXT_BEGIN_STR: "'\"";
terminal JSON_TEXT_END_STR: "\"'";

terminal STRING: '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"';
terminal SINGLE_STRING: "'" ("'" | ('\\' . | !('\\'|"'"|'{'|'"'|'[')) ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'");

terminal ML_COMMENT: '/*' -> '*/';
terminal SL_COMMENT: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;

