/**
 * generated by Xtext 2.19.0
 */
package com.raptor.mcentity.generator;

import com.raptor.mcentity.mcentity.BoolSelectorValue;
import com.raptor.mcentity.mcentity.ClosedDoubleRange;
import com.raptor.mcentity.mcentity.ClosedIntRange;
import com.raptor.mcentity.mcentity.DoubleSelectorValue;
import com.raptor.mcentity.mcentity.EntityData;
import com.raptor.mcentity.mcentity.IntSelectorValue;
import com.raptor.mcentity.mcentity.JSONArray;
import com.raptor.mcentity.mcentity.JSONBool;
import com.raptor.mcentity.mcentity.JSONDouble;
import com.raptor.mcentity.mcentity.JSONEntry;
import com.raptor.mcentity.mcentity.JSONLong;
import com.raptor.mcentity.mcentity.JSONObject;
import com.raptor.mcentity.mcentity.JSONString;
import com.raptor.mcentity.mcentity.JSONValue;
import com.raptor.mcentity.mcentity.NBTArray;
import com.raptor.mcentity.mcentity.NBTBool;
import com.raptor.mcentity.mcentity.NBTByte;
import com.raptor.mcentity.mcentity.NBTByteArray;
import com.raptor.mcentity.mcentity.NBTCompound;
import com.raptor.mcentity.mcentity.NBTDouble;
import com.raptor.mcentity.mcentity.NBTEntry;
import com.raptor.mcentity.mcentity.NBTFloat;
import com.raptor.mcentity.mcentity.NBTInt;
import com.raptor.mcentity.mcentity.NBTIntArray;
import com.raptor.mcentity.mcentity.NBTJSONTextComponent;
import com.raptor.mcentity.mcentity.NBTLong;
import com.raptor.mcentity.mcentity.NBTLongArray;
import com.raptor.mcentity.mcentity.NBTShort;
import com.raptor.mcentity.mcentity.NBTString;
import com.raptor.mcentity.mcentity.NBTValue;
import com.raptor.mcentity.mcentity.NamespacedKey;
import com.raptor.mcentity.mcentity.OpenBeginningDoubleRange;
import com.raptor.mcentity.mcentity.OpenBeginningIntRange;
import com.raptor.mcentity.mcentity.OpenEndedDoubleRange;
import com.raptor.mcentity.mcentity.OpenEndedIntRange;
import com.raptor.mcentity.mcentity.Selector;
import com.raptor.mcentity.mcentity.SelectorArguments;
import com.raptor.mcentity.mcentity.SelectorFilter;
import com.raptor.mcentity.mcentity.SelectorValue;
import com.raptor.mcentity.mcentity.StringSelectorValue;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.util.Strings;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MCEntityGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _lastSegment = resource.getURI().lastSegment();
    String _plus = (_lastSegment + ".txt");
    EObject _get = resource.getContents().get(0);
    fsa.generateFile(_plus, this.format(((EntityData) _get).getNbt()));
  }
  
  protected String _format(final NBTCompound nbt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    {
      EList<NBTEntry> _entries = nbt.getEntries();
      boolean _hasElements = false;
      for(final NBTEntry entry : _entries) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        String _formatString = this.formatString(entry.getKey());
        _builder.append(_formatString);
        _builder.append(":");
        String _format = this.format(entry.getValue());
        _builder.append(_format);
      }
    }
    _builder.append("}");
    return _builder.toString();
  }
  
  protected String _format(final NamespacedKey it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    String _namespace = it.getNamespace();
    _builder.append(_namespace);
    _builder.append(":");
    String _key = it.getKey();
    _builder.append(_key);
    _builder.append("\"");
    return _builder.toString();
  }
  
  protected String _format(final NBTArray nbt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    {
      EList<NBTValue> _elements = nbt.getElements();
      boolean _hasElements = false;
      for(final NBTValue element : _elements) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        String _format = this.format(element);
        _builder.append(_format);
      }
    }
    _builder.append("]");
    return _builder.toString();
  }
  
  protected String _format(final NBTString nbt) {
    StringConcatenation _builder = new StringConcatenation();
    String _formatString = this.formatString(nbt.getValue());
    _builder.append(_formatString);
    return _builder.toString();
  }
  
  protected String _format(final NBTByteArray nbt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[B;");
    {
      EList<Byte> _elements = nbt.getElements();
      boolean _hasElements = false;
      for(final Byte element : _elements) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(element);
      }
    }
    _builder.append("]");
    return _builder.toString();
  }
  
  protected String _format(final NBTLongArray nbt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[L;");
    {
      EList<Long> _elements = nbt.getElements();
      boolean _hasElements = false;
      for(final Long element : _elements) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(element);
      }
    }
    _builder.append("]");
    return _builder.toString();
  }
  
  protected String _format(final NBTIntArray nbt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[I;");
    {
      EList<Integer> _elements = nbt.getElements();
      boolean _hasElements = false;
      for(final Integer element : _elements) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append(element);
      }
    }
    _builder.append("]");
    return _builder.toString();
  }
  
  protected String _format(final NBTJSONTextComponent text) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'");
    String _replace = this.formatJSONText(text.getValue()).replace("\'", "\\\'").replace("\\\"", "\"");
    _builder.append(_replace);
    _builder.append("\'");
    return _builder.toString();
  }
  
  protected String _format(final NBTBool nbt) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isValue = nbt.isValue();
      if (_isValue) {
        _builder.append("1b");
      } else {
        _builder.append("0b");
      }
    }
    return _builder.toString();
  }
  
  protected String _format(final NBTByte nbt) {
    StringConcatenation _builder = new StringConcatenation();
    byte _value = nbt.getValue();
    _builder.append(_value);
    _builder.append("b");
    return _builder.toString();
  }
  
  protected String _format(final NBTShort nbt) {
    StringConcatenation _builder = new StringConcatenation();
    short _value = nbt.getValue();
    _builder.append(_value);
    _builder.append("s");
    return _builder.toString();
  }
  
  protected String _format(final NBTInt nbt) {
    StringConcatenation _builder = new StringConcatenation();
    int _value = nbt.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _format(final NBTLong nbt) {
    StringConcatenation _builder = new StringConcatenation();
    long _value = nbt.getValue();
    _builder.append(_value);
    _builder.append("L");
    return _builder.toString();
  }
  
  protected String _format(final NBTFloat nbt) {
    StringConcatenation _builder = new StringConcatenation();
    float _value = nbt.getValue();
    _builder.append(_value);
    _builder.append("f");
    return _builder.toString();
  }
  
  protected String _format(final NBTDouble nbt) {
    StringConcatenation _builder = new StringConcatenation();
    double _value = nbt.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _formatJSONText(final JSONObject json) {
    return this._formatJSON(json);
  }
  
  protected String _formatJSONText(final JSONArray json) {
    return this._formatJSON(json);
  }
  
  protected String _formatJSONText(final JSONString json) {
    return this._formatJSON(json);
  }
  
  protected String _formatJSON(final JSONObject json) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    {
      EList<JSONEntry> _entries = json.getEntries();
      boolean _hasElements = false;
      for(final JSONEntry entry : _entries) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        _builder.append("\"");
        String _convertToJavaString = Strings.convertToJavaString(entry.getKey(), false);
        _builder.append(_convertToJavaString);
        _builder.append("\":");
        String _formatJSON = this.formatJSON(entry.getValue());
        _builder.append(_formatJSON);
      }
    }
    _builder.append("}");
    return _builder.toString();
  }
  
  protected String _formatJSON(final JSONArray json) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    {
      EList<JSONValue> _entries = json.getEntries();
      boolean _hasElements = false;
      for(final JSONValue element : _entries) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        String _formatJSON = this.formatJSON(element);
        _builder.append(_formatJSON);
      }
    }
    _builder.append("]");
    return _builder.toString();
  }
  
  protected String _formatJSON(final JSONString json) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    String _replace = json.getValue().replace("\"", "\\\"");
    _builder.append(_replace);
    _builder.append("\"");
    return _builder.toString();
  }
  
  protected String _formatJSON(final JSONBool json) {
    StringConcatenation _builder = new StringConcatenation();
    boolean _isValue = json.isValue();
    _builder.append(_isValue);
    return _builder.toString();
  }
  
  protected String _formatJSON(final JSONDouble json) {
    StringConcatenation _builder = new StringConcatenation();
    double _value = json.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _formatJSON(final JSONLong json) {
    StringConcatenation _builder = new StringConcatenation();
    long _value = json.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _formatJSON(final Selector selector) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\"");
    StringConcatenation _builder_1 = new StringConcatenation();
    String _literal = selector.getType().getLiteral();
    _builder_1.append(_literal);
    {
      SelectorArguments _arguments = selector.getArguments();
      boolean _tripleNotEquals = (_arguments != null);
      if (_tripleNotEquals) {
        _builder_1.append("[");
        {
          EList<SelectorFilter> _filters = selector.getArguments().getFilters();
          boolean _hasElements = false;
          for(final SelectorFilter arg : _filters) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder_1.appendImmediate(",", "");
            }
            String _formatSelectorValue = this.formatSelectorValue(arg.getValue());
            _builder_1.append(_formatSelectorValue);
          }
        }
        _builder_1.append("]");
      }
    }
    String _convertToJavaString = Strings.convertToJavaString(_builder_1.toString());
    _builder.append(_convertToJavaString);
    _builder.append("\"");
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final NBTCompound nbt) {
    return this.format(nbt);
  }
  
  protected String _formatSelectorValue(final NamespacedKey nskey) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _namespace = nskey.getNamespace();
      boolean _tripleNotEquals = (_namespace != null);
      if (_tripleNotEquals) {
        String _namespace_1 = nskey.getNamespace();
        _builder.append(_namespace_1);
        _builder.append(":");
      }
    }
    String _key = nskey.getKey();
    _builder.append(_key);
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final ClosedIntRange range) {
    StringConcatenation _builder = new StringConcatenation();
    int _begin = range.getBegin();
    _builder.append(_begin);
    _builder.append("..");
    int _end = range.getEnd();
    _builder.append(_end);
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final OpenEndedIntRange range) {
    StringConcatenation _builder = new StringConcatenation();
    int _begin = range.getBegin();
    _builder.append(_begin);
    _builder.append("..");
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final OpenBeginningIntRange range) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("..");
    int _end = range.getEnd();
    _builder.append(_end);
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final ClosedDoubleRange range) {
    StringConcatenation _builder = new StringConcatenation();
    double _begin = range.getBegin();
    _builder.append(_begin);
    _builder.append("..");
    double _end = range.getEnd();
    _builder.append(_end);
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final OpenEndedDoubleRange range) {
    StringConcatenation _builder = new StringConcatenation();
    double _begin = range.getBegin();
    _builder.append(_begin);
    _builder.append("..");
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final OpenBeginningDoubleRange range) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("..");
    double _end = range.getEnd();
    _builder.append(_end);
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final IntSelectorValue sel) {
    StringConcatenation _builder = new StringConcatenation();
    long _value = sel.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final DoubleSelectorValue sel) {
    StringConcatenation _builder = new StringConcatenation();
    double _value = sel.getValue();
    _builder.append(_value);
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final StringSelectorValue sel) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _value = sel.getValue();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("[-.+a-zA-Z_0-9]+");
      boolean _matches = _value.matches(_builder_1.toString());
      if (_matches) {
        String _value_1 = sel.getValue();
        _builder.append(_value_1);
      } else {
        _builder.append("\"");
        String _convertToJavaString = Strings.convertToJavaString(sel.getValue(), false);
        _builder.append(_convertToJavaString);
        _builder.append("\"");
      }
    }
    return _builder.toString();
  }
  
  protected String _formatSelectorValue(final BoolSelectorValue sel) {
    StringConcatenation _builder = new StringConcatenation();
    boolean _isValue = sel.isValue();
    _builder.append(_isValue);
    return _builder.toString();
  }
  
  public String formatString(final String str) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[-.+a-zA-Z_0-9]+");
    boolean _matches = str.matches(_builder.toString());
    if (_matches) {
      return str;
    } else {
      String _convertToJavaString = Strings.convertToJavaString(str, false);
      String _plus = ("\"" + _convertToJavaString);
      return (_plus + "\"");
    }
  }
  
  public String format(final NBTValue nbt) {
    if (nbt instanceof NBTByte) {
      return _format((NBTByte)nbt);
    } else if (nbt instanceof NBTDouble) {
      return _format((NBTDouble)nbt);
    } else if (nbt instanceof NBTFloat) {
      return _format((NBTFloat)nbt);
    } else if (nbt instanceof NBTInt) {
      return _format((NBTInt)nbt);
    } else if (nbt instanceof NBTLong) {
      return _format((NBTLong)nbt);
    } else if (nbt instanceof NBTShort) {
      return _format((NBTShort)nbt);
    } else if (nbt instanceof NBTArray) {
      return _format((NBTArray)nbt);
    } else if (nbt instanceof NBTBool) {
      return _format((NBTBool)nbt);
    } else if (nbt instanceof NBTByteArray) {
      return _format((NBTByteArray)nbt);
    } else if (nbt instanceof NBTCompound) {
      return _format((NBTCompound)nbt);
    } else if (nbt instanceof NBTIntArray) {
      return _format((NBTIntArray)nbt);
    } else if (nbt instanceof NBTJSONTextComponent) {
      return _format((NBTJSONTextComponent)nbt);
    } else if (nbt instanceof NBTLongArray) {
      return _format((NBTLongArray)nbt);
    } else if (nbt instanceof NBTString) {
      return _format((NBTString)nbt);
    } else if (nbt instanceof NamespacedKey) {
      return _format((NamespacedKey)nbt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(nbt).toString());
    }
  }
  
  public String formatJSONText(final EObject json) {
    if (json instanceof JSONArray) {
      return _formatJSONText((JSONArray)json);
    } else if (json instanceof JSONObject) {
      return _formatJSONText((JSONObject)json);
    } else if (json instanceof JSONString) {
      return _formatJSONText((JSONString)json);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(json).toString());
    }
  }
  
  public String formatJSON(final JSONValue json) {
    if (json instanceof JSONDouble) {
      return _formatJSON((JSONDouble)json);
    } else if (json instanceof JSONLong) {
      return _formatJSON((JSONLong)json);
    } else if (json instanceof JSONArray) {
      return _formatJSON((JSONArray)json);
    } else if (json instanceof JSONBool) {
      return _formatJSON((JSONBool)json);
    } else if (json instanceof JSONObject) {
      return _formatJSON((JSONObject)json);
    } else if (json instanceof JSONString) {
      return _formatJSON((JSONString)json);
    } else if (json instanceof Selector) {
      return _formatJSON((Selector)json);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(json).toString());
    }
  }
  
  public String formatSelectorValue(final SelectorValue range) {
    if (range instanceof ClosedDoubleRange) {
      return _formatSelectorValue((ClosedDoubleRange)range);
    } else if (range instanceof ClosedIntRange) {
      return _formatSelectorValue((ClosedIntRange)range);
    } else if (range instanceof OpenBeginningDoubleRange) {
      return _formatSelectorValue((OpenBeginningDoubleRange)range);
    } else if (range instanceof OpenBeginningIntRange) {
      return _formatSelectorValue((OpenBeginningIntRange)range);
    } else if (range instanceof OpenEndedDoubleRange) {
      return _formatSelectorValue((OpenEndedDoubleRange)range);
    } else if (range instanceof OpenEndedIntRange) {
      return _formatSelectorValue((OpenEndedIntRange)range);
    } else if (range instanceof BoolSelectorValue) {
      return _formatSelectorValue((BoolSelectorValue)range);
    } else if (range instanceof DoubleSelectorValue) {
      return _formatSelectorValue((DoubleSelectorValue)range);
    } else if (range instanceof IntSelectorValue) {
      return _formatSelectorValue((IntSelectorValue)range);
    } else if (range instanceof NBTCompound) {
      return _formatSelectorValue((NBTCompound)range);
    } else if (range instanceof NamespacedKey) {
      return _formatSelectorValue((NamespacedKey)range);
    } else if (range instanceof StringSelectorValue) {
      return _formatSelectorValue((StringSelectorValue)range);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(range).toString());
    }
  }
}
