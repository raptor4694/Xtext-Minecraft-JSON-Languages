/**
 * generated by Xtext 2.19.0
 */
package com.raptor.mcentity.validation;

import com.google.common.base.Objects;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import com.raptor.mcentity.mcentity.EntityData;
import com.raptor.mcentity.mcentity.JSONEntry;
import com.raptor.mcentity.mcentity.JSONObject;
import com.raptor.mcentity.mcentity.McentityFactory;
import com.raptor.mcentity.mcentity.McentityPackage;
import com.raptor.mcentity.mcentity.NBTArray;
import com.raptor.mcentity.mcentity.NBTBool;
import com.raptor.mcentity.mcentity.NBTByte;
import com.raptor.mcentity.mcentity.NBTByteArray;
import com.raptor.mcentity.mcentity.NBTCompound;
import com.raptor.mcentity.mcentity.NBTDouble;
import com.raptor.mcentity.mcentity.NBTEntry;
import com.raptor.mcentity.mcentity.NBTFloat;
import com.raptor.mcentity.mcentity.NBTInt;
import com.raptor.mcentity.mcentity.NBTIntArray;
import com.raptor.mcentity.mcentity.NBTJSONTextComponent;
import com.raptor.mcentity.mcentity.NBTLong;
import com.raptor.mcentity.mcentity.NBTLongArray;
import com.raptor.mcentity.mcentity.NBTShort;
import com.raptor.mcentity.mcentity.NBTString;
import com.raptor.mcentity.mcentity.NBTValue;
import com.raptor.mcentity.mcentity.NamespacedKey;
import com.raptor.mcentity.mcentity.SelectorArguments;
import com.raptor.mcentity.mcentity.SelectorFilter;
import com.raptor.mcentity.validation.AbstractMCEntityValidator;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.util.Strings;
import org.eclipse.xtext.util.internal.Nullable;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.ValidationMessageAcceptor;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.MapExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Pair;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure2;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MCEntityValidator extends AbstractMCEntityValidator {
  private static class NBTData {
    public final NBTCompound nbt;
    
    public final Map<String, NBTEntry> map;
    
    public final HashSet<String> keys;
    
    public final int index;
    
    public NBTData(final int index, final NBTCompound nbt) {
      this.nbt = nbt;
      this.map = MCEntityValidator.toMap(nbt);
      Set<String> _keySet = this.map.keySet();
      HashSet<String> _hashSet = new HashSet<String>(_keySet);
      this.keys = _hashSet;
      this.index = index;
    }
    
    public NBTData(final NBTCompound nbt) {
      this(ValidationMessageAcceptor.INSIGNIFICANT_INDEX, nbt);
    }
  }
  
  public static class EntityDef {
    private final Procedure1<? super MCEntityValidator.NBTData> checker;
    
    private final Set<String> attributes;
    
    public boolean hasSpawnEgg = false;
    
    public EntityDef() {
      this(false, Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet()), ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
      }));
    }
    
    public EntityDef(final boolean hasSpawnEgg) {
      this(hasSpawnEgg, new Function0<Set<String>>() {
        @Override
        public Set<String> apply() {
          Set<String> _xifexpression = null;
          if (hasSpawnEgg) {
            _xifexpression = MCEntityValidator.genericAttributes;
          } else {
            _xifexpression = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet());
          }
          return _xifexpression;
        }
      }.apply(), ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
      }));
    }
    
    public EntityDef(final boolean hasSpawnEgg, final Procedure1<? super MCEntityValidator.NBTData> checker) {
      this(hasSpawnEgg, new Function0<Set<String>>() {
        @Override
        public Set<String> apply() {
          Set<String> _xifexpression = null;
          if (hasSpawnEgg) {
            _xifexpression = MCEntityValidator.genericAttributes;
          } else {
            _xifexpression = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet());
          }
          return _xifexpression;
        }
      }.apply(), checker);
    }
    
    public EntityDef(final Procedure1<? super MCEntityValidator.NBTData> checker) {
      this(true, MCEntityValidator.genericAttributes, checker);
    }
    
    public EntityDef(final boolean hasSpawnEgg, final Set<String> attributes, final Procedure1<? super MCEntityValidator.NBTData> checker) {
      this.attributes = attributes;
      this.checker = checker;
      this.hasSpawnEgg = hasSpawnEgg;
    }
    
    public MCEntityValidator.EntityDef hasSpawnEgg(final boolean hasSpawnEgg) {
      this.hasSpawnEgg = hasSpawnEgg;
      return this;
    }
    
    public void check(final NBTCompound nbt) {
      MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(nbt);
      this.check(_nBTData);
    }
    
    public void check(final MCEntityValidator.NBTData maks) {
      this.checker.apply(maks);
    }
    
    public Set<String> getAttributes() {
      return Collections.<String>unmodifiableSet(this.attributes);
    }
  }
  
  public interface PropertyDef {
    boolean isValid(final String str);
  }
  
  public static class BlockDef {
    private final Map<String, MCEntityValidator.PropertyDef> properties;
    
    @Nullable
    private final Procedure1<? super MCEntityValidator.NBTData> checker;
    
    public boolean hasItem = true;
    
    public BlockDef() {
      this(null, null);
    }
    
    public BlockDef(final Procedure1<? super MCEntityValidator.NBTData> checker) {
      this(Collections.<String, MCEntityValidator.PropertyDef>unmodifiableMap(CollectionLiterals.<String, MCEntityValidator.PropertyDef>newHashMap()), checker);
    }
    
    public BlockDef(final Map<String, MCEntityValidator.PropertyDef> properties) {
      this(properties, null);
    }
    
    public BlockDef(final Map<String, MCEntityValidator.PropertyDef> properties, final Procedure1<? super MCEntityValidator.NBTData> checker) {
      this.properties = properties;
      this.checker = checker;
    }
    
    public MCEntityValidator.BlockDef hasItem(final boolean hasItem) {
      this.hasItem = hasItem;
      return this;
    }
    
    public void check(final NBTCompound nbt) {
      if (this.checker!=null) {
        MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(nbt);
        this.checker.apply(_nBTData);
      }
    }
    
    public void check(final MCEntityValidator.NBTData maks) {
      if (this.checker!=null) {
        this.checker.apply(maks);
      }
    }
    
    public Map<String, MCEntityValidator.PropertyDef> getProperties() {
      return Collections.<String, MCEntityValidator.PropertyDef>unmodifiableMap(this.properties);
    }
    
    public void checkProperties(final Map<String, String> props, final Procedure2<? super String, ? super String> errorMessageAcceptor) {
      Set<Map.Entry<String, String>> _entrySet = props.entrySet();
      for (final Map.Entry<String, String> entry : _entrySet) {
        {
          final MCEntityValidator.PropertyDef prop = this.properties.get(entry.getKey());
          if ((prop == null)) {
            String _key = entry.getKey();
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("Block does not have property \"");
            String _key_1 = entry.getKey();
            _builder.append(_key_1);
            _builder.append("\"");
            errorMessageAcceptor.apply(_key, _builder.toString());
          } else {
            boolean _isValid = prop.isValid(entry.getValue());
            boolean _not = (!_isValid);
            if (_not) {
              String _key_2 = entry.getKey();
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append("Invalid value for property \"");
              String _key_3 = entry.getKey();
              _builder_1.append(_key_3);
              _builder_1.append("\"");
              errorMessageAcceptor.apply(_key_2, _builder_1.toString());
            }
          }
        }
      }
    }
  }
  
  public static class ItemDef {
    @Nullable
    private final Procedure1<? super MCEntityValidator.NBTData> checker;
    
    public final int maxStackSize;
    
    public ItemDef() {
      this(64, null);
    }
    
    public ItemDef(final Procedure1<? super MCEntityValidator.NBTData> checker) {
      this(64, checker);
    }
    
    public ItemDef(final int maxStackSize) {
      this(maxStackSize, null);
    }
    
    public ItemDef(final int maxStackSize, final Procedure1<? super MCEntityValidator.NBTData> checker) {
      this.maxStackSize = maxStackSize;
      this.checker = checker;
    }
    
    public void check(final NBTCompound nbt) {
      if (this.checker!=null) {
        MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(nbt);
        this.checker.apply(_nBTData);
      }
    }
    
    public void check(final MCEntityValidator.NBTData maks) {
      if (this.checker!=null) {
        this.checker.apply(maks);
      }
    }
  }
  
  public enum Possibility {
    YES,
    
    MAYBE,
    
    NO;
  }
  
  public static class Predicates {
    private interface NBTValuePredicate {
      boolean test(final NBTValue it);
      
      default MCEntityValidator.Predicates.NBTValuePredicate operator_or(final MCEntityValidator.Predicates.NBTValuePredicate pred) {
        return new MCEntityValidator.Predicates.OrPredicate(this, pred);
      }
      
      default MCEntityValidator.Predicates.NBTValuePredicate operator_and(final MCEntityValidator.Predicates.NBTValuePredicate pred) {
        return new MCEntityValidator.Predicates.AndPredicate(this, pred);
      }
      
      default MCEntityValidator.Predicates.NBTValuePredicate operator_not() {
        return new MCEntityValidator.Predicates.NegatedPredicate(this);
      }
      
      String getExpected();
      
      default MCEntityValidator.Predicates.NBTValuePredicate withExpected(final String expectedStr) {
        final MCEntityValidator.Predicates.NBTValuePredicate $this = this;
        return new MCEntityValidator.Predicates.NBTValuePredicate() {
          @Override
          public boolean test(final NBTValue value) {
            return $this.test(value);
          }
          
          @Override
          public String getExpected() {
            return expectedStr;
          }
        };
      }
    }
    
    @FinalFieldsConstructor
    private static class NegatedPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      private final MCEntityValidator.Predicates.NBTValuePredicate predicate;
      
      @Override
      public boolean test(final NBTValue it) {
        boolean _test = this.predicate.test(it);
        return (!_test);
      }
      
      @Override
      public MCEntityValidator.Predicates.NBTValuePredicate operator_not() {
        return this.predicate;
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("anything except ");
        {
          if ((((this.predicate instanceof MCEntityValidator.Predicates.AndPredicate) || (this.predicate instanceof MCEntityValidator.Predicates.OrPredicate)) || (this.predicate instanceof MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate2))) {
            _builder.append("(");
            String _expected = this.predicate.getExpected();
            _builder.append(_expected);
            _builder.append(")");
          } else {
            String _expected_1 = this.predicate.getExpected();
            _builder.append(_expected_1);
          }
        }
        return _builder.toString();
      }
      
      public NegatedPredicate(final MCEntityValidator.Predicates.NBTValuePredicate predicate) {
        super();
        this.predicate = predicate;
      }
    }
    
    @FinalFieldsConstructor
    private static class AndPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      private final MCEntityValidator.Predicates.NBTValuePredicate first;
      
      private final MCEntityValidator.Predicates.NBTValuePredicate second;
      
      @Override
      public boolean test(final NBTValue it) {
        return (this.first.test(it) && this.second.test(it));
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _predStr = MCEntityValidator.Predicates.AndPredicate.predStr(this.first);
        _builder.append(_predStr);
        _builder.append(" and ");
        CharSequence _predStr_1 = MCEntityValidator.Predicates.AndPredicate.predStr(this.second);
        _builder.append(_predStr_1);
        return _builder.toString();
      }
      
      public static CharSequence predStr(final MCEntityValidator.Predicates.NBTValuePredicate pred) {
        StringConcatenation _builder = new StringConcatenation();
        {
          if (((pred instanceof MCEntityValidator.Predicates.OrPredicate) || (pred instanceof MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate2))) {
            _builder.append("(");
            String _expected = pred.getExpected();
            _builder.append(_expected);
            _builder.append(")");
          } else {
            String _expected_1 = pred.getExpected();
            _builder.append(_expected_1);
          }
        }
        return _builder;
      }
      
      public AndPredicate(final MCEntityValidator.Predicates.NBTValuePredicate first, final MCEntityValidator.Predicates.NBTValuePredicate second) {
        super();
        this.first = first;
        this.second = second;
      }
    }
    
    @FinalFieldsConstructor
    private static class OrPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      private final MCEntityValidator.Predicates.NBTValuePredicate first;
      
      private final MCEntityValidator.Predicates.NBTValuePredicate second;
      
      @Override
      public boolean test(final NBTValue it) {
        return (this.first.test(it) || this.second.test(it));
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        CharSequence _predStr = MCEntityValidator.Predicates.OrPredicate.predStr(this.first);
        _builder.append(_predStr);
        _builder.append(" or ");
        CharSequence _predStr_1 = MCEntityValidator.Predicates.OrPredicate.predStr(this.second);
        _builder.append(_predStr_1);
        return _builder.toString();
      }
      
      public static CharSequence predStr(final MCEntityValidator.Predicates.NBTValuePredicate pred) {
        StringConcatenation _builder = new StringConcatenation();
        {
          if ((pred instanceof MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate2)) {
            _builder.append("(");
            String _expected = ((MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate2)pred).getExpected();
            _builder.append(_expected);
            _builder.append(")");
          } else {
            String _expected_1 = pred.getExpected();
            _builder.append(_expected_1);
          }
        }
        return _builder;
      }
      
      public OrPredicate(final MCEntityValidator.Predicates.NBTValuePredicate first, final MCEntityValidator.Predicates.NBTValuePredicate second) {
        super();
        this.first = first;
        this.second = second;
      }
    }
    
    @FinalFieldsConstructor
    public static class BytePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class ExactBytePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final byte exact;
        
        protected boolean _test(final NBTInt it) {
          return (this.isLenient && (it.getValue() == this.exact));
        }
        
        protected boolean _test(final NBTBool it) {
          return (this.isLenient && (it.isValue() == (this.exact != 0)));
        }
        
        protected boolean _test(final NBTByte it) {
          byte _value = it.getValue();
          return (_value == this.exact);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.BytePredicate.ExactBytePredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.BytePredicate.ExactBytePredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.BytePredicate.ExactBytePredicate(lenient, this.exact);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a byte equal to ");
          _builder.append(this.exact);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTByte) {
            return _test((NBTByte)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTBool) {
            return _test((NBTBool)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public ExactBytePredicate(final boolean isLenient, final byte exact) {
          super();
          this.isLenient = isLenient;
          this.exact = exact;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinBytePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final byte min;
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() <= Byte.MAX_VALUE));
        }
        
        protected boolean _test(final NBTBool it) {
          boolean _and = false;
          if (!this.isLenient) {
            _and = false;
          } else {
            boolean _xifexpression = false;
            boolean _isValue = it.isValue();
            if (_isValue) {
              _xifexpression = (this.min <= 1);
            } else {
              _xifexpression = (this.min <= 0);
            }
            _and = _xifexpression;
          }
          return _and;
        }
        
        protected boolean _test(final NBTByte it) {
          byte _value = it.getValue();
          return (_value >= this.min);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.BytePredicate.MinBytePredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.BytePredicate.MinBytePredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.BytePredicate.MinBytePredicate(lenient, this.min);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate max(final int max) {
          return new MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate(this.isLenient, this.min, ((byte) max));
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a byte >= ");
          _builder.append(this.min);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTByte) {
            return _test((NBTByte)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTBool) {
            return _test((NBTBool)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinBytePredicate(final boolean isLenient, final byte min) {
          super();
          this.isLenient = isLenient;
          this.min = min;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxBytePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final byte max;
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= Byte.MIN_VALUE)) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTBool it) {
          boolean _and = false;
          if (!this.isLenient) {
            _and = false;
          } else {
            boolean _xifexpression = false;
            boolean _isValue = it.isValue();
            if (_isValue) {
              _xifexpression = (this.max >= 1);
            } else {
              _xifexpression = (this.max >= 0);
            }
            _and = _xifexpression;
          }
          return _and;
        }
        
        protected boolean _test(final NBTByte it) {
          byte _value = it.getValue();
          return (_value <= this.max);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.BytePredicate.MaxBytePredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.BytePredicate.MaxBytePredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.BytePredicate.MaxBytePredicate(lenient, this.max);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate min(final int min) {
          return new MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate(this.isLenient, ((byte) min), this.max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a byte <= ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTByte) {
            return _test((NBTByte)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTBool) {
            return _test((NBTBool)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxBytePredicate(final boolean isLenient, final byte max) {
          super();
          this.isLenient = isLenient;
          this.max = max;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeBytePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final byte min;
        
        private final byte max;
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTBool it) {
          boolean _and = false;
          if (!this.isLenient) {
            _and = false;
          } else {
            boolean _xifexpression = false;
            boolean _isValue = it.isValue();
            if (_isValue) {
              _xifexpression = ((1 >= this.min) && (1 <= this.max));
            } else {
              _xifexpression = ((0 >= this.min) && (0 <= this.max));
            }
            _and = _xifexpression;
          }
          return _and;
        }
        
        protected boolean _test(final NBTByte it) {
          return ((it.getValue() >= this.min) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate(lenient, this.min, this.max);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a byte between ");
          _builder.append(this.min);
          _builder.append(" and ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTByte) {
            return _test((NBTByte)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTBool) {
            return _test((NBTBool)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeBytePredicate(final boolean isLenient, final byte min, final byte max) {
          super();
          this.isLenient = isLenient;
          this.min = min;
          this.max = max;
        }
      }
      
      private final boolean isLenient;
      
      protected boolean _test(final NBTInt it) {
        return ((this.isLenient && (it.getValue() >= Byte.MIN_VALUE)) && (it.getValue() <= Byte.MAX_VALUE));
      }
      
      protected boolean _test(final NBTValue it) {
        return ((it instanceof NBTByte) || (this.isLenient && (it instanceof NBTBool)));
      }
      
      public MCEntityValidator.Predicates.BytePredicate lenient(final boolean lenient) {
        MCEntityValidator.Predicates.BytePredicate _xifexpression = null;
        if (lenient) {
          _xifexpression = MCEntityValidator.predicates._isByte;
        } else {
          _xifexpression = MCEntityValidator.predicates._isByteExact;
        }
        return _xifexpression;
      }
      
      public MCEntityValidator.Predicates.BytePredicate.ExactBytePredicate exact(final int exact) {
        return new MCEntityValidator.Predicates.BytePredicate.ExactBytePredicate(this.isLenient, ((byte) exact));
      }
      
      public MCEntityValidator.Predicates.BytePredicate.MinBytePredicate min(final int min) {
        return new MCEntityValidator.Predicates.BytePredicate.MinBytePredicate(this.isLenient, ((byte) min));
      }
      
      public MCEntityValidator.Predicates.BytePredicate.MaxBytePredicate max(final int max) {
        return new MCEntityValidator.Predicates.BytePredicate.MaxBytePredicate(this.isLenient, ((byte) max));
      }
      
      public MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate range(final int min, final int max) {
        return new MCEntityValidator.Predicates.BytePredicate.RangeBytePredicate(this.isLenient, ((byte) min), ((byte) max));
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a byte");
        return _builder.toString();
      }
      
      public boolean test(final NBTValue it) {
        if (it instanceof NBTInt) {
          return _test((NBTInt)it);
        } else if (it != null) {
          return _test(it);
        } else {
          throw new IllegalArgumentException("Unhandled parameter types: " +
            Arrays.<Object>asList(it).toString());
        }
      }
      
      public BytePredicate(final boolean isLenient) {
        super();
        this.isLenient = isLenient;
      }
    }
    
    @FinalFieldsConstructor
    public static class ShortPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class ExactShortPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final short exact;
        
        protected boolean _test(final NBTInt it) {
          return (this.isLenient && (it.getValue() == this.exact));
        }
        
        protected boolean _test(final NBTShort it) {
          short _value = it.getValue();
          return (_value == this.exact);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ShortPredicate.ExactShortPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.ShortPredicate.ExactShortPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.ShortPredicate.ExactShortPredicate(lenient, this.exact);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a short equal to ");
          _builder.append(this.exact);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTShort) {
            return _test((NBTShort)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public ExactShortPredicate(final boolean isLenient, final short exact) {
          super();
          this.isLenient = isLenient;
          this.exact = exact;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinShortPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final short min;
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() <= Short.MAX_VALUE));
        }
        
        protected boolean _test(final NBTShort it) {
          short _value = it.getValue();
          return (_value >= this.min);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ShortPredicate.MinShortPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.ShortPredicate.MinShortPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.ShortPredicate.MinShortPredicate(lenient, this.min);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate max(final int max) {
          return new MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate(this.isLenient, this.min, ((short) max));
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a short >= ");
          _builder.append(this.min);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTShort) {
            return _test((NBTShort)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinShortPredicate(final boolean isLenient, final short min) {
          super();
          this.isLenient = isLenient;
          this.min = min;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxShortPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final short max;
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= Short.MIN_VALUE)) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTShort it) {
          short _value = it.getValue();
          return (_value <= this.max);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ShortPredicate.MaxShortPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.ShortPredicate.MaxShortPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.ShortPredicate.MaxShortPredicate(lenient, this.max);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate min(final int min) {
          return new MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate(this.isLenient, ((short) min), this.max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a short <= ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTShort) {
            return _test((NBTShort)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxShortPredicate(final boolean isLenient, final short max) {
          super();
          this.isLenient = isLenient;
          this.max = max;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeShortPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final short min;
        
        private final short max;
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTShort it) {
          return ((it.getValue() >= this.min) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate(lenient, this.min, this.max);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a short between ");
          _builder.append(this.min);
          _builder.append(" and ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTShort) {
            return _test((NBTShort)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeShortPredicate(final boolean isLenient, final short min, final short max) {
          super();
          this.isLenient = isLenient;
          this.min = min;
          this.max = max;
        }
      }
      
      private final boolean isLenient;
      
      protected boolean _test(final NBTInt it) {
        return ((this.isLenient && (it.getValue() >= Short.MIN_VALUE)) && (it.getValue() <= Short.MAX_VALUE));
      }
      
      protected boolean _test(final NBTValue it) {
        return (it instanceof NBTShort);
      }
      
      public MCEntityValidator.Predicates.ShortPredicate lenient(final boolean lenient) {
        MCEntityValidator.Predicates.ShortPredicate _xifexpression = null;
        if (lenient) {
          _xifexpression = MCEntityValidator.predicates._isShort;
        } else {
          _xifexpression = MCEntityValidator.predicates._isShortExact;
        }
        return _xifexpression;
      }
      
      public MCEntityValidator.Predicates.ShortPredicate.ExactShortPredicate exact(final int exact) {
        return new MCEntityValidator.Predicates.ShortPredicate.ExactShortPredicate(this.isLenient, ((short) exact));
      }
      
      public MCEntityValidator.Predicates.ShortPredicate.MinShortPredicate min(final int min) {
        return new MCEntityValidator.Predicates.ShortPredicate.MinShortPredicate(this.isLenient, ((short) min));
      }
      
      public MCEntityValidator.Predicates.ShortPredicate.MaxShortPredicate max(final int max) {
        return new MCEntityValidator.Predicates.ShortPredicate.MaxShortPredicate(this.isLenient, ((short) max));
      }
      
      public MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate range(final int min, final int max) {
        return new MCEntityValidator.Predicates.ShortPredicate.RangeShortPredicate(this.isLenient, ((short) min), ((short) max));
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a short");
        return _builder.toString();
      }
      
      public boolean test(final NBTValue it) {
        if (it instanceof NBTInt) {
          return _test((NBTInt)it);
        } else if (it != null) {
          return _test(it);
        } else {
          throw new IllegalArgumentException("Unhandled parameter types: " +
            Arrays.<Object>asList(it).toString());
        }
      }
      
      public ShortPredicate(final boolean isLenient) {
        super();
        this.isLenient = isLenient;
      }
    }
    
    public static class IntPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class ExactIntPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int exact;
        
        protected boolean _test(final NBTInt it) {
          int _value = it.getValue();
          return (_value == this.exact);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an int equal to ");
          _builder.append(this.exact);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public ExactIntPredicate(final int exact) {
          super();
          this.exact = exact;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinIntPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int min;
        
        protected boolean _test(final NBTInt it) {
          int _value = it.getValue();
          return (_value >= this.min);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.IntPredicate.RangeIntPredicate max(final int max) {
          return new MCEntityValidator.Predicates.IntPredicate.RangeIntPredicate(this.min, max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an int >= ");
          _builder.append(this.min);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinIntPredicate(final int min) {
          super();
          this.min = min;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxIntPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int max;
        
        protected boolean _test(final NBTInt it) {
          int _value = it.getValue();
          return (_value <= this.max);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.IntPredicate.RangeIntPredicate min(final int min) {
          return new MCEntityValidator.Predicates.IntPredicate.RangeIntPredicate(min, this.max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an int <= ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxIntPredicate(final int max) {
          super();
          this.max = max;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeIntPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int min;
        
        private final int max;
        
        protected boolean _test(final NBTInt it) {
          return ((it.getValue() >= this.min) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an int between ");
          _builder.append(this.min);
          _builder.append(" and ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeIntPredicate(final int min, final int max) {
          super();
          this.min = min;
          this.max = max;
        }
      }
      
      @Override
      public boolean test(final NBTValue it) {
        return (it instanceof NBTInt);
      }
      
      public MCEntityValidator.Predicates.IntPredicate.ExactIntPredicate exact(final int exact) {
        return new MCEntityValidator.Predicates.IntPredicate.ExactIntPredicate(exact);
      }
      
      public MCEntityValidator.Predicates.IntPredicate.MinIntPredicate min(final int min) {
        return new MCEntityValidator.Predicates.IntPredicate.MinIntPredicate(min);
      }
      
      public MCEntityValidator.Predicates.IntPredicate.MaxIntPredicate max(final int max) {
        return new MCEntityValidator.Predicates.IntPredicate.MaxIntPredicate(max);
      }
      
      public MCEntityValidator.Predicates.IntPredicate.RangeIntPredicate range(final int min, final int max) {
        return new MCEntityValidator.Predicates.IntPredicate.RangeIntPredicate(min, max);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("an int");
        return _builder.toString();
      }
    }
    
    @FinalFieldsConstructor
    public static class LongPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class ExactLongPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final long exact;
        
        protected boolean _test(final NBTLong it) {
          long _value = it.getValue();
          return (_value == this.exact);
        }
        
        protected boolean _test(final NBTInt it) {
          return (this.isLenient && (it.getValue() == this.exact));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.LongPredicate.ExactLongPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.LongPredicate.ExactLongPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.LongPredicate.ExactLongPredicate(lenient, this.exact);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a long equal to ");
          _builder.append(this.exact);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTLong) {
            return _test((NBTLong)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public ExactLongPredicate(final boolean isLenient, final long exact) {
          super();
          this.isLenient = isLenient;
          this.exact = exact;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinLongPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final long min;
        
        protected boolean _test(final NBTLong it) {
          long _value = it.getValue();
          return (_value >= this.min);
        }
        
        protected boolean _test(final NBTInt it) {
          return (this.isLenient && (it.getValue() >= this.min));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.LongPredicate.MinLongPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.LongPredicate.MinLongPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.LongPredicate.MinLongPredicate(lenient, this.min);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate max(final long max) {
          return new MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate(this.isLenient, this.min, max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a long >= ");
          _builder.append(this.min);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTLong) {
            return _test((NBTLong)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinLongPredicate(final boolean isLenient, final long min) {
          super();
          this.isLenient = isLenient;
          this.min = min;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxLongPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final long max;
        
        protected boolean _test(final NBTLong it) {
          long _value = it.getValue();
          return (_value <= this.max);
        }
        
        protected boolean _test(final NBTInt it) {
          return (this.isLenient && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.LongPredicate.MaxLongPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.LongPredicate.MaxLongPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.LongPredicate.MaxLongPredicate(lenient, this.max);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate min(final long min) {
          return new MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate(this.isLenient, min, this.max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a long <= ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTLong) {
            return _test((NBTLong)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxLongPredicate(final boolean isLenient, final long max) {
          super();
          this.isLenient = isLenient;
          this.max = max;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeLongPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final long min;
        
        private final long max;
        
        protected boolean _test(final NBTLong it) {
          return ((it.getValue() >= this.min) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate(lenient, this.min, this.max);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a long between ");
          _builder.append(this.min);
          _builder.append(" and ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it instanceof NBTLong) {
            return _test((NBTLong)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeLongPredicate(final boolean isLenient, final long min, final long max) {
          super();
          this.isLenient = isLenient;
          this.min = min;
          this.max = max;
        }
      }
      
      private final boolean isLenient;
      
      @Override
      public boolean test(final NBTValue it) {
        return ((it instanceof NBTLong) || (this.isLenient && (it instanceof NBTInt)));
      }
      
      public MCEntityValidator.Predicates.LongPredicate lenient(final boolean lenient) {
        MCEntityValidator.Predicates.LongPredicate _xifexpression = null;
        if (lenient) {
          _xifexpression = MCEntityValidator.predicates._isLong;
        } else {
          _xifexpression = MCEntityValidator.predicates._isLongExact;
        }
        return _xifexpression;
      }
      
      public MCEntityValidator.Predicates.LongPredicate.ExactLongPredicate exact(final long exact) {
        return new MCEntityValidator.Predicates.LongPredicate.ExactLongPredicate(this.isLenient, exact);
      }
      
      public MCEntityValidator.Predicates.LongPredicate.MinLongPredicate min(final long min) {
        return new MCEntityValidator.Predicates.LongPredicate.MinLongPredicate(this.isLenient, min);
      }
      
      public MCEntityValidator.Predicates.LongPredicate.MaxLongPredicate max(final long max) {
        return new MCEntityValidator.Predicates.LongPredicate.MaxLongPredicate(this.isLenient, max);
      }
      
      public MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate range(final long min, final long max) {
        return new MCEntityValidator.Predicates.LongPredicate.RangeLongPredicate(this.isLenient, min, max);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a long");
        return _builder.toString();
      }
      
      public LongPredicate(final boolean isLenient) {
        super();
        this.isLenient = isLenient;
      }
    }
    
    @FinalFieldsConstructor
    public static class FloatPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class ExactFloatPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final float exact;
        
        protected boolean _test(final NBTDouble it) {
          return (this.isLenient && (it.getValue() == this.exact));
        }
        
        protected boolean _test(final NBTFloat it) {
          float _value = it.getValue();
          return (_value == this.exact);
        }
        
        protected boolean _test(final NBTInt it) {
          return (this.isLenient && (it.getValue() == this.exact));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.FloatPredicate.ExactFloatPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.FloatPredicate.ExactFloatPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.FloatPredicate.ExactFloatPredicate(lenient, this.exact);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a float equal to ");
          _builder.append(this.exact);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTDouble) {
            return _test((NBTDouble)it);
          } else if (it instanceof NBTFloat) {
            return _test((NBTFloat)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public ExactFloatPredicate(final boolean isLenient, final float exact) {
          super();
          this.isLenient = isLenient;
          this.exact = exact;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinFloatPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final float min;
        
        protected boolean _test(final NBTDouble it) {
          return ((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() == ((float) it.getValue())));
        }
        
        protected boolean _test(final NBTFloat it) {
          float _value = it.getValue();
          return (_value >= this.min);
        }
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() == ((float) it.getValue())));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.FloatPredicate.MinFloatPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.FloatPredicate.MinFloatPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.FloatPredicate.MinFloatPredicate(lenient, this.min);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate max(final float max) {
          return new MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate(this.isLenient, this.min, max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a float >= ");
          _builder.append(this.min);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTDouble) {
            return _test((NBTDouble)it);
          } else if (it instanceof NBTFloat) {
            return _test((NBTFloat)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinFloatPredicate(final boolean isLenient, final float min) {
          super();
          this.isLenient = isLenient;
          this.min = min;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxFloatPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final float max;
        
        protected boolean _test(final NBTDouble it) {
          return ((this.isLenient && (it.getValue() <= this.max)) && (it.getValue() == ((float) it.getValue())));
        }
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() <= this.max)) && (it.getValue() == ((float) it.getValue())));
        }
        
        protected boolean _test(final NBTFloat it) {
          float _value = it.getValue();
          return (_value <= this.max);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.FloatPredicate.MaxFloatPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.FloatPredicate.MaxFloatPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.FloatPredicate.MaxFloatPredicate(lenient, this.max);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate min(final float min) {
          return new MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate(this.isLenient, min, this.max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a float <= ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTDouble) {
            return _test((NBTDouble)it);
          } else if (it instanceof NBTFloat) {
            return _test((NBTFloat)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxFloatPredicate(final boolean isLenient, final float max) {
          super();
          this.isLenient = isLenient;
          this.max = max;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeFloatPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final float min;
        
        private final float max;
        
        protected boolean _test(final NBTDouble it) {
          return (((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() <= this.max)) && (it.getValue() == ((float) it.getValue())));
        }
        
        protected boolean _test(final NBTInt it) {
          return (((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() <= this.max)) && (it.getValue() == ((float) it.getValue())));
        }
        
        protected boolean _test(final NBTFloat it) {
          return ((it.getValue() >= this.min) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate(lenient, this.min, this.max);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a float between ");
          _builder.append(this.min);
          _builder.append(" and ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTDouble) {
            return _test((NBTDouble)it);
          } else if (it instanceof NBTFloat) {
            return _test((NBTFloat)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeFloatPredicate(final boolean isLenient, final float min, final float max) {
          super();
          this.isLenient = isLenient;
          this.min = min;
          this.max = max;
        }
      }
      
      private final boolean isLenient;
      
      protected boolean _test(final NBTDouble it) {
        return (this.isLenient && (it.getValue() == ((float) it.getValue())));
      }
      
      protected boolean _test(final NBTInt it) {
        return (this.isLenient && (it.getValue() == ((float) it.getValue())));
      }
      
      protected boolean _test(final NBTValue it) {
        return (it instanceof NBTFloat);
      }
      
      public MCEntityValidator.Predicates.FloatPredicate lenient(final boolean lenient) {
        MCEntityValidator.Predicates.FloatPredicate _xifexpression = null;
        if (lenient) {
          _xifexpression = MCEntityValidator.predicates._isFloat;
        } else {
          _xifexpression = MCEntityValidator.predicates._isFloatExact;
        }
        return _xifexpression;
      }
      
      public MCEntityValidator.Predicates.FloatPredicate.ExactFloatPredicate exact(final float exact) {
        return new MCEntityValidator.Predicates.FloatPredicate.ExactFloatPredicate(this.isLenient, exact);
      }
      
      public MCEntityValidator.Predicates.FloatPredicate.MinFloatPredicate min(final float min) {
        return new MCEntityValidator.Predicates.FloatPredicate.MinFloatPredicate(this.isLenient, min);
      }
      
      public MCEntityValidator.Predicates.FloatPredicate.MaxFloatPredicate max(final float max) {
        return new MCEntityValidator.Predicates.FloatPredicate.MaxFloatPredicate(this.isLenient, max);
      }
      
      public MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate range(final float min, final float max) {
        return new MCEntityValidator.Predicates.FloatPredicate.RangeFloatPredicate(this.isLenient, min, max);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a float");
        return _builder.toString();
      }
      
      public boolean test(final NBTValue it) {
        if (it instanceof NBTDouble) {
          return _test((NBTDouble)it);
        } else if (it instanceof NBTInt) {
          return _test((NBTInt)it);
        } else if (it != null) {
          return _test(it);
        } else {
          throw new IllegalArgumentException("Unhandled parameter types: " +
            Arrays.<Object>asList(it).toString());
        }
      }
      
      public FloatPredicate(final boolean isLenient) {
        super();
        this.isLenient = isLenient;
      }
    }
    
    @FinalFieldsConstructor
    public static class DoublePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class ExactDoublePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final double exact;
        
        protected boolean _test(final NBTDouble it) {
          double _value = it.getValue();
          return (_value == this.exact);
        }
        
        protected boolean _test(final NBTInt it) {
          return (this.isLenient && (it.getValue() == this.exact));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.DoublePredicate.ExactDoublePredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.DoublePredicate.ExactDoublePredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.DoublePredicate.ExactDoublePredicate(lenient, this.exact);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a double equal to ");
          _builder.append(this.exact);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTDouble) {
            return _test((NBTDouble)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public ExactDoublePredicate(final boolean isLenient, final double exact) {
          super();
          this.isLenient = isLenient;
          this.exact = exact;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinDoublePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final double min;
        
        protected boolean _test(final NBTDouble it) {
          double _value = it.getValue();
          return (_value >= this.min);
        }
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() == ((double) it.getValue())));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.DoublePredicate.MinDoublePredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.DoublePredicate.MinDoublePredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.DoublePredicate.MinDoublePredicate(lenient, this.min);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate max(final double max) {
          return new MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate(this.isLenient, this.min, max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a double >= ");
          _builder.append(this.min);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTDouble) {
            return _test((NBTDouble)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinDoublePredicate(final boolean isLenient, final double min) {
          super();
          this.isLenient = isLenient;
          this.min = min;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxDoublePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final double max;
        
        protected boolean _test(final NBTDouble it) {
          double _value = it.getValue();
          return (_value <= this.max);
        }
        
        protected boolean _test(final NBTInt it) {
          return ((this.isLenient && (it.getValue() <= this.max)) && (it.getValue() == ((double) it.getValue())));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.DoublePredicate.MaxDoublePredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.DoublePredicate.MaxDoublePredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.DoublePredicate.MaxDoublePredicate(lenient, this.max);
          }
          return _xifexpression;
        }
        
        public MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate min(final double min) {
          return new MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate(this.isLenient, min, this.max);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a double <= ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTDouble) {
            return _test((NBTDouble)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxDoublePredicate(final boolean isLenient, final double max) {
          super();
          this.isLenient = isLenient;
          this.max = max;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeDoublePredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final boolean isLenient;
        
        private final double min;
        
        private final double max;
        
        protected boolean _test(final NBTDouble it) {
          return ((it.getValue() >= this.min) && (it.getValue() <= this.max));
        }
        
        protected boolean _test(final NBTInt it) {
          return (((this.isLenient && (it.getValue() >= this.min)) && (it.getValue() <= this.max)) && (it.getValue() == ((double) it.getValue())));
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate lenient(final boolean lenient) {
          MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate _xifexpression = null;
          if ((Boolean.valueOf(lenient) == Boolean.valueOf(this.isLenient))) {
            _xifexpression = this;
          } else {
            _xifexpression = new MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate(lenient, this.min, this.max);
          }
          return _xifexpression;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a double between ");
          _builder.append(this.min);
          _builder.append(" and ");
          _builder.append(this.max);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTDouble) {
            return _test((NBTDouble)it);
          } else if (it instanceof NBTInt) {
            return _test((NBTInt)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeDoublePredicate(final boolean isLenient, final double min, final double max) {
          super();
          this.isLenient = isLenient;
          this.min = min;
          this.max = max;
        }
      }
      
      private final boolean isLenient;
      
      protected boolean _test(final NBTInt it) {
        return (this.isLenient && (it.getValue() == ((double) it.getValue())));
      }
      
      protected boolean _test(final NBTValue it) {
        return (it instanceof NBTDouble);
      }
      
      protected boolean _test(final Void it) {
        return false;
      }
      
      public MCEntityValidator.Predicates.DoublePredicate lenient(final boolean lenient) {
        MCEntityValidator.Predicates.DoublePredicate _xifexpression = null;
        if (lenient) {
          _xifexpression = MCEntityValidator.predicates._isDouble;
        } else {
          _xifexpression = MCEntityValidator.predicates._isDoubleExact;
        }
        return _xifexpression;
      }
      
      public MCEntityValidator.Predicates.DoublePredicate.ExactDoublePredicate exact(final double exact) {
        return new MCEntityValidator.Predicates.DoublePredicate.ExactDoublePredicate(this.isLenient, exact);
      }
      
      public MCEntityValidator.Predicates.DoublePredicate.MinDoublePredicate min(final double min) {
        return new MCEntityValidator.Predicates.DoublePredicate.MinDoublePredicate(this.isLenient, min);
      }
      
      public MCEntityValidator.Predicates.DoublePredicate.MaxDoublePredicate max(final double max) {
        return new MCEntityValidator.Predicates.DoublePredicate.MaxDoublePredicate(this.isLenient, max);
      }
      
      public MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate range(final double min, final double max) {
        return new MCEntityValidator.Predicates.DoublePredicate.RangeDoublePredicate(this.isLenient, min, max);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a double");
        return _builder.toString();
      }
      
      public boolean test(final NBTValue it) {
        if (it instanceof NBTInt) {
          return _test((NBTInt)it);
        } else if (it != null) {
          return _test(it);
        } else if (it == null) {
          return _test((Void)null);
        } else {
          throw new IllegalArgumentException("Unhandled parameter types: " +
            Arrays.<Object>asList(it).toString());
        }
      }
      
      public DoublePredicate(final boolean isLenient) {
        super();
        this.isLenient = isLenient;
      }
    }
    
    public static class StringPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class EqualsStringPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final String exact;
        
        protected boolean _test(final NBTString it) {
          String _value = it.getValue();
          return Objects.equal(_value, this.exact);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          return MCEntityValidator.Predicates.StringPredicate.stringName(this.exact);
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTString) {
            return _test((NBTString)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public EqualsStringPredicate(final String exact) {
          super();
          this.exact = exact;
        }
      }
      
      @FinalFieldsConstructor
      public static class EqualsStringPredicate2 implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final Set<String> strs;
        
        protected boolean _test(final NBTString it) {
          return this.strs.contains(it.getValue());
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          String _xblockexpression = null;
          {
            final StringBuilder sb = new StringBuilder();
            boolean first = true;
            int size = this.strs.size();
            boolean _contains = this.strs.contains("");
            if (_contains) {
              if ((size > 1)) {
                sb.append("either ");
              }
              sb.append("the empty string");
              first = false;
              size--;
            }
            boolean first2 = true;
            for (final String str : this.strs) {
              boolean _isEmpty = str.isEmpty();
              boolean _not = (!_isEmpty);
              if (_not) {
                if (first) {
                  first = false;
                } else {
                  sb.append(" or ");
                }
                if (first2) {
                  if ((size > 1)) {
                    sb.append("one of the strings ");
                  } else {
                    sb.append("the string");
                  }
                  first2 = false;
                }
                sb.append("\"").append(Strings.convertToJavaString(str, false)).append("\"");
              }
            }
            _xblockexpression = sb.toString();
          }
          return _xblockexpression;
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTString) {
            return _test((NBTString)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public EqualsStringPredicate2(final Set<String> strs) {
          super();
          this.strs = strs;
        }
      }
      
      @FinalFieldsConstructor
      public static class PrefixStringPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final String prefix;
        
        protected boolean _test(final NBTString it) {
          return it.getValue().startsWith(this.prefix);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          {
            boolean _isEmpty = this.prefix.isEmpty();
            if (_isEmpty) {
              _builder.append("a string");
            } else {
              _builder.append("a string beginnning with \"");
              String _convertToJavaString = Strings.convertToJavaString(this.prefix, false);
              _builder.append(_convertToJavaString);
              _builder.append("\"");
            }
          }
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTString) {
            return _test((NBTString)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public PrefixStringPredicate(final String prefix) {
          super();
          this.prefix = prefix;
        }
      }
      
      @FinalFieldsConstructor
      public static class SuffixStringPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final String suffix;
        
        protected boolean _test(final NBTString it) {
          return it.getValue().endsWith(this.suffix);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          {
            boolean _isEmpty = this.suffix.isEmpty();
            if (_isEmpty) {
              _builder.append("a string");
            } else {
              _builder.append("a string ending with \"");
              String _convertToJavaString = Strings.convertToJavaString(this.suffix, false);
              _builder.append(_convertToJavaString);
              _builder.append("\"");
            }
          }
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTString) {
            return _test((NBTString)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public SuffixStringPredicate(final String suffix) {
          super();
          this.suffix = suffix;
        }
      }
      
      public static class RegexStringPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final Matcher matcher;
        
        public RegexStringPredicate(final Pattern regex) {
          this.matcher = regex.matcher("");
        }
        
        protected boolean _test(final NBTString it) {
          return this.matcher.reset(it.getValue()).matches();
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a string matching the regular expression ");
          Pattern _pattern = this.matcher.pattern();
          _builder.append(_pattern);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTString) {
            return _test((NBTString)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
      }
      
      @Override
      public boolean test(final NBTValue it) {
        return (it instanceof NBTString);
      }
      
      public MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate equalTo(final String str) {
        return new MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate(str);
      }
      
      public MCEntityValidator.Predicates.NBTValuePredicate equalTo(final Set<String> strs) {
        MCEntityValidator.Predicates.NBTValuePredicate _xifexpression = null;
        boolean _isEmpty = strs.isEmpty();
        if (_isEmpty) {
          _xifexpression = this;
        } else {
          _xifexpression = new MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate2(strs);
        }
        return _xifexpression;
      }
      
      public MCEntityValidator.Predicates.NBTValuePredicate equalTo(final String... strs) {
        MCEntityValidator.Predicates.NBTValuePredicate _xifexpression = null;
        int _length = strs.length;
        boolean _greaterThan = (_length > 0);
        if (_greaterThan) {
          HashSet<String> _newHashSet = CollectionLiterals.<String>newHashSet(strs);
          _xifexpression = new MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate2(_newHashSet);
        } else {
          _xifexpression = this;
        }
        return _xifexpression;
      }
      
      public MCEntityValidator.Predicates.StringPredicate.PrefixStringPredicate startingWith(final String str) {
        return new MCEntityValidator.Predicates.StringPredicate.PrefixStringPredicate(str);
      }
      
      public MCEntityValidator.Predicates.StringPredicate.SuffixStringPredicate endingWith(final String str) {
        return new MCEntityValidator.Predicates.StringPredicate.SuffixStringPredicate(str);
      }
      
      public MCEntityValidator.Predicates.StringPredicate.RegexStringPredicate matching(final String regex) {
        Pattern _compile = Pattern.compile(regex);
        return new MCEntityValidator.Predicates.StringPredicate.RegexStringPredicate(_compile);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a string");
        return _builder.toString();
      }
      
      public static String stringName(final String str) {
        StringConcatenation _builder = new StringConcatenation();
        {
          boolean _isEmpty = str.isEmpty();
          if (_isEmpty) {
            _builder.append("the empty string");
          } else {
            _builder.append("the string \"");
            String _convertToJavaString = Strings.convertToJavaString(str, false);
            _builder.append(_convertToJavaString);
            _builder.append("\"");
          }
        }
        return _builder.toString();
      }
    }
    
    public interface IArrayPredicate extends MCEntityValidator.Predicates.NBTValuePredicate {
      class AndArrayPredicate extends MCEntityValidator.Predicates.AndPredicate implements MCEntityValidator.Predicates.IArrayPredicate {
        public AndArrayPredicate(final MCEntityValidator.Predicates.NBTValuePredicate first, final MCEntityValidator.Predicates.NBTValuePredicate second) {
          super(first, second);
        }
      }
      
      class OrArrayPredicate extends MCEntityValidator.Predicates.OrPredicate implements MCEntityValidator.Predicates.IArrayPredicate {
        public OrArrayPredicate(final MCEntityValidator.Predicates.NBTValuePredicate first, final MCEntityValidator.Predicates.NBTValuePredicate second) {
          super(first, second);
        }
      }
      
      default MCEntityValidator.Predicates.IArrayPredicate.AndArrayPredicate operator_and(final MCEntityValidator.Predicates.IArrayPredicate other) {
        return new MCEntityValidator.Predicates.IArrayPredicate.AndArrayPredicate(this, other);
      }
      
      default MCEntityValidator.Predicates.IArrayPredicate.OrArrayPredicate operator_or(final MCEntityValidator.Predicates.IArrayPredicate other) {
        return new MCEntityValidator.Predicates.IArrayPredicate.OrArrayPredicate(this, other);
      }
    }
    
    public interface IArrayPredicate2 extends MCEntityValidator.Predicates.IArrayPredicate3, MCEntityValidator.Predicates.IArrayPredicate4 {
      MCEntityValidator.Predicates.IArrayPredicate size(final int size);
      
      MCEntityValidator.Predicates.IArrayPredicate rangeSize(final int minSize, final int maxSize);
    }
    
    public interface IArrayPredicate3 extends MCEntityValidator.Predicates.IArrayPredicate {
      MCEntityValidator.Predicates.IArrayPredicate maxSize(final int maxSize);
    }
    
    public interface IArrayPredicate4 extends MCEntityValidator.Predicates.IArrayPredicate {
      MCEntityValidator.Predicates.IArrayPredicate minSize(final int minSize);
    }
    
    public static class ArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate2 {
      @FinalFieldsConstructor
      public static class SizeArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate {
        @FinalFieldsConstructor
        public static class SizeMatchingArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate {
          private final int exactSize;
          
          private final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate;
          
          protected boolean _test(final NBTArray it) {
            int _size = it.getElements().size();
            boolean _equals = (_size == this.exactSize);
            if (_equals) {
              EList<NBTValue> _elements = it.getElements();
              for (final NBTValue element : _elements) {
                boolean _test = this.elementPredicate.test(element);
                boolean _not = (!_test);
                if (_not) {
                  return false;
                }
              }
              return true;
            }
            return false;
          }
          
          protected boolean _test(final NBTValue it) {
            return false;
          }
          
          @Override
          public String getExpected() {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("an array of size ");
            _builder.append(this.exactSize);
            _builder.append(" where each element is ");
            String _expected = this.elementPredicate.getExpected();
            _builder.append(_expected);
            return _builder.toString();
          }
          
          public boolean test(final NBTValue it) {
            if (it instanceof NBTArray) {
              return _test((NBTArray)it);
            } else if (it != null) {
              return _test(it);
            } else {
              throw new IllegalArgumentException("Unhandled parameter types: " +
                Arrays.<Object>asList(it).toString());
            }
          }
          
          public SizeMatchingArrayPredicate(final int exactSize, final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
            super();
            this.exactSize = exactSize;
            this.elementPredicate = elementPredicate;
          }
        }
        
        private final int exactSize;
        
        protected boolean _test(final NBTArray it) {
          int _size = it.getElements().size();
          return (_size == this.exactSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ArrayPredicate.SizeArrayPredicate.SizeMatchingArrayPredicate matching(final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
          return new MCEntityValidator.Predicates.ArrayPredicate.SizeArrayPredicate.SizeMatchingArrayPredicate(this.exactSize, elementPredicate);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an array of size ");
          _builder.append(this.exactSize);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTArray) {
            return _test((NBTArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public SizeArrayPredicate(final int exactSize) {
          super();
          this.exactSize = exactSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinSizeArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate3 {
        @FinalFieldsConstructor
        public static class MinSizeMatchingArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate3 {
          private final int minSize;
          
          private final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate;
          
          protected boolean _test(final NBTArray it) {
            int _size = it.getElements().size();
            boolean _greaterEqualsThan = (_size >= this.minSize);
            if (_greaterEqualsThan) {
              EList<NBTValue> _elements = it.getElements();
              for (final NBTValue element : _elements) {
                boolean _test = this.elementPredicate.test(element);
                boolean _not = (!_test);
                if (_not) {
                  return false;
                }
              }
              return true;
            }
            return false;
          }
          
          protected boolean _test(final NBTValue it) {
            return false;
          }
          
          @Override
          public MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate.RangeSizeMatchingArrayPredicate maxSize(final int maxSize) {
            return new MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate.RangeSizeMatchingArrayPredicate(this.minSize, maxSize, this.elementPredicate);
          }
          
          @Override
          public String getExpected() {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("an array of at least ");
            _builder.append(this.minSize);
            _builder.append(" element");
            String _s = MCEntityValidator.s(this.minSize);
            _builder.append(_s);
            _builder.append(" where each element is ");
            String _expected = this.elementPredicate.getExpected();
            _builder.append(_expected);
            return _builder.toString();
          }
          
          public boolean test(final NBTValue it) {
            if (it instanceof NBTArray) {
              return _test((NBTArray)it);
            } else if (it != null) {
              return _test(it);
            } else {
              throw new IllegalArgumentException("Unhandled parameter types: " +
                Arrays.<Object>asList(it).toString());
            }
          }
          
          public MinSizeMatchingArrayPredicate(final int minSize, final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
            super();
            this.minSize = minSize;
            this.elementPredicate = elementPredicate;
          }
        }
        
        private final int minSize;
        
        protected boolean _test(final NBTArray it) {
          int _size = it.getElements().size();
          return (_size >= this.minSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate maxSize(final int maxSize) {
          return new MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate(this.minSize, maxSize);
        }
        
        public MCEntityValidator.Predicates.ArrayPredicate.MinSizeArrayPredicate.MinSizeMatchingArrayPredicate matching(final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
          return new MCEntityValidator.Predicates.ArrayPredicate.MinSizeArrayPredicate.MinSizeMatchingArrayPredicate(this.minSize, elementPredicate);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an array of at least ");
          _builder.append(this.minSize);
          _builder.append(" element");
          String _s = MCEntityValidator.s(this.minSize);
          _builder.append(_s);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTArray) {
            return _test((NBTArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinSizeArrayPredicate(final int minSize) {
          super();
          this.minSize = minSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxSizeArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate4 {
        @FinalFieldsConstructor
        public static class MaxSizeMatchingArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate4 {
          private final int maxSize;
          
          private final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate;
          
          protected boolean _test(final NBTArray it) {
            int _size = it.getElements().size();
            boolean _lessEqualsThan = (_size <= this.maxSize);
            if (_lessEqualsThan) {
              EList<NBTValue> _elements = it.getElements();
              for (final NBTValue element : _elements) {
                boolean _test = this.elementPredicate.test(element);
                boolean _not = (!_test);
                if (_not) {
                  return false;
                }
              }
              return true;
            }
            return false;
          }
          
          protected boolean _test(final NBTValue it) {
            return false;
          }
          
          @Override
          public MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate.RangeSizeMatchingArrayPredicate minSize(final int minSize) {
            return new MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate.RangeSizeMatchingArrayPredicate(minSize, this.maxSize, this.elementPredicate);
          }
          
          @Override
          public String getExpected() {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("an array of at most ");
            _builder.append(this.maxSize);
            _builder.append(" element");
            String _s = MCEntityValidator.s(this.maxSize);
            _builder.append(_s);
            _builder.append(" where each element is ");
            String _expected = this.elementPredicate.getExpected();
            _builder.append(_expected);
            return _builder.toString();
          }
          
          public boolean test(final NBTValue it) {
            if (it instanceof NBTArray) {
              return _test((NBTArray)it);
            } else if (it != null) {
              return _test(it);
            } else {
              throw new IllegalArgumentException("Unhandled parameter types: " +
                Arrays.<Object>asList(it).toString());
            }
          }
          
          public MaxSizeMatchingArrayPredicate(final int maxSize, final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
            super();
            this.maxSize = maxSize;
            this.elementPredicate = elementPredicate;
          }
        }
        
        private final int maxSize;
        
        protected boolean _test(final NBTArray it) {
          int _size = it.getElements().size();
          return (_size <= this.maxSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate minSize(final int minSize) {
          return new MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate(minSize, this.maxSize);
        }
        
        public MCEntityValidator.Predicates.ArrayPredicate.MaxSizeArrayPredicate.MaxSizeMatchingArrayPredicate matching(final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
          return new MCEntityValidator.Predicates.ArrayPredicate.MaxSizeArrayPredicate.MaxSizeMatchingArrayPredicate(this.maxSize, elementPredicate);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an array of at most ");
          _builder.append(this.maxSize);
          _builder.append(" element");
          String _s = MCEntityValidator.s(this.maxSize);
          _builder.append(_s);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTArray) {
            return _test((NBTArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxSizeArrayPredicate(final int maxSize) {
          super();
          this.maxSize = maxSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeSizeArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate {
        @FinalFieldsConstructor
        public static class RangeSizeMatchingArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate {
          private final int minSize;
          
          private final int maxSize;
          
          private final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate;
          
          protected boolean _test(final NBTArray it) {
            final int size = it.getElements().size();
            if (((size >= this.minSize) && (size <= this.maxSize))) {
              EList<NBTValue> _elements = it.getElements();
              for (final NBTValue element : _elements) {
                boolean _test = this.elementPredicate.test(element);
                boolean _not = (!_test);
                if (_not) {
                  return false;
                }
              }
              return true;
            }
            return false;
          }
          
          protected boolean _test(final NBTValue it) {
            return false;
          }
          
          @Override
          public String getExpected() {
            StringConcatenation _builder = new StringConcatenation();
            _builder.append("an array of size between ");
            _builder.append(this.minSize);
            _builder.append(" and ");
            _builder.append(this.maxSize);
            _builder.append(" where each element is ");
            String _expected = this.elementPredicate.getExpected();
            _builder.append(_expected);
            return _builder.toString();
          }
          
          public boolean test(final NBTValue it) {
            if (it instanceof NBTArray) {
              return _test((NBTArray)it);
            } else if (it != null) {
              return _test(it);
            } else {
              throw new IllegalArgumentException("Unhandled parameter types: " +
                Arrays.<Object>asList(it).toString());
            }
          }
          
          public RangeSizeMatchingArrayPredicate(final int minSize, final int maxSize, final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
            super();
            this.minSize = minSize;
            this.maxSize = maxSize;
            this.elementPredicate = elementPredicate;
          }
        }
        
        private final int minSize;
        
        private final int maxSize;
        
        protected boolean _test(final NBTArray it) {
          boolean _xblockexpression = false;
          {
            final int size = it.getElements().size();
            _xblockexpression = ((size >= this.minSize) && (size <= this.maxSize));
          }
          return _xblockexpression;
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate.RangeSizeMatchingArrayPredicate matching(final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
          return new MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate.RangeSizeMatchingArrayPredicate(this.minSize, this.maxSize, elementPredicate);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an array of size between ");
          _builder.append(this.minSize);
          _builder.append(" and ");
          _builder.append(this.maxSize);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTArray) {
            return _test((NBTArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeSizeArrayPredicate(final int minSize, final int maxSize) {
          super();
          this.minSize = minSize;
          this.maxSize = maxSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MatchingArrayPredicate implements MCEntityValidator.Predicates.IArrayPredicate {
        private final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate;
        
        protected boolean _test(final NBTArray it) {
          EList<NBTValue> _elements = it.getElements();
          for (final NBTValue element : _elements) {
            boolean _test = this.elementPredicate.test(element);
            boolean _not = (!_test);
            if (_not) {
              return false;
            }
          }
          return true;
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ArrayPredicate.MinSizeArrayPredicate.MinSizeMatchingArrayPredicate minSize(final int minSize) {
          return new MCEntityValidator.Predicates.ArrayPredicate.MinSizeArrayPredicate.MinSizeMatchingArrayPredicate(minSize, this.elementPredicate);
        }
        
        public MCEntityValidator.Predicates.ArrayPredicate.MaxSizeArrayPredicate.MaxSizeMatchingArrayPredicate maxSize(final int maxSize) {
          return new MCEntityValidator.Predicates.ArrayPredicate.MaxSizeArrayPredicate.MaxSizeMatchingArrayPredicate(maxSize, this.elementPredicate);
        }
        
        public MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate.RangeSizeMatchingArrayPredicate rangeSize(final int minSize, final int maxSize) {
          return new MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate.RangeSizeMatchingArrayPredicate(minSize, maxSize, this.elementPredicate);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an array where each element is ");
          String _expected = this.elementPredicate.getExpected();
          _builder.append(_expected);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTArray) {
            return _test((NBTArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MatchingArrayPredicate(final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
          super();
          this.elementPredicate = elementPredicate;
        }
      }
      
      @Override
      public boolean test(final NBTValue it) {
        return (it instanceof NBTArray);
      }
      
      @Override
      public MCEntityValidator.Predicates.ArrayPredicate.SizeArrayPredicate size(final int size) {
        return new MCEntityValidator.Predicates.ArrayPredicate.SizeArrayPredicate(size);
      }
      
      @Override
      public MCEntityValidator.Predicates.ArrayPredicate.MinSizeArrayPredicate minSize(final int minSize) {
        return new MCEntityValidator.Predicates.ArrayPredicate.MinSizeArrayPredicate(minSize);
      }
      
      @Override
      public MCEntityValidator.Predicates.ArrayPredicate.MaxSizeArrayPredicate maxSize(final int maxSize) {
        return new MCEntityValidator.Predicates.ArrayPredicate.MaxSizeArrayPredicate(maxSize);
      }
      
      @Override
      public MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate rangeSize(final int minSize, final int maxSize) {
        return new MCEntityValidator.Predicates.ArrayPredicate.RangeSizeArrayPredicate(minSize, maxSize);
      }
      
      public MCEntityValidator.Predicates.ArrayPredicate.MatchingArrayPredicate matching(final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
        return new MCEntityValidator.Predicates.ArrayPredicate.MatchingArrayPredicate(elementPredicate);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("an array");
        return _builder.toString();
      }
    }
    
    public static class IntArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class SizeIntArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int exactSize;
        
        protected boolean _test(final NBTIntArray it) {
          int _size = it.getElements().size();
          return (_size == this.exactSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an int array of size ");
          _builder.append(this.exactSize);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTIntArray) {
            return _test((NBTIntArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public SizeIntArrayPredicate(final int exactSize) {
          super();
          this.exactSize = exactSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinSizeIntArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int minSize;
        
        protected boolean _test(final NBTIntArray it) {
          int _size = it.getElements().size();
          return (_size >= this.minSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.IntArrayPredicate.RangeSizeIntArrayPredicate maxSize(final int maxSize) {
          return new MCEntityValidator.Predicates.IntArrayPredicate.RangeSizeIntArrayPredicate(this.minSize, maxSize);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an int array of at least ");
          _builder.append(this.minSize);
          _builder.append(" int");
          String _s = MCEntityValidator.s(this.minSize);
          _builder.append(_s);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTIntArray) {
            return _test((NBTIntArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinSizeIntArrayPredicate(final int minSize) {
          super();
          this.minSize = minSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxSizeIntArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int maxSize;
        
        protected boolean _test(final NBTIntArray it) {
          int _size = it.getElements().size();
          return (_size <= this.maxSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.IntArrayPredicate.RangeSizeIntArrayPredicate minSize(final int minSize) {
          return new MCEntityValidator.Predicates.IntArrayPredicate.RangeSizeIntArrayPredicate(minSize, this.maxSize);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an int array of at most ");
          _builder.append(this.maxSize);
          _builder.append(" int");
          String _s = MCEntityValidator.s(this.maxSize);
          _builder.append(_s);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTIntArray) {
            return _test((NBTIntArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxSizeIntArrayPredicate(final int maxSize) {
          super();
          this.maxSize = maxSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeSizeIntArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int minSize;
        
        private final int maxSize;
        
        protected boolean _test(final NBTArray it) {
          boolean _xblockexpression = false;
          {
            final int size = it.getElements().size();
            _xblockexpression = ((size >= this.minSize) && (size <= this.maxSize));
          }
          return _xblockexpression;
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("an int array of size between ");
          _builder.append(this.minSize);
          _builder.append(" and ");
          _builder.append(this.maxSize);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTArray) {
            return _test((NBTArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeSizeIntArrayPredicate(final int minSize, final int maxSize) {
          super();
          this.minSize = minSize;
          this.maxSize = maxSize;
        }
      }
      
      @Override
      public boolean test(final NBTValue it) {
        return (it instanceof NBTIntArray);
      }
      
      public MCEntityValidator.Predicates.IntArrayPredicate.SizeIntArrayPredicate size(final int exactSize) {
        return new MCEntityValidator.Predicates.IntArrayPredicate.SizeIntArrayPredicate(exactSize);
      }
      
      public MCEntityValidator.Predicates.IntArrayPredicate.MinSizeIntArrayPredicate minSize(final int minSize) {
        return new MCEntityValidator.Predicates.IntArrayPredicate.MinSizeIntArrayPredicate(minSize);
      }
      
      public MCEntityValidator.Predicates.IntArrayPredicate.MaxSizeIntArrayPredicate maxSize(final int maxSize) {
        return new MCEntityValidator.Predicates.IntArrayPredicate.MaxSizeIntArrayPredicate(maxSize);
      }
      
      public MCEntityValidator.Predicates.IntArrayPredicate.RangeSizeIntArrayPredicate rangeSize(final int minSize, final int maxSize) {
        return new MCEntityValidator.Predicates.IntArrayPredicate.RangeSizeIntArrayPredicate(minSize, maxSize);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("an int array");
        return _builder.toString();
      }
    }
    
    public static class LongArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class SizeLongArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int exactSize;
        
        protected boolean _test(final NBTLongArray it) {
          int _size = it.getElements().size();
          return (_size == this.exactSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a long array of size ");
          _builder.append(this.exactSize);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTLongArray) {
            return _test((NBTLongArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public SizeLongArrayPredicate(final int exactSize) {
          super();
          this.exactSize = exactSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinSizeLongArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int minSize;
        
        protected boolean _test(final NBTLongArray it) {
          int _size = it.getElements().size();
          return (_size >= this.minSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.LongArrayPredicate.RangeSizeLongArrayPredicate maxSize(final int maxSize) {
          return new MCEntityValidator.Predicates.LongArrayPredicate.RangeSizeLongArrayPredicate(this.minSize, maxSize);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a long array of at least ");
          _builder.append(this.minSize);
          _builder.append(" long");
          String _s = MCEntityValidator.s(this.minSize);
          _builder.append(_s);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTLongArray) {
            return _test((NBTLongArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinSizeLongArrayPredicate(final int minSize) {
          super();
          this.minSize = minSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxSizeLongArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int maxSize;
        
        protected boolean _test(final NBTLongArray it) {
          int _size = it.getElements().size();
          return (_size <= this.maxSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.LongArrayPredicate.RangeSizeLongArrayPredicate minSize(final int minSize) {
          return new MCEntityValidator.Predicates.LongArrayPredicate.RangeSizeLongArrayPredicate(minSize, this.maxSize);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a long array of at most ");
          _builder.append(this.maxSize);
          _builder.append(" long");
          String _s = MCEntityValidator.s(this.maxSize);
          _builder.append(_s);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTLongArray) {
            return _test((NBTLongArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxSizeLongArrayPredicate(final int maxSize) {
          super();
          this.maxSize = maxSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeSizeLongArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int minSize;
        
        private final int maxSize;
        
        protected boolean _test(final NBTArray it) {
          boolean _xblockexpression = false;
          {
            final int size = it.getElements().size();
            _xblockexpression = ((size >= this.minSize) && (size <= this.maxSize));
          }
          return _xblockexpression;
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a long array of size between ");
          _builder.append(this.minSize);
          _builder.append(" and ");
          _builder.append(this.maxSize);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTArray) {
            return _test((NBTArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeSizeLongArrayPredicate(final int minSize, final int maxSize) {
          super();
          this.minSize = minSize;
          this.maxSize = maxSize;
        }
      }
      
      @Override
      public boolean test(final NBTValue it) {
        return (it instanceof NBTLongArray);
      }
      
      public MCEntityValidator.Predicates.LongArrayPredicate.SizeLongArrayPredicate size(final int exactSize) {
        return new MCEntityValidator.Predicates.LongArrayPredicate.SizeLongArrayPredicate(exactSize);
      }
      
      public MCEntityValidator.Predicates.LongArrayPredicate.MinSizeLongArrayPredicate minSize(final int minSize) {
        return new MCEntityValidator.Predicates.LongArrayPredicate.MinSizeLongArrayPredicate(minSize);
      }
      
      public MCEntityValidator.Predicates.LongArrayPredicate.MaxSizeLongArrayPredicate maxSize(final int maxSize) {
        return new MCEntityValidator.Predicates.LongArrayPredicate.MaxSizeLongArrayPredicate(maxSize);
      }
      
      public MCEntityValidator.Predicates.LongArrayPredicate.RangeSizeLongArrayPredicate rangeSize(final int minSize, final int maxSize) {
        return new MCEntityValidator.Predicates.LongArrayPredicate.RangeSizeLongArrayPredicate(minSize, maxSize);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a long array");
        return _builder.toString();
      }
    }
    
    public static class ByteArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @FinalFieldsConstructor
      public static class SizeByteArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int exactSize;
        
        protected boolean _test(final NBTByteArray it) {
          int _size = it.getElements().size();
          return (_size == this.exactSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a byte array of size ");
          _builder.append(this.exactSize);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTByteArray) {
            return _test((NBTByteArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public SizeByteArrayPredicate(final int exactSize) {
          super();
          this.exactSize = exactSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MinSizeByteArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int minSize;
        
        protected boolean _test(final NBTByteArray it) {
          int _size = it.getElements().size();
          return (_size >= this.minSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ByteArrayPredicate.RangeSizeByteArrayPredicate maxSize(final int maxSize) {
          return new MCEntityValidator.Predicates.ByteArrayPredicate.RangeSizeByteArrayPredicate(this.minSize, maxSize);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a byte array of at least ");
          _builder.append(this.minSize);
          _builder.append(" byte");
          String _s = MCEntityValidator.s(this.minSize);
          _builder.append(_s);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTByteArray) {
            return _test((NBTByteArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MinSizeByteArrayPredicate(final int minSize) {
          super();
          this.minSize = minSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class MaxSizeByteArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int maxSize;
        
        protected boolean _test(final NBTByteArray it) {
          int _size = it.getElements().size();
          return (_size <= this.maxSize);
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        public MCEntityValidator.Predicates.ByteArrayPredicate.RangeSizeByteArrayPredicate minSize(final int minSize) {
          return new MCEntityValidator.Predicates.ByteArrayPredicate.RangeSizeByteArrayPredicate(minSize, this.maxSize);
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a byte array of at most ");
          _builder.append(this.maxSize);
          _builder.append(" byte");
          String _s = MCEntityValidator.s(this.maxSize);
          _builder.append(_s);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTByteArray) {
            return _test((NBTByteArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public MaxSizeByteArrayPredicate(final int maxSize) {
          super();
          this.maxSize = maxSize;
        }
      }
      
      @FinalFieldsConstructor
      public static class RangeSizeByteArrayPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
        private final int minSize;
        
        private final int maxSize;
        
        protected boolean _test(final NBTArray it) {
          boolean _xblockexpression = false;
          {
            final int size = it.getElements().size();
            _xblockexpression = ((size >= this.minSize) && (size <= this.maxSize));
          }
          return _xblockexpression;
        }
        
        protected boolean _test(final NBTValue it) {
          return false;
        }
        
        @Override
        public String getExpected() {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("a byte array of size between ");
          _builder.append(this.minSize);
          _builder.append(" and ");
          _builder.append(this.maxSize);
          return _builder.toString();
        }
        
        public boolean test(final NBTValue it) {
          if (it instanceof NBTArray) {
            return _test((NBTArray)it);
          } else if (it != null) {
            return _test(it);
          } else {
            throw new IllegalArgumentException("Unhandled parameter types: " +
              Arrays.<Object>asList(it).toString());
          }
        }
        
        public RangeSizeByteArrayPredicate(final int minSize, final int maxSize) {
          super();
          this.minSize = minSize;
          this.maxSize = maxSize;
        }
      }
      
      @Override
      public boolean test(final NBTValue it) {
        return (it instanceof NBTByteArray);
      }
      
      public MCEntityValidator.Predicates.ByteArrayPredicate.SizeByteArrayPredicate size(final int exactSize) {
        return new MCEntityValidator.Predicates.ByteArrayPredicate.SizeByteArrayPredicate(exactSize);
      }
      
      public MCEntityValidator.Predicates.ByteArrayPredicate.MinSizeByteArrayPredicate minSize(final int minSize) {
        return new MCEntityValidator.Predicates.ByteArrayPredicate.MinSizeByteArrayPredicate(minSize);
      }
      
      public MCEntityValidator.Predicates.ByteArrayPredicate.MaxSizeByteArrayPredicate maxSize(final int maxSize) {
        return new MCEntityValidator.Predicates.ByteArrayPredicate.MaxSizeByteArrayPredicate(maxSize);
      }
      
      public MCEntityValidator.Predicates.ByteArrayPredicate.RangeSizeByteArrayPredicate rangeSize(final int minSize, final int maxSize) {
        return new MCEntityValidator.Predicates.ByteArrayPredicate.RangeSizeByteArrayPredicate(minSize, maxSize);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a byte array");
        return _builder.toString();
      }
    }
    
    public static class ObjectPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      @Override
      public boolean test(final NBTValue it) {
        return (it instanceof NBTCompound);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a tag compound");
        return _builder.toString();
      }
    }
    
    public static class BoolPredicate implements MCEntityValidator.Predicates.NBTValuePredicate {
      protected boolean _test(final NBTInt it) {
        return ((it.getValue() == 0) || (it.getValue() == 1));
      }
      
      protected boolean _test(final NBTByte it) {
        return ((it.getValue() == 0) || (it.getValue() == 1));
      }
      
      protected boolean _test(final NBTValue it) {
        return (it instanceof NBTBool);
      }
      
      @Override
      public String getExpected() {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("a boolean value (1 or 0)");
        return _builder.toString();
      }
      
      public boolean test(final NBTValue it) {
        if (it instanceof NBTByte) {
          return _test((NBTByte)it);
        } else if (it instanceof NBTInt) {
          return _test((NBTInt)it);
        } else if (it != null) {
          return _test(it);
        } else {
          throw new IllegalArgumentException("Unhandled parameter types: " +
            Arrays.<Object>asList(it).toString());
        }
      }
    }
    
    private final MCEntityValidator.Predicates.BytePredicate _isByte = new MCEntityValidator.Predicates.BytePredicate(true);
    
    private final MCEntityValidator.Predicates.BytePredicate _isByteExact = new MCEntityValidator.Predicates.BytePredicate(false);
    
    private final MCEntityValidator.Predicates.ShortPredicate _isShort = new MCEntityValidator.Predicates.ShortPredicate(true);
    
    private final MCEntityValidator.Predicates.ShortPredicate _isShortExact = new MCEntityValidator.Predicates.ShortPredicate(false);
    
    private final MCEntityValidator.Predicates.IntPredicate _isInt = new MCEntityValidator.Predicates.IntPredicate();
    
    private final MCEntityValidator.Predicates.FloatPredicate _isFloat = new MCEntityValidator.Predicates.FloatPredicate(true);
    
    private final MCEntityValidator.Predicates.FloatPredicate _isFloatExact = new MCEntityValidator.Predicates.FloatPredicate(false);
    
    private final MCEntityValidator.Predicates.LongPredicate _isLong = new MCEntityValidator.Predicates.LongPredicate(true);
    
    private final MCEntityValidator.Predicates.LongPredicate _isLongExact = new MCEntityValidator.Predicates.LongPredicate(false);
    
    private final MCEntityValidator.Predicates.DoublePredicate _isDouble = new MCEntityValidator.Predicates.DoublePredicate(true);
    
    private final MCEntityValidator.Predicates.DoublePredicate _isDoubleExact = new MCEntityValidator.Predicates.DoublePredicate(false);
    
    private final MCEntityValidator.Predicates.StringPredicate _isString = new MCEntityValidator.Predicates.StringPredicate();
    
    private final MCEntityValidator.Predicates.ArrayPredicate _isArray = new MCEntityValidator.Predicates.ArrayPredicate();
    
    private final MCEntityValidator.Predicates.ObjectPredicate _isObject = new MCEntityValidator.Predicates.ObjectPredicate();
    
    private final MCEntityValidator.Predicates.BoolPredicate _isBool = new MCEntityValidator.Predicates.BoolPredicate();
    
    private final MCEntityValidator.Predicates.IntArrayPredicate _isIntArray = new MCEntityValidator.Predicates.IntArrayPredicate();
    
    private final MCEntityValidator.Predicates.ByteArrayPredicate _isByteArray = new MCEntityValidator.Predicates.ByteArrayPredicate();
    
    private final MCEntityValidator.Predicates.LongArrayPredicate _isLongArray = new MCEntityValidator.Predicates.LongArrayPredicate();
    
    public MCEntityValidator.Predicates.BytePredicate isByte() {
      return this._isByte;
    }
    
    public MCEntityValidator.Predicates.ShortPredicate isShort() {
      return this._isShort;
    }
    
    public MCEntityValidator.Predicates.IntPredicate isInt() {
      return this._isInt;
    }
    
    public MCEntityValidator.Predicates.LongPredicate isLong() {
      return this._isLong;
    }
    
    public MCEntityValidator.Predicates.FloatPredicate isFloat() {
      return this._isFloat;
    }
    
    public MCEntityValidator.Predicates.DoublePredicate isDouble() {
      return this._isDouble;
    }
    
    public MCEntityValidator.Predicates.StringPredicate isString() {
      return this._isString;
    }
    
    public MCEntityValidator.Predicates.ArrayPredicate isArray() {
      return this._isArray;
    }
    
    public MCEntityValidator.Predicates.ObjectPredicate isObject() {
      return this._isObject;
    }
    
    public MCEntityValidator.Predicates.BoolPredicate isBool() {
      return this._isBool;
    }
    
    public MCEntityValidator.Predicates.LongArrayPredicate isLongArray() {
      return this._isLongArray;
    }
    
    public MCEntityValidator.Predicates.IntArrayPredicate isIntArray() {
      return this._isIntArray;
    }
    
    public MCEntityValidator.Predicates.ByteArrayPredicate isByteArray() {
      return this._isByteArray;
    }
    
    public MCEntityValidator.Predicates.NBTValuePredicate wrap(final Function1<? super NBTValue, ? extends Boolean> tester, final String expectedMsg) {
      return new MCEntityValidator.Predicates.NBTValuePredicate() {
        @Override
        public boolean test(final NBTValue value) {
          return (tester.apply(value)).booleanValue();
        }
        
        @Override
        public String getExpected() {
          return expectedMsg;
        }
      };
    }
  }
  
  @Inject
  private McentityFactory factory;
  
  private static final Pattern KEY_REGEX = new Function0<Pattern>() {
    @Override
    public Pattern apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("[-.a-z_0-9]+");
      Pattern _compile = Pattern.compile(_builder.toString());
      return _compile;
    }
  }.apply();
  
  private static final Pattern FOLDER_REGEX = new Function0<Pattern>() {
    @Override
    public Pattern apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(?:");
      _builder.append(MCEntityValidator.KEY_REGEX);
      _builder.append("(?:/");
      _builder.append(MCEntityValidator.KEY_REGEX);
      _builder.append(")*)");
      Pattern _compile = Pattern.compile(_builder.toString());
      return _compile;
    }
  }.apply();
  
  private static final Pattern NAMESPACED_KEY_REGEX = new Function0<Pattern>() {
    @Override
    public Pattern apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(?:(?<namespace>");
      _builder.append(MCEntityValidator.KEY_REGEX);
      _builder.append("):)?(?<key>");
      _builder.append(MCEntityValidator.KEY_REGEX);
      _builder.append(")");
      Pattern _compile = Pattern.compile(_builder.toString());
      return _compile;
    }
  }.apply();
  
  private static final Pattern NAMESPACED_FOLDER_REGEX = new Function0<Pattern>() {
    @Override
    public Pattern apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(?:(?<namespace>");
      _builder.append(MCEntityValidator.KEY_REGEX);
      _builder.append("):)?(?<key>");
      _builder.append(MCEntityValidator.FOLDER_REGEX);
      _builder.append(")");
      Pattern _compile = Pattern.compile(_builder.toString());
      return _compile;
    }
  }.apply();
  
  private static final Pattern UUID_REGEX = new Function0<Pattern>() {
    @Override
    public Pattern apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}");
      Pattern _compile = Pattern.compile(_builder.toString());
      return _compile;
    }
  }.apply();
  
  private static final Pattern TAG_REGEX = new Function0<Pattern>() {
    @Override
    public Pattern apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("[a-zA-Z_0-9]+");
      Pattern _compile = Pattern.compile(_builder.toString());
      return _compile;
    }
  }.apply();
  
  @Check
  public void checkEntityData(final EntityData entityData) {
    NBTCompound _nbt = entityData.getNbt();
    MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(_nbt);
    this.checkEntityNBT(_nBTData);
  }
  
  @Check
  public void checkNBT(final NBTCompound nbt) {
    final HashSet<String> keys = CollectionLiterals.<String>newHashSet();
    EList<NBTEntry> _entries = nbt.getEntries();
    for (final NBTEntry entry : _entries) {
      boolean _add = keys.add(entry.getKey());
      boolean _not = (!_add);
      if (_not) {
        this.error("Duplicate key", entry, 
          McentityPackage.Literals.NBT_ENTRY__KEY);
      }
    }
  }
  
  @Check
  public void checkJSON(final JSONObject json) {
    final HashSet<String> keys = CollectionLiterals.<String>newHashSet();
    EList<JSONEntry> _entries = json.getEntries();
    for (final JSONEntry entry : _entries) {
      boolean _add = keys.add(entry.getKey());
      boolean _not = (!_add);
      if (_not) {
        this.error("Duplicate key", entry, 
          McentityPackage.Literals.JSON_ENTRY__KEY);
      }
    }
  }
  
  @Check
  public void checkSelectorArguments(final SelectorArguments args) {
    final HashSet<String> keys = CollectionLiterals.<String>newHashSet();
    EList<SelectorFilter> _filters = args.getFilters();
    for (final SelectorFilter filter : _filters) {
      boolean _add = keys.add(filter.getName());
      boolean _not = (!_add);
      if (_not) {
        this.error("Duplicate key", filter, 
          McentityPackage.Literals.SELECTOR_FILTER__NAME);
      }
    }
  }
  
  public void checkEntityNBT(final MCEntityValidator.NBTData it, @Nullable final MCEntityValidator.EntityDef entityType) {
    this.checkNBTKeyIsVec3D(it, "Pos");
    this.checkNBTKeyIsVec3D(it, "Motion");
    final Predicate<NBTValue> _function = (NBTValue it_1) -> {
      return (MCEntityValidator.isVec2F(it_1) && (MCEntityValidator.<NBTArray, Boolean>with(((NBTArray) it_1), ((Function1<NBTArray, Boolean>) (NBTArray it_2) -> {
        return Boolean.valueOf((MCEntityValidator.isFloat(it_2.getElements().get(0), 0f, 360.0f) && MCEntityValidator.isFloat(it_2.getElements().get(1), (-90.0f), 90.0f)));
      }))).booleanValue());
    };
    this.checkNBTKey(it, "Rotation", _function, "Expected an array of floats [yaw, pitch]");
    this.checkNBTKey(it, "FallDistance", MCEntityValidator.predicates.isFloat().min(0.0f));
    this.checkNBTKey(it, "Fire", MCEntityValidator.predicates.isShort());
    this.checkNBTKey(it, "Air", MCEntityValidator.predicates.isShort().range(0, 300));
    this.checkNBTKeyIsBool(it, "OnGround");
    this.checkNBTKeyIsBool(it, "NoGravity");
    this.checkNBTKeyIsBool(it, "Invulnerable");
    this.checkNBTKey(it, "PortalCooldown", MCEntityValidator.predicates.isInt().min(0));
    this.checkNBTKeyIsLongExact(it, "UUIDMost");
    this.checkNBTKeyIsLongExact(it, "UUIDLeast");
    final Predicate<NBTValue> _function_1 = (NBTValue it_1) -> {
      return ((it_1 instanceof NBTJSONTextComponent) || MCEntityValidator.isString(it_1, ""));
    };
    this.checkNBTKey(it, "CustomName", _function_1, "Expected a JSON text component");
    this.checkNBTKeyIsBool(it, "CustomNameVisible");
    this.checkNBTKeyIsBool(it, "Silent");
    this.checkNBTKeyIsBool(it, "Glowing");
    final Consumer<NBTArray> _function_2 = (NBTArray it_1) -> {
      for (int i = 0; (i < it_1.getElements().size()); i++) {
        NBTValue _get = it_1.getElements().get(i);
        boolean _matches = MCEntityValidator.TAG_REGEX.matcher(((NBTString) _get).getValue()).matches();
        boolean _not = (!_matches);
        if (_not) {
          this.warning("The value contains characters other than [a-zA-Z_0-9]", it_1, 
            McentityPackage.Literals.NBT_ARRAY__ELEMENTS, i);
        }
      }
    };
    this.<NBTArray>checkNBTKey(it, "Tags", MCEntityValidator.predicates.isArray().matching(MCEntityValidator.predicates.isString()), _function_2);
    final Consumer<MCEntityValidator.NBTData> _function_3 = (MCEntityValidator.NBTData it_1) -> {
      this.checkEntityNBT(it_1);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Passengers", "Expected an array of entity tags", _function_3);
    if (entityType!=null) {
      entityType.check(it);
    }
    this.checkNoOtherKeys(it);
  }
  
  public void checkEntityNBT(final MCEntityValidator.NBTData it) {
    final NBTEntry idEntry = it.map.get("id");
    MCEntityValidator.EntityDef _xifexpression = null;
    if ((idEntry != null)) {
      MCEntityValidator.EntityDef _xblockexpression = null;
      {
        final NBTValue value = idEntry.getValue();
        String namespace = null;
        String key = null;
        if ((value instanceof NamespacedKey)) {
          namespace = ((NamespacedKey)value).getNamespace();
          key = ((NamespacedKey)value).getKey();
        } else {
          boolean _isStringMatching = MCEntityValidator.isStringMatching(value, MCEntityValidator.NAMESPACED_KEY_REGEX);
          if (_isStringMatching) {
            final String str = ((NBTString) value).getValue();
            final int i = str.indexOf(":");
            String _xifexpression_1 = null;
            if ((i == (-1))) {
              _xifexpression_1 = "minecraft";
            } else {
              _xifexpression_1 = str.substring(0, i);
            }
            namespace = _xifexpression_1;
            key = str.substring((i + 1));
          } else {
            this.error("Expected an entity id", idEntry, 
              McentityPackage.Literals.NBT_ENTRY__VALUE);
          }
        }
        Map<String, MCEntityValidator.EntityDef> _get = this.ALL_ENTITIES.get(namespace);
        MCEntityValidator.EntityDef _get_1 = null;
        if (_get!=null) {
          _get_1=_get.get(key);
        }
        _xblockexpression = _get_1;
      }
      _xifexpression = _xblockexpression;
    }
    final MCEntityValidator.EntityDef entityType = _xifexpression;
    it.keys.remove("id");
    if (((idEntry != null) && (entityType == null))) {
      this.warning("Unknown entity id", idEntry, 
        McentityPackage.Literals.NBT_ENTRY__VALUE);
    }
    this.checkEntityNBT(it, entityType);
  }
  
  public void checkNoOtherKeys(final MCEntityValidator.NBTData it) {
    boolean _isEmpty = it.keys.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      final EList<NBTEntry> entries = it.nbt.getEntries();
      for (int i = 0; (i < entries.size()); i++) {
        {
          final String key = entries.get(i).getKey();
          boolean _contains = it.keys.contains(key);
          if (_contains) {
            this.warning("Unrecognized key", 
              it.nbt, 
              McentityPackage.Literals.NBT_COMPOUND__ENTRIES, i);
          }
        }
      }
    }
  }
  
  public MCEntityValidator.EntityDef getEntityInfo(final MCEntityValidator.NBTData it) {
    MCEntityValidator.EntityDef _xblockexpression = null;
    {
      final NBTEntry id_nbt = it.map.get("id");
      MCEntityValidator.EntityDef _xifexpression = null;
      if ((id_nbt != null)) {
        MCEntityValidator.EntityDef _xblockexpression_1 = null;
        {
          final NBTValue value = id_nbt.getValue();
          String _xifexpression_1 = null;
          if ((value instanceof NamespacedKey)) {
            _xifexpression_1 = ((NamespacedKey)value).getNamespace();
          } else {
            _xifexpression_1 = "minecraft";
          }
          final String namespace = _xifexpression_1;
          String _xifexpression_2 = null;
          if ((value instanceof NamespacedKey)) {
            _xifexpression_2 = ((NamespacedKey)value).getKey();
          } else {
            _xifexpression_2 = ((NBTString) value).getValue();
          }
          final String key = _xifexpression_2;
          Map<String, MCEntityValidator.EntityDef> _get = this.ALL_ENTITIES.get(namespace);
          MCEntityValidator.EntityDef _get_1 = null;
          if (_get!=null) {
            _get_1=_get.get(key);
          }
          _xblockexpression_1 = _get_1;
        }
        _xifexpression = _xblockexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public void checkMobNBT(final MCEntityValidator.NBTData it) {
    this.checkMobNBT(it, false, false);
  }
  
  public void checkMobNBT(final MCEntityValidator.NBTData it, final boolean breedable, final boolean tameable) {
    final MCEntityValidator.EntityDef entityInfo = this.getEntityInfo(it);
    this.checkNBTKey(it, "Health", MCEntityValidator.predicates.isFloat().min(0.0f));
    this.checkNBTKey(it, "AbsorptionAmount", MCEntityValidator.predicates.isFloat().min(0.0f));
    this.checkNBTKey(it, "HurtTime", MCEntityValidator.predicates.isShort().min(0));
    this.checkNBTKeyIsInt(it, "HurtByTimestamp");
    this.checkNBTKey(it, "DeathTime", MCEntityValidator.predicates.isShort().min(0));
    this.checkNBTKeyIsBool(it, "FallFlying");
    this.checkNBTKeyIsInt(it, "SleepingX");
    this.checkNBTKeyIsInt(it, "SleepingY");
    this.checkNBTKeyIsInt(it, "SleepingZ");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_2) -> {
        final Procedure1<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_3) -> {
          this.checkNBTKey(it_3, "pos", MCEntityValidator.predicates.isIntArray().size(3));
          this.checkNBTKey(it_3, "dimension", MCEntityValidator.predicates.isString().matching("(minecraft:)?(overworld|the_(nether|end))"), "Expected a dimension id");
          this.requiredKeys(it_3, "pos", "dimension");
          this.checkNoOtherKeys(it_3);
        };
        final Procedure1<MCEntityValidator.NBTData> checker = _function_2;
        this.checkNBTKeyIsObject(it_2, "minecraft:meeting_point", new Consumer<MCEntityValidator.NBTData>() {
            public void accept(MCEntityValidator.NBTData t) {
              checker.apply(t);
            }
        });
        this.checkNBTKeyIsObject(it_2, "minecraft:home", new Consumer<MCEntityValidator.NBTData>() {
            public void accept(MCEntityValidator.NBTData t) {
              checker.apply(t);
            }
        });
        this.checkNBTKeyIsObject(it_2, "minecraft:job_site", new Consumer<MCEntityValidator.NBTData>() {
            public void accept(MCEntityValidator.NBTData t) {
              checker.apply(t);
            }
        });
        this.checkNoOtherKeys(it_2);
      };
      this.checkNBTKeyIsObject(it_1, "memories", _function_1);
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "Brain", _function);
    Set<String> _elvis = null;
    Set<String> _attributes = null;
    if (entityInfo!=null) {
      _attributes=entityInfo.attributes;
    }
    if (_attributes != null) {
      _elvis = _attributes;
    } else {
      _elvis = MCEntityValidator.genericAttributes;
    }
    final Set<String> attributes = _elvis;
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKey(it_1, "Name", MCEntityValidator.predicates.isString().equalTo(attributes));
      this.checkNBTKey(it_1, "Base", MCEntityValidator.predicates.isDouble().lenient(false));
      final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_2) -> {
        MCEntityValidator.Predicates.StringPredicate _isString = MCEntityValidator.predicates.isString();
        MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate _equalTo = MCEntityValidator.predicates.isString().equalTo("");
        MCEntityValidator.Predicates.NBTValuePredicate _not = _equalTo.operator_not();
        MCEntityValidator.Predicates.NBTValuePredicate _and = _isString.operator_and(_not);
        this.checkNBTKey(it_2, "Name", _and);
        this.checkNBTKey(it_2, "Amount", MCEntityValidator.predicates.isDouble().lenient(false));
        this.checkNBTKey(it_2, "Operation", MCEntityValidator.predicates.isInt().range(0, 2), "Expected 0, 1, or 2");
        this.checkNBTKeyIsLongExact(it_2, "UUIDMost");
        this.checkNBTKeyIsLongExact(it_2, "UUIDLeast");
        this.requiredKeys(it_2, "Amount", "Operation");
        this.checkNoOtherKeys(it_2);
      };
      this.checkNBTKeyIsArrayOfObjects(it_1, "Modifiers", MCEntityValidator.predicates.isArray().minSize(1), _function_2);
      this.requiredKeys(it_1, "Name", "Base");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Attributes", "Expected an array of attributes", _function_1);
    final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_1) -> {
      MCEntityValidator.Predicates.BytePredicate _lenient = MCEntityValidator.predicates.isByte().lenient(false);
      final Function1<NBTValue, Boolean> _function_3 = (NBTValue it_2) -> {
        return Boolean.valueOf(this.isValidEffect(it_2));
      };
      MCEntityValidator.Predicates.NBTValuePredicate _wrap = MCEntityValidator.predicates.wrap(_function_3, "an effect id");
      MCEntityValidator.Predicates.NBTValuePredicate _or = _lenient.operator_or(_wrap);
      final Consumer<NBTValue> _function_4 = (NBTValue nbt) -> {
        if (((nbt instanceof NBTString) || (nbt instanceof NamespacedKey))) {
          String namespace = null;
          String key = null;
          boolean _matched = false;
          if (nbt instanceof NBTString) {
            _matched=true;
            final Matcher m = MCEntityValidator.NAMESPACED_KEY_REGEX.matcher(((NBTString)nbt).getValue());
            boolean _matches = m.matches();
            boolean _not = (!_matches);
            if (_not) {
              throw new AssertionError();
            }
            String _elvis_1 = null;
            String _group = m.group("namespace");
            if (_group != null) {
              _elvis_1 = _group;
            } else {
              _elvis_1 = "minecraft";
            }
            namespace = _elvis_1;
            key = m.group("key");
          }
          if (!_matched) {
            if (nbt instanceof NamespacedKey) {
              _matched=true;
              namespace = ((NamespacedKey)nbt).getNamespace();
              key = ((NamespacedKey)nbt).getKey();
            }
          }
          if (!_matched) {
            throw new AssertionError();
          }
          final NBTByte newvalue = this.factory.createNBTByte();
          newvalue.setValue(this.POTION_EFFECTS.get(((namespace + ":") + key)).byteValue());
          NBTEntry _get = it_1.map.get("Id");
          _get.setValue(newvalue);
        }
      };
      this.<NBTValue>checkNBTKey(it_1, "Id", _or, _function_4);
      this.checkNBTKey(it_1, "Amplifier", MCEntityValidator.predicates.isByte());
      this.checkNBTKey(it_1, "Duration", MCEntityValidator.predicates.isInt());
      this.checkNBTKeyIsBool(it_1, "Ambient");
      this.checkNBTKeyIsBool(it_1, "ShowParticles");
      this.checkNBTKeyIsBool(it_1, "ShowIcon");
      this.requiredKeys(it_1, "Id", "Amplifier", "Duration");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "ActiveEffects", "Expected an array of potion effects", _function_2);
    final Consumer<MCEntityValidator.NBTData> _function_3 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "HandItems", MCEntityValidator.predicates.isArray().size(2), "Expected an array of size 2 where the elements are items", _function_3);
    final Consumer<MCEntityValidator.NBTData> _function_4 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "ArmorItems", MCEntityValidator.predicates.isArray().size(4), "Expected an array of size 2 where the elements are items", _function_4);
    this.checkNBTKeyIsArray(it, "HandDropChances", MCEntityValidator.predicates.isArray().size(2), MCEntityValidator.predicates.isFloat().range(0.0f, 1.0f));
    this.checkNBTKeyIsArray(it, "ArmorDropChances", MCEntityValidator.predicates.isArray().size(4), MCEntityValidator.predicates.isFloat().range(0.0f, 1.0f));
    final Predicate<NBTValue> _function_5 = (NBTValue it_1) -> {
      return MCEntityValidator.isNamespacedLocation(it_1);
    };
    this.checkNBTKey(it, "DeathLootTable", _function_5, "Expected a loot table id");
    this.checkNBTKey(it, "DeathLootTableSeed", MCEntityValidator.predicates.isLong());
    this.checkNBTKeyIsBool(it, "CanPickUpLoot");
    this.checkNBTKeyIsBool(it, "NoAI");
    this.checkNBTKeyIsBool(it, "PersistenceRequired");
    this.checkNBTKeyIsBool(it, "LeftHanded");
    MCEntityValidator.Predicates.StringPredicate _isString = MCEntityValidator.predicates.isString();
    MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate _equalTo = MCEntityValidator.predicates.isString().equalTo("");
    MCEntityValidator.Predicates.NBTValuePredicate _not = _equalTo.operator_not();
    MCEntityValidator.Predicates.NBTValuePredicate _and = _isString.operator_and(_not);
    this.checkNBTKey(it, "Team", _and);
    this.checkNBTKeyIsBool(it, "Leashed");
    final Consumer<MCEntityValidator.NBTData> _function_6 = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "UUIDMost");
      this.checkNBTKeyIsLongExact(it_1, "UUIDLeast");
      this.checkNBTKeyIsInt(it_1, "X");
      this.checkNBTKeyIsInt(it_1, "Y");
      this.checkNBTKeyIsInt(it_1, "Z");
      this.requiredKeys(it_1, "UUIDMost", "UUIDLeast", "X", "Y", "Z");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "Leash", _function_6);
    if (breedable) {
      this.checkNBTKeyIsBool(it, "InLove");
      this.checkNBTKeyIsInt(it, "Age");
      this.checkNBTKeyIsInt(it, "ForcedAge");
      this.checkNBTKeyIsLongExact(it, "LoveCauseLeast");
      this.checkNBTKeyIsLongExact(it, "LoveCauseMost");
    }
    if (tameable) {
      final Predicate<NBTValue> _function_7 = (NBTValue it_1) -> {
        return MCEntityValidator.isUUID(it_1);
      };
      this.checkNBTKey(it, "OwnerUUID", _function_7, "Expected a UUID");
      this.checkNBTKeyIsBool(it, "Sitting");
    }
  }
  
  public void checkFishNBT(final MCEntityValidator.NBTData it) {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBool(it, "FromBucket");
  }
  
  public void checkBaseHorseNBT(final MCEntityValidator.NBTData it) {
    this.checkMobNBT(it, true, false);
    this.checkNBTKeyIsBool(it, "Bred");
    this.checkNBTKeyIsBool(it, "EatingHaystack");
    this.checkNBTKeyIsBool(it, "Tame");
    final Predicate<NBTValue> _function = (NBTValue it_1) -> {
      return MCEntityValidator.isUUID(it_1);
    };
    this.checkNBTKey(it, "OwnerUUID", _function, "Expected a UUID");
  }
  
  public void checkRaiderNBT(final MCEntityValidator.NBTData it) {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBool(it, "HasRaidGoal");
    this.checkNBTKeyIsBool(it, "Patrolling");
    this.checkNBTKeyIsBool(it, "PatrolLeader");
    this.checkNBTKeyIsBool(it, "PatrolTarget");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsInt(it_1, "X");
      this.checkNBTKeyIsInt(it_1, "Y");
      this.checkNBTKeyIsInt(it_1, "Z");
      this.requiredKeys(it_1, "X", "Y", "Z");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "PatrolTarget", _function);
    this.checkNBTKeyIsInt(it, "RaidId");
    this.checkNBTKeyIsInt(it, "Wave");
  }
  
  public void checkZombieNBT(final MCEntityValidator.NBTData it) {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBool(it, "IsBaby");
    this.checkNBTKeyIsBool(it, "CanBreakDoors");
    this.checkNBTKeyIsInt(it, "DrownedConversionTime");
    this.checkNBTKeyIsInt(it, "InWaterTime");
  }
  
  public void checkVillagerNBT(final MCEntityValidator.NBTData it) {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsInt(it_1, "level");
      final Predicate<NBTValue> _function_1 = (NBTValue it_2) -> {
        return this.isValidProfession(it_2);
      };
      this.checkNBTKey(it_1, "profession", _function_1, "Expected a villager profession");
      final Predicate<NBTValue> _function_2 = (NBTValue it_2) -> {
        return this.isValidVillagerType(it_2);
      };
      this.checkNBTKey(it_1, "type", _function_2, "Expected a villager type");
      this.requiredKeys(it_1, "level", "profession", "type");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "VillagerData", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKey(it_1, "Type", MCEntityValidator.predicates.isString().equalTo(this.GOSSIP_TYPES));
      this.checkNBTKeyIsInt(it_1, "Value");
      this.checkNBTKeyIsLongExact(it_1, "TargetMost");
      this.checkNBTKeyIsLongExact(it_1, "TargetLeast");
      this.requiredKeys(it_1, "Type", "Value", "TargetMost", "TargetLeast");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Gossips", _function_1);
    this.checkTraderOffersNBT(it);
  }
  
  public void checkTraderOffersNBT(final MCEntityValidator.NBTData it) {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_2) -> {
        this.checkNBTKeyIsBool(it_2, "rewardExp");
        this.checkNBTKey(it_2, "maxUses", MCEntityValidator.predicates.isInt().min(0));
        this.checkNBTKey(it_2, "uses", MCEntityValidator.predicates.isInt().min(0));
        final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_3) -> {
          this.checkItemNBT(it_3, false);
        };
        this.checkNBTKeyIsObject(it_2, "buy", _function_2);
        final Consumer<MCEntityValidator.NBTData> _function_3 = (MCEntityValidator.NBTData it_3) -> {
          this.checkItemNBT(it_3, false);
        };
        this.checkNBTKeyIsObject(it_2, "buyB", _function_3);
        final Consumer<MCEntityValidator.NBTData> _function_4 = (MCEntityValidator.NBTData it_3) -> {
          this.checkItemNBT(it_3, false);
        };
        this.checkNBTKeyIsObject(it_2, "sell", _function_4);
        this.checkNBTKeyIsInt(it_2, "xp");
        this.checkNBTKey(it_2, "priceMultiplier", MCEntityValidator.predicates.isFloat());
        this.checkNBTKeyIsInt(it_2, "specialPrice");
        this.checkNBTKeyIsInt(it_2, "demand");
        this.requiredKeys(it_2, "buy", "buyB", "sell", "maxUses");
        this.checkNoOtherKeys(it_2);
      };
      this.checkNBTKeyIsArrayOfObjects(it_1, "Recipes", _function_1);
      this.requiredKeys(it_1, "Recipes");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "Offers", _function);
  }
  
  public void checkProjectileNBT(final MCEntityValidator.NBTData it) {
    this.checkNBTKeyIsInt(it, "xTile");
    this.checkNBTKeyIsInt(it, "yTile");
    this.checkNBTKeyIsInt(it, "zTile");
    this.checkNBTKeyIsBlockstate(it, "inBlockState");
    this.checkNBTKeyIsByte(it, "shake");
  }
  
  public void checkPotionNBT(final MCEntityValidator.NBTData it) {
    this.checkNBTKey(it, "CustomPotionColor", MCEntityValidator.predicates.isInt().range(0, 0xFFFFFF));
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKey(it_1, "Id", MCEntityValidator.predicates.isInt().range(1, 32));
      this.checkNBTKeyIsByte(it_1, "Amplifier");
      this.checkNBTKeyIsInt(it_1, "Duration");
      this.checkNBTKeyIsBool(it_1, "Ambient");
      this.checkNBTKeyIsBool(it_1, "ShowParticles");
      this.checkNBTKeyIsBool(it_1, "ShowIcon");
    };
    this.checkNBTKeyIsArrayOfObjects(it, "CustomPotionEffects", _function);
    this.checkNBTKey(it, "Potion", MCEntityValidator.predicates.isString().equalTo(this.DEFAULT_POTION_TYPES));
  }
  
  public void checkMinecartNBT(final MCEntityValidator.NBTData it) {
    this.checkNBTKeyIsBool(it, "CustomDisplayTile");
    this.checkNBTKeyIsBlockstate(it, "DisplayState");
    this.checkNBTKeyIsInt(it, "DisplayOffset");
  }
  
  public void checkLootableNBT(final MCEntityValidator.NBTData it) {
    final Predicate<NBTValue> _function = (NBTValue it_1) -> {
      return MCEntityValidator.isNamespacedLocation(it_1);
    };
    this.checkNBTKey(it, "LootTable", _function, "Expected a loot table id");
    this.checkNBTKeyIsLong(it, "LootTableSeed");
  }
  
  public void checkCommandBlockNBT(final MCEntityValidator.NBTData it) {
    this.checkNBTKey(it, "Command", MCEntityValidator.predicates.isString());
    this.checkNBTKeyIsInt(it, "SuccessCount");
    this.checkNBTKey(it, "LastOutput", MCEntityValidator.predicates.isString());
    this.checkNBTKeyIsBool(it, "TrackOutput");
  }
  
  public void checkSpawnerNBT(final MCEntityValidator.NBTData it) {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_2) -> {
        this.checkEntityNBT(it_2);
      };
      this.checkNBTKeyIsObject(it_1, "Entity", _function_1);
      this.checkNBTKey(it_1, "Weight", MCEntityValidator.predicates.isInt().min(1));
    };
    this.checkNBTKeyIsArrayOfObjects(it, "SpawnPotentials", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkEntityNBT(it_1);
    };
    this.checkNBTKeyIsObject(it, "SpawnData", _function_1);
    this.checkNBTKey(it, "SpawnCount", MCEntityValidator.predicates.isShort().min(1));
    this.checkNBTKey(it, "SpawnRange", MCEntityValidator.predicates.isShort().min(0));
    this.checkNBTKey(it, "Delay", MCEntityValidator.predicates.isShort());
    this.checkNBTKey(it, "MinSpawnDelay", MCEntityValidator.predicates.isShort().min(0));
    this.checkNBTKey(it, "MaxSpawnDelay", MCEntityValidator.predicates.isShort().min(1));
    this.checkNBTKey(it, "MaxNearbyEntities", MCEntityValidator.predicates.isShort().min(0));
    this.checkNBTKey(it, "RequiredPlayerRange", MCEntityValidator.predicates.isShort().min(0));
  }
  
  public void checkNBTKeyIsBlockstate(final MCEntityValidator.NBTData it, final String keyIn) {
    this.checkNBTKeyIsBlockstate(it, keyIn, ((MCEntityValidator.NBTData) null));
  }
  
  public void checkNBTKeyIsBlockstate(final MCEntityValidator.NBTData it, final String keyIn, @Nullable final MCEntityValidator.NBTData tileEntityData) {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_2) -> {
        Set<String> _keySet = it_2.map.keySet();
        for (final String key : _keySet) {
          this.checkNBTKey(it_2, key, MCEntityValidator.predicates.isString());
        }
      };
      this.checkNBTKeyIsObject(it_1, "Properties", _function_1);
      final Function1<NBTValue, MCEntityValidator.Possibility> _function_2 = (NBTValue it_2) -> {
        return this.isValidBlock(it_2);
      };
      final Consumer<NBTValue> _function_3 = (NBTValue value) -> {
        String namespace = null;
        String key = null;
        boolean _matched = false;
        if (value instanceof NBTString) {
          _matched=true;
          final Matcher m = MCEntityValidator.NAMESPACED_KEY_REGEX.matcher(((NBTString)value).getValue());
          boolean _matches = m.matches();
          boolean _not = (!_matches);
          if (_not) {
            throw new AssertionError();
          }
          String _elvis = null;
          String _group = m.group("namespace");
          if (_group != null) {
            _elvis = _group;
          } else {
            _elvis = "minecraft";
          }
          namespace = _elvis;
          key = m.group("key");
        }
        if (!_matched) {
          if (value instanceof NamespacedKey) {
            _matched=true;
            namespace = ((NamespacedKey)value).getNamespace();
            key = ((NamespacedKey)value).getKey();
          }
        }
        if (!_matched) {
          throw new AssertionError();
        }
        Map<String, MCEntityValidator.BlockDef> _get = this.ALL_BLOCKS.get(namespace);
        MCEntityValidator.BlockDef _get_1 = null;
        if (_get!=null) {
          _get_1=_get.get(key);
        }
        final MCEntityValidator.BlockDef blockDef = _get_1;
        boolean _containsKey = it_1.map.containsKey("Properties");
        if (_containsKey) {
          final HashMap<String, String> properties = CollectionLiterals.<String, String>newHashMap();
          NBTValue _value = it_1.map.get("Properties").getValue();
          final NBTCompound propsVal = ((NBTCompound) _value);
          EList<NBTEntry> _entries = propsVal.getEntries();
          for (final NBTEntry entry : _entries) {
            NBTValue _value_1 = entry.getValue();
            properties.put(entry.getKey(), ((NBTString) _value_1).getValue());
          }
          final ImmutableMap<String, NBTEntry> map2 = MCEntityValidator.toMap(propsVal);
          final Procedure2<String, String> _function_4 = (String key2, String msg) -> {
            this.error(msg, 
              map2.get(key2), 
              McentityPackage.Literals.NBT_ENTRY__KEY);
          };
          blockDef.checkProperties(properties, _function_4);
        }
        if ((tileEntityData != null)) {
          blockDef.check(tileEntityData);
        }
      };
      this.<NBTValue>checkNBTKey(it_1, "Name", _function_2, "Expected a block id", "Unknown block id", _function_3);
      this.requiredKeys(it_1, "Name");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, keyIn, _function);
  }
  
  public void checkNBTKeyIsBlockstate(final MCEntityValidator.NBTData it, final String keyIn, @Nullable final MCEntityValidator.BlockDef blockDef) {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      Set<String> _keySet = it_1.map.keySet();
      for (final String key : _keySet) {
        this.checkNBTKey(it_1, key, MCEntityValidator.predicates.isString());
      }
      final HashMap<String, String> properties = CollectionLiterals.<String, String>newHashMap();
      NBTValue _value = it_1.map.get("Properties").getValue();
      final NBTCompound propsVal = ((NBTCompound) _value);
      EList<NBTEntry> _entries = propsVal.getEntries();
      for (final NBTEntry entry : _entries) {
        NBTValue _value_1 = entry.getValue();
        properties.put(entry.getKey(), ((NBTString) _value_1).getValue());
      }
      final Procedure2<String, String> _function_1 = (String key2, String msg) -> {
        this.error(msg, 
          it_1.map.get(key2), 
          McentityPackage.Literals.NBT_ENTRY__KEY);
      };
      blockDef.checkProperties(properties, _function_1);
    };
    this.checkNBTKeyIsObject(it, keyIn, _function);
  }
  
  public void checkItemNBT(final MCEntityValidator.NBTData it, final boolean slot) {
    InputOutput.<String>println("TEST0");
    boolean _isEmpty = it.map.isEmpty();
    if (_isEmpty) {
      return;
    }
    this.checkNBTKey(it, "tag", MCEntityValidator.predicates.isObject());
    this.checkNBTKey(it, "Count", MCEntityValidator.predicates.isByte());
    final Function1<NBTValue, MCEntityValidator.Possibility> _function = (NBTValue it_1) -> {
      return this.isValidItem(it_1);
    };
    final Consumer<NBTValue> _function_1 = (NBTValue value) -> {
      InputOutput.<String>println("TEST1");
      String namespace = null;
      String key = null;
      boolean _matched = false;
      if (value instanceof NBTString) {
        _matched=true;
        final Matcher m = MCEntityValidator.NAMESPACED_KEY_REGEX.matcher(((NBTString)value).getValue());
        boolean _matches = m.matches();
        boolean _not = (!_matches);
        if (_not) {
          throw new AssertionError();
        }
        String _elvis = null;
        String _group = m.group("namespace");
        if (_group != null) {
          _elvis = _group;
        } else {
          _elvis = "minecraft";
        }
        namespace = _elvis;
        key = m.group("key");
      }
      if (!_matched) {
        if (value instanceof NamespacedKey) {
          _matched=true;
          namespace = ((NamespacedKey)value).getNamespace();
          key = ((NamespacedKey)value).getKey();
        }
      }
      if (!_matched) {
        throw new AssertionError();
      }
      Map<String, MCEntityValidator.ItemDef> _get = this.ALL_ITEMS.get(namespace);
      MCEntityValidator.ItemDef _get_1 = null;
      if (_get!=null) {
        _get_1=_get.get(key);
      }
      final MCEntityValidator.ItemDef itemDef = _get_1;
      boolean _containsKey = it.map.containsKey("tag");
      if (_containsKey) {
        InputOutput.<String>println("TEST");
        NBTValue _value = it.map.get("tag").getValue();
        MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(((NBTCompound) _value));
        this.checkItemStackNBT(_nBTData, itemDef);
      }
      boolean _containsKey_1 = it.map.containsKey("Count");
      if (_containsKey_1) {
        final NBTEntry countEntry = it.map.get("Count");
        int _switchResult_1 = (int) 0;
        NBTValue _value_1 = countEntry.getValue();
        final NBTValue countValue = _value_1;
        boolean _matched_1 = false;
        if (countValue instanceof NBTByte) {
          _matched_1=true;
          _switchResult_1 = ((NBTByte)countValue).getValue();
        }
        if (!_matched_1) {
          if (countValue instanceof NBTInt) {
            _matched_1=true;
            _switchResult_1 = ((NBTInt)countValue).getValue();
          }
        }
        if (!_matched_1) {
          throw new AssertionError();
        }
        final int size = _switchResult_1;
        if ((size > itemDef.maxStackSize)) {
          this.warning("Count is greater than the item\'s max stack size", countEntry, 
            McentityPackage.Literals.NBT_ENTRY__VALUE);
        }
      }
    };
    this.<NBTValue>checkNBTKey(it, "id", _function, "Expected an item id", "Unknown item id", _function_1);
    if (((!it.map.containsKey("id")) && it.map.containsKey("tag"))) {
      NBTValue _value = it.map.get("tag").getValue();
      MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(((NBTCompound) _value));
      this.checkItemStackNBT(_nBTData, null);
    }
    this.requiredKeys(it, "id", "Count");
    if (slot) {
      this.checkNBTKeyIsInt(it, "Slot");
      this.requiredKeys(it, "Slot");
    }
    this.checkNoOtherKeys(it);
  }
  
  public void checkItemStackNBT(final MCEntityValidator.NBTData it) {
    this.checkItemStackNBT(it, null);
  }
  
  public void checkItemStackNBT(final MCEntityValidator.NBTData it, final MCEntityValidator.ItemDef itemDef) {
    final Procedure2<NBTValue, Integer> _function = (NBTValue nbt, Integer index) -> {
      MCEntityValidator.Possibility _isValidBlock = this.isValidBlock(nbt);
      if (_isValidBlock != null) {
        switch (_isValidBlock) {
          case YES:
            break;
          case NO:
            this.error("Expected a block id", 
              it.map.get("CanDestroy").getValue(), 
              McentityPackage.Literals.NBT_ARRAY__ELEMENTS, index);
            break;
          case MAYBE:
            this.warning("Unknown block id", 
              it.map.get("CanDestroy").getValue(), 
              McentityPackage.Literals.NBT_ARRAY__ELEMENTS, index);
            break;
          default:
            break;
        }
      }
    };
    this.<NBTValue>checkNBTKeyIsArray(it, "CanDestroy", _function);
    this.checkNBTKeyIsInt(it, "CustomModelData");
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkEnchantmentNBT(it_1);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Enchantments", _function_1);
    this.checkNBTKeyIsInt(it, "RepairCost");
    final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKey(it_1, "AttributeName", MCEntityValidator.predicates.isString().equalTo(MCEntityValidator.allAttributes));
      this.checkNBTKey(it_1, "Name", MCEntityValidator.predicates.isString().equalTo(MCEntityValidator.allAttributes));
      this.checkNBTKey(it_1, "Slot", MCEntityValidator.predicates.isString().equalTo("mainhand", "offhand", "feet", "legs", "chest", "head"));
      this.checkNBTKey(it_1, "Operation", MCEntityValidator.predicates.isInt().range(0, 2));
      this.checkNBTKey(it_1, "Amount", MCEntityValidator.predicates.isDouble().lenient(false));
      this.checkNBTKeyIsLongExact(it_1, "UUIDMost");
      this.checkNBTKeyIsLongExact(it_1, "UUIDLeast");
    };
    this.checkNBTKeyIsArrayOfObjects(it, "AttributeModifiers", _function_2);
    final Consumer<MCEntityValidator.NBTData> _function_3 = (MCEntityValidator.NBTData it_1) -> {
      final Predicate<NBTValue> _function_4 = (NBTValue it_2) -> {
        return (it_2 instanceof NBTJSONTextComponent);
      };
      this.checkNBTKey(it_1, "Name", _function_4, "Expected a JSON text component");
      final Function1<NBTValue, Boolean> _function_5 = (NBTValue it_2) -> {
        return Boolean.valueOf((it_2 instanceof NBTJSONTextComponent));
      };
      this.checkNBTKey(it_1, "Lore", MCEntityValidator.predicates.isArray().matching(MCEntityValidator.predicates.wrap(_function_5, "a JSON text component")));
      this.checkNBTKey(it_1, "color", MCEntityValidator.predicates.isInt());
      this.checkNBTKey(it_1, "MapColor", MCEntityValidator.predicates.isInt());
    };
    this.checkNBTKeyIsObject(it, "display", _function_3);
    if (itemDef!=null) {
      itemDef.check(it);
    }
  }
  
  public void checkEnchantmentNBT(final MCEntityValidator.NBTData it) {
    final Predicate<NBTValue> _function = (NBTValue it_1) -> {
      return this.isValidEnchantment(it_1);
    };
    this.checkNBTKey(it, "id", _function, "Expected an enchantment id");
    MCEntityValidator.Predicates.IntPredicate _isInt = MCEntityValidator.predicates.isInt();
    MCEntityValidator.Predicates.ShortPredicate _isShort = MCEntityValidator.predicates.isShort();
    MCEntityValidator.Predicates.NBTValuePredicate _or = _isInt.operator_or(_isShort);
    this.checkNBTKey(it, "lvl", _or);
    this.requiredKeys(it, "id", "lvl");
    this.checkNoOtherKeys(it);
  }
  
  public void checkDamageableItemStackNBT(final MCEntityValidator.NBTData it) {
    this.checkNBTKeyIsInt(it, "Damage");
    this.checkNBTKeyIsBool(it, "Unbreakable");
  }
  
  public void checkFireworksNBT(final MCEntityValidator.NBTData it) {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsByte(it_1, "Flight");
      final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_2) -> {
        this.checkFireworkExplosionNBT(it_2);
      };
      this.checkNBTKeyIsArrayOfObjects(it_1, "Explosions", _function_1);
    };
    this.checkNBTKeyIsObject(it, "Fireworks", _function);
  }
  
  public void checkFireworkExplosionNBT(final MCEntityValidator.NBTData it) {
    this.checkNBTKeyIsBool(it, "Flicker");
    this.checkNBTKeyIsBool(it, "Trail");
    this.checkNBTKey(it, "Type", MCEntityValidator.predicates.isByte().range(0, 4));
    this.checkNBTKey(it, "Colors", MCEntityValidator.predicates.isArray().matching(MCEntityValidator.predicates.isInt()));
    this.checkNBTKey(it, "FadeColors", MCEntityValidator.predicates.isArray().matching(MCEntityValidator.predicates.isInt()));
  }
  
  public void checkBookPagesNBT(final MCEntityValidator.NBTData it) {
    MCEntityValidator.Predicates.ArrayPredicate _isArray = MCEntityValidator.predicates.isArray();
    MCEntityValidator.Predicates.StringPredicate _isString = MCEntityValidator.predicates.isString();
    final Function1<NBTValue, Boolean> _function = (NBTValue it_1) -> {
      return Boolean.valueOf((it_1 instanceof NBTJSONTextComponent));
    };
    MCEntityValidator.Predicates.NBTValuePredicate _wrap = MCEntityValidator.predicates.wrap(_function, "a JSON text component");
    MCEntityValidator.Predicates.NBTValuePredicate _or = _isString.operator_or(_wrap);
    this.checkNBTKey(it, "pages", _isArray.matching(_or));
  }
  
  public void checkBlockItemStackNBT(final MCEntityValidator.NBTData it) {
    final Procedure2<NBTValue, Integer> _function = (NBTValue nbt, Integer index) -> {
      MCEntityValidator.Possibility _isValidBlock = this.isValidBlock(nbt);
      if (_isValidBlock != null) {
        switch (_isValidBlock) {
          case YES:
            break;
          case NO:
            this.error("Expected a block id", 
              it.map.get("CanPlaceOn").getValue(), 
              McentityPackage.Literals.NBT_ARRAY__ELEMENTS, index);
            break;
          case MAYBE:
            this.warning("Unknown block id", 
              it.map.get("CanPlaceOn").getValue(), 
              McentityPackage.Literals.NBT_ARRAY__ELEMENTS, index);
            break;
          default:
            break;
        }
      }
    };
    this.<NBTValue>checkNBTKeyIsArray(it, "CanPlaceOn", _function);
  }
  
  public static <I extends Object, O extends Object> O with(final I obj, final Function1<? super I, ? extends O> mapper) {
    return mapper.apply(obj);
  }
  
  public void checkNBTKey(final MCEntityValidator.NBTData it, final String key, final Predicate<? super NBTValue> predicate, final String errorMsg) {
    final NBTEntry entry = it.map.get(key);
    if ((entry != null)) {
      it.keys.remove(key);
      boolean _test = predicate.test(entry.getValue());
      boolean _not = (!_test);
      if (_not) {
        this.error(errorMsg, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
      }
    }
  }
  
  public <T extends NBTValue> void checkNBTKey(final MCEntityValidator.NBTData it, final String key, final Predicate<? super NBTValue> predicate, final String errorMsg, final Consumer<T> callback) {
    final NBTEntry entry = it.map.get(key);
    if ((entry != null)) {
      it.keys.remove(key);
      boolean _test = predicate.test(entry.getValue());
      if (_test) {
        NBTValue _value = entry.getValue();
        callback.accept(((T) _value));
      } else {
        this.error(errorMsg, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
      }
    }
  }
  
  public void checkNBTKey(final MCEntityValidator.NBTData it, final String key, final MCEntityValidator.Predicates.NBTValuePredicate predicate) {
    final NBTEntry entry = it.map.get(key);
    if ((entry != null)) {
      it.keys.remove(key);
      boolean _test = predicate.test(entry.getValue());
      boolean _not = (!_test);
      if (_not) {
        String _expected = predicate.getExpected();
        String _plus = ("Expected " + _expected);
        this.error(_plus, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
      }
    }
  }
  
  public <T extends NBTValue> void checkNBTKey(final MCEntityValidator.NBTData it, final String key, final MCEntityValidator.Predicates.NBTValuePredicate predicate, final Consumer<T> callback) {
    final NBTEntry entry = it.map.get(key);
    if ((entry != null)) {
      it.keys.remove(key);
      boolean _test = predicate.test(entry.getValue());
      if (_test) {
        NBTValue _value = entry.getValue();
        callback.accept(((T) _value));
      } else {
        String _expected = predicate.getExpected();
        String _plus = ("Expected " + _expected);
        this.error(_plus, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
      }
    }
  }
  
  public void checkNBTKey(final MCEntityValidator.NBTData it, final String key, final MCEntityValidator.Predicates.NBTValuePredicate predicate, final String errorMsg) {
    final NBTEntry entry = it.map.get(key);
    if ((entry != null)) {
      it.keys.remove(key);
      boolean _test = predicate.test(entry.getValue());
      boolean _not = (!_test);
      if (_not) {
        this.error(errorMsg, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
      }
    }
  }
  
  public <T extends NBTValue> void checkNBTKey(final MCEntityValidator.NBTData it, final String key, final MCEntityValidator.Predicates.NBTValuePredicate predicate, final String errorMsg, final Consumer<T> callback) {
    final NBTEntry entry = it.map.get(key);
    if ((entry != null)) {
      it.keys.remove(key);
      boolean _test = predicate.test(entry.getValue());
      if (_test) {
        NBTValue _value = entry.getValue();
        callback.accept(((T) _value));
      } else {
        this.error(errorMsg, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
      }
    }
  }
  
  public void checkNBTKeyIsObject(final MCEntityValidator.NBTData maks, final String key) {
    this.checkNBTKey(maks, key, MCEntityValidator.predicates.isObject());
  }
  
  public void checkNBTKeyIsObject(final MCEntityValidator.NBTData maks, final String key, final Consumer<MCEntityValidator.NBTData> callback) {
    final Consumer<NBTCompound> _function = (NBTCompound nbt) -> {
      MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(nbt);
      callback.accept(_nBTData);
    };
    this.<NBTCompound>checkNBTKey(maks, key, MCEntityValidator.predicates.isObject(), _function);
  }
  
  public void checkNBTKeyIsArrayOfObjects(final MCEntityValidator.NBTData maks, final String key, final Consumer<MCEntityValidator.NBTData> callback) {
    final Consumer<NBTArray> _function = (NBTArray array) -> {
      final EList<NBTValue> elements = array.getElements();
      for (int i = 0; (i < elements.size()); i++) {
        NBTValue _get = elements.get(i);
        MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(i, ((NBTCompound) _get));
        callback.accept(_nBTData);
      }
    };
    this.<NBTArray>checkNBTKey(maks, key, MCEntityValidator.predicates.isArray().matching(MCEntityValidator.predicates.isObject()), _function);
  }
  
  public void checkNBTKeyIsArrayOfObjects(final MCEntityValidator.NBTData maks, final String key, final String errorMsg, final Consumer<MCEntityValidator.NBTData> callback) {
    final Consumer<NBTArray> _function = (NBTArray array) -> {
      final EList<NBTValue> elements = array.getElements();
      for (int i = 0; (i < elements.size()); i++) {
        NBTValue _get = elements.get(i);
        MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(i, ((NBTCompound) _get));
        callback.accept(_nBTData);
      }
    };
    this.<NBTArray>checkNBTKey(maks, key, MCEntityValidator.predicates.isArray().matching(MCEntityValidator.predicates.isObject()), errorMsg, _function);
  }
  
  public void checkNBTKeyIsArrayOfObjects(final MCEntityValidator.NBTData maks, final String key, final MCEntityValidator.Predicates.IArrayPredicate predicate, final String errorMsg, final Consumer<MCEntityValidator.NBTData> callback) {
    MCEntityValidator.Predicates.ArrayPredicate.MatchingArrayPredicate _matching = MCEntityValidator.predicates.isArray().matching(MCEntityValidator.predicates.isObject());
    MCEntityValidator.Predicates.IArrayPredicate.AndArrayPredicate _and = predicate.operator_and(_matching);
    final Consumer<NBTArray> _function = (NBTArray array) -> {
      final EList<NBTValue> elements = array.getElements();
      for (int i = 0; (i < elements.size()); i++) {
        NBTValue _get = elements.get(i);
        MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(i, ((NBTCompound) _get));
        callback.accept(_nBTData);
      }
    };
    this.<NBTArray>checkNBTKey(maks, key, _and, errorMsg, _function);
  }
  
  public void checkNBTKeyIsArrayOfObjects(final MCEntityValidator.NBTData maks, final String key, final MCEntityValidator.Predicates.IArrayPredicate predicate, final Consumer<MCEntityValidator.NBTData> callback) {
    MCEntityValidator.Predicates.ArrayPredicate.MatchingArrayPredicate _matching = MCEntityValidator.predicates.isArray().matching(MCEntityValidator.predicates.isObject());
    MCEntityValidator.Predicates.IArrayPredicate.AndArrayPredicate _and = predicate.operator_and(_matching);
    final Consumer<NBTArray> _function = (NBTArray it) -> {
      EList<NBTValue> _elements = it.getElements();
      for (final NBTValue element : _elements) {
        MCEntityValidator.NBTData _nBTData = new MCEntityValidator.NBTData(((NBTCompound) element));
        callback.accept(_nBTData);
      }
    };
    this.<NBTArray>checkNBTKey(maks, key, _and, _function);
  }
  
  public <T extends NBTValue> void checkNBTKeyIsArray(final MCEntityValidator.NBTData maks, final String key, final Procedure2<? super T, ? super Integer> callback) {
    final Consumer<NBTArray> _function = (NBTArray array) -> {
      final EList<NBTValue> elements = array.getElements();
      for (int i = 0; (i < elements.size()); i++) {
        NBTValue _get = elements.get(i);
        callback.apply(((T) _get), Integer.valueOf(i));
      }
    };
    this.<NBTArray>checkNBTKey(maks, key, MCEntityValidator.predicates.isArray(), _function);
  }
  
  public void checkNBTKeyIsArray(final MCEntityValidator.NBTData maks, final String key, final MCEntityValidator.Predicates.IArrayPredicate predicate, final MCEntityValidator.Predicates.NBTValuePredicate elementPredicate) {
    final Consumer<NBTArray> _function = (NBTArray it) -> {
      for (int i = 0; (i < it.getElements().size()); i++) {
        {
          final NBTValue element = it.getElements().get(i);
          boolean _test = elementPredicate.test(element);
          boolean _not = (!_test);
          if (_not) {
            String _expected = elementPredicate.getExpected();
            String _plus = ("Expected " + _expected);
            this.error(_plus, it, 
              element.eContainingFeature(), i);
          }
        }
      }
    };
    this.<NBTArray>checkNBTKey(maks, key, predicate, _function);
  }
  
  public void checkNBTKeyIsVec3D(final MCEntityValidator.NBTData maks, final String key) {
    final Predicate<NBTValue> _function = (NBTValue it) -> {
      return MCEntityValidator.isVec3D(it);
    };
    this.checkNBTKey(maks, key, _function, "Expected an array of 3 doubles");
  }
  
  public void checkNBTKeyIsBool(final MCEntityValidator.NBTData maks, final String key) {
    this.checkNBTKey(maks, key, MCEntityValidator.predicates.isBool());
  }
  
  public void checkNBTKeyIsByte(final MCEntityValidator.NBTData maks, final String key) {
    this.checkNBTKey(maks, key, MCEntityValidator.predicates.isByte());
  }
  
  public void checkNBTKeyIsInt(final MCEntityValidator.NBTData maks, final String key) {
    this.checkNBTKey(maks, key, MCEntityValidator.predicates.isInt());
  }
  
  public void checkNBTKeyIsLong(final MCEntityValidator.NBTData maks, final String key) {
    this.checkNBTKey(maks, key, MCEntityValidator.predicates.isLong());
  }
  
  public void checkNBTKeyIsLongExact(final MCEntityValidator.NBTData maks, final String key) {
    this.checkNBTKey(maks, key, MCEntityValidator.predicates.isLong().lenient(false));
  }
  
  public void checkNBTKey(final MCEntityValidator.NBTData it, final String key, final Function1<? super NBTValue, ? extends MCEntityValidator.Possibility> tester, final String errorMsg, final String warningMsg) {
    final NBTEntry entry = it.map.get(key);
    if ((entry != null)) {
      it.keys.remove(key);
      MCEntityValidator.Possibility _apply = tester.apply(entry.getValue());
      if (_apply != null) {
        switch (_apply) {
          case MAYBE:
            this.warning(warningMsg, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
            break;
          case NO:
            this.error(errorMsg, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
            break;
          default:
            break;
        }
      }
    }
  }
  
  public <T extends NBTValue> void checkNBTKey(final MCEntityValidator.NBTData it, final String key, final Function1<? super NBTValue, ? extends MCEntityValidator.Possibility> tester, final String errorMsg, final String warningMsg, final Consumer<T> callback) {
    final NBTEntry entry = it.map.get(key);
    if ((entry != null)) {
      it.keys.remove(key);
      MCEntityValidator.Possibility _apply = tester.apply(entry.getValue());
      if (_apply != null) {
        switch (_apply) {
          case MAYBE:
            this.warning(warningMsg, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
            NBTValue _value = entry.getValue();
            callback.accept(((T) _value));
            break;
          case NO:
            this.error(errorMsg, entry, McentityPackage.Literals.NBT_ENTRY__VALUE);
            break;
          case YES:
            NBTValue _value_1 = entry.getValue();
            callback.accept(((T) _value_1));
            break;
          default:
            break;
        }
      }
    }
  }
  
  public void requiredKeys(final MCEntityValidator.NBTData it, final String... requiredKeys) {
    final HashSet<String> missingKeys = CollectionLiterals.<String>newHashSet(requiredKeys);
    missingKeys.removeAll(it.map.keySet());
    boolean _isEmpty = missingKeys.isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("Missing required key");
      String _s = MCEntityValidator.s(missingKeys.size());
      _builder.append(_s);
      _builder.append(" ");
      {
        boolean _hasElements = false;
        for(final String key : missingKeys) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder.appendImmediate(",", "");
          }
          _builder.append(key);
        }
      }
      this.error(_builder.toString(), 
        it.nbt.eContainer(), 
        it.nbt.eContainingFeature(), 
        it.index);
    }
  }
  
  private static final Set<String> genericAttributes = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("generic.maxHealth", "generic.followRange", "generic.knockbackResistance", "generic.movementSpeed", "generic.attackDamage", "generic.armor", "generic.armorToughness", "generic.attackKnockback", "generic.attackSpeed", "generic.luck"));
  
  private static final ImmutableSet<String> horseAttributes = ImmutableSet.<String>copyOf(Iterables.<String>concat(MCEntityValidator.genericAttributes, Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("horse.jumpStrength"))));
  
  private static final ImmutableSet<String> parrotAttributes = ImmutableSet.<String>copyOf(Iterables.<String>concat(MCEntityValidator.genericAttributes, Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("generic.flyingSpeed"))));
  
  private static final ImmutableSet<String> zombieAttributes = ImmutableSet.<String>copyOf(Iterables.<String>concat(MCEntityValidator.genericAttributes, Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("zombie.spawnReinforcements"))));
  
  private static final ImmutableSet<String> allAttributes = ImmutableSet.<String>copyOf(Iterables.<String>concat(MCEntityValidator.genericAttributes, Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("horse.jumpStrength", "generic.flyingSpeed", "zombie.spawnReinforcements"))));
  
  public MCEntityValidator.ItemDef toItem(final MCEntityValidator.EntityDef entity) {
    final Procedure1<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it) -> {
      final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
        this.checkEntityNBT(it_1, entity);
      };
      this.checkNBTKeyIsObject(it, "EntityTag", _function_1);
    };
    return new MCEntityValidator.ItemDef(_function);
  }
  
  private final MCEntityValidator.EntityDef DEFAULT_ENTITY_DEF = new MCEntityValidator.EntityDef();
  
  private final MCEntityValidator.EntityDef DEFAULT_MOB_DEF = new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
  }));
  
  private final MCEntityValidator.EntityDef DEFAULT_BREEDABLE_MOB_DEF = new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
  }));
  
  private final MCEntityValidator.EntityDef DEFAULT_TAMEABLE_MOB_DEF = new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, false, true);
  }));
  
  private final MCEntityValidator.EntityDef DEFAULT_BREEDABLE_TAMEABLE_MOB_DEF = new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, true);
  }));
  
  private final MCEntityValidator.EntityDef DEFAULT_FISH_MOB_DEF = new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkFishNBT(it);
  }));
  
  private final Map<String, Map<String, MCEntityValidator.EntityDef>> ALL_ENTITIES = Collections.<String, Map<String, MCEntityValidator.EntityDef>>unmodifiableMap(CollectionLiterals.<String, Map<String, MCEntityValidator.EntityDef>>newHashMap(Pair.<String, Map<String, MCEntityValidator.EntityDef>>of("minecraft", Collections.<String, MCEntityValidator.EntityDef>unmodifiableMap(CollectionLiterals.<String, MCEntityValidator.EntityDef>newHashMap(Pair.<String, MCEntityValidator.EntityDef>of("bat", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBool(it, "BatFlags");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("blaze", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("cat", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, true);
    this.checkNBTKey(it, "CatType", MCEntityValidator.predicates.isInt().range(0, 10));
    this.checkNBTKey(it, "CollarColor", MCEntityValidator.predicates.isByte().range(0, 15));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("cave_spider", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("chicken", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    this.checkNBTKeyIsBool(it, "IsChickenJockey");
    this.checkNBTKey(it, "EggLayTime", MCEntityValidator.predicates.isInt().min(0));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("cod", this.DEFAULT_FISH_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("cow", this.DEFAULT_TAMEABLE_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("creeper", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBool(it, "powered");
    this.checkNBTKey(it, "ExplosionRadius", MCEntityValidator.predicates.isByte().min(0));
    this.checkNBTKey(it, "Fuse", MCEntityValidator.predicates.isShort().min(0));
    this.checkNBTKeyIsBool(it, "ignited");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("dolphin", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsInt(it, "TreasurePosX");
    this.checkNBTKeyIsInt(it, "TreasurePosY");
    this.checkNBTKeyIsInt(it, "TreasurePosZ");
    this.checkNBTKeyIsBool(it, "GotFish");
    this.checkNBTKeyIsBool(it, "CanFindTreasure");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("donkey", new MCEntityValidator.EntityDef(true, MCEntityValidator.horseAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBaseHorseNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "ArmorItem", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "SaddleItem", _function_1);
    this.checkNBTKeyIsBool(it, "ChestedHorse");
    final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, true);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Items", _function_2);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("drowned", new MCEntityValidator.EntityDef(true, MCEntityValidator.zombieAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkZombieNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("elder_guardian", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("ender_dragon", new MCEntityValidator.EntityDef(false, MCEntityValidator.genericAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "DragonPhase", MCEntityValidator.predicates.isInt().range(0, 10));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("enderman", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBlockstate(it, "carriedBlockstate");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("endermite", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKey(it, "Lifetime", MCEntityValidator.predicates.isInt().range(0, 2400));
    this.checkNBTKeyIsBool(it, "PlayerSpawned");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("evoker", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkRaiderNBT(it);
    this.checkNBTKey(it, "SpellTicks", MCEntityValidator.predicates.isInt().min(0));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("fox", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.requiredKeys(it_1, "L", "M");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "TrustedUUIDs", _function);
    this.checkNBTKeyIsBool(it, "Sleeping");
    this.checkNBTKey(it, "Type", MCEntityValidator.predicates.isString().equalTo("red", "snow"));
    this.checkNBTKeyIsBool(it, "Sitting");
    this.checkNBTKeyIsBool(it, "Crouching");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("ghast", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsInt(it, "ExplosionPower");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("giant", new MCEntityValidator.EntityDef(false, MCEntityValidator.genericAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("guardian", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("horse", new MCEntityValidator.EntityDef(true, MCEntityValidator.horseAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBaseHorseNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "ArmorItem", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "SaddleItem", _function_1);
    this.checkNBTKeyIsBool(it, "ChestedHorse");
    this.checkNBTKey(it, "Temper", MCEntityValidator.predicates.isInt().range(0, 100));
    this.checkNBTKeyIsInt(it, "Variant");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("husk", new MCEntityValidator.EntityDef(true, MCEntityValidator.zombieAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkZombieNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("illusioner", new MCEntityValidator.EntityDef(false, MCEntityValidator.genericAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkRaiderNBT(it);
    this.checkNBTKey(it, "SpellTicks", MCEntityValidator.predicates.isInt().min(0));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("iron_golem", new MCEntityValidator.EntityDef(false, MCEntityValidator.genericAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBool(it, "PlayerCreated");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("llama", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBaseHorseNBT(it);
    this.checkNBTKey(it, "Temper", MCEntityValidator.predicates.isInt().range(0, 100));
    this.checkNBTKey(it, "Variant", MCEntityValidator.predicates.isInt().range(0, 3));
    this.checkNBTKey(it, "Strength", MCEntityValidator.predicates.isInt().range(1, 5));
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "DecorItem", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, true);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Items", _function_1);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("magma_cube", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKey(it, "Size", MCEntityValidator.predicates.isInt().min(0));
    this.checkNBTKeyIsBool(it, "wasOnGround");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("mooshroom", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    this.checkNBTKey(it, "Type", MCEntityValidator.predicates.isString().equalTo("red", "brown"));
    this.checkNBTKeyIsByte(it, "EffectId");
    this.checkNBTKeyIsInt(it, "EffectDuration");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("mule", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBaseHorseNBT(it);
    this.checkNBTKey(it, "Temper", MCEntityValidator.predicates.isInt().range(0, 100));
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "ArmorItem", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "SaddleItem", _function_1);
    this.checkNBTKeyIsBool(it, "ChestedHorse");
    final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, true);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Items", _function_2);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("ocelot", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    this.checkNBTKeyIsBool(it, "Trusting");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("panda", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    this.checkNBTKey(it, "MainGene", MCEntityValidator.predicates.isString().equalTo(this.PANDA_GENES));
    this.checkNBTKey(it, "HiddenGene", MCEntityValidator.predicates.isString().equalTo(this.PANDA_GENES));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("parrot", new MCEntityValidator.EntityDef(true, MCEntityValidator.parrotAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, false, true);
    this.checkNBTKey(it, "Variant", MCEntityValidator.predicates.isInt().range(0, 4));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("phantom", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsInt(it, "AX");
    this.checkNBTKeyIsInt(it, "AY");
    this.checkNBTKeyIsInt(it, "AZ");
    this.checkNBTKey(it, "Size", MCEntityValidator.predicates.isInt().range(0, 64));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("pig", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    this.checkNBTKeyIsBool(it, "Saddle");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("pillager", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkRaiderNBT(it);
    this.checkNBTKey(it, "Inventory", MCEntityValidator.predicates.isArray());
  }))), Pair.<String, MCEntityValidator.EntityDef>of("polar_bear", this.DEFAULT_TAMEABLE_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("pufferfish", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkFishNBT(it);
    this.checkNBTKey(it, "PuffState", MCEntityValidator.predicates.isInt().range(0, 2));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("rabbit", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    MCEntityValidator.Predicates.IntPredicate.RangeIntPredicate _range = MCEntityValidator.predicates.isInt().range(0, 5);
    MCEntityValidator.Predicates.IntPredicate.ExactIntPredicate _exact = MCEntityValidator.predicates.isInt().exact(99);
    MCEntityValidator.Predicates.NBTValuePredicate _or = _range.operator_or(_exact);
    this.checkNBTKey(it, "RabbitType", _or);
    this.checkNBTKey(it, "MoreCarrotTicks", MCEntityValidator.predicates.isInt().min(0));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("ravager", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkRaiderNBT(it);
    this.checkNBTKeyIsInt(it, "AttackTick");
    this.checkNBTKeyIsInt(it, "RoarTick");
    this.checkNBTKeyIsInt(it, "StunTick");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("salmon", this.DEFAULT_FISH_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("sheep", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    this.checkNBTKeyIsBool(it, "Sheared");
    this.checkNBTKey(it, "Color", MCEntityValidator.predicates.isByte().range(0, 0xFFFFFF));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("shulker", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsByte(it, "Peek");
    this.checkNBTKey(it, "AttachFace", MCEntityValidator.predicates.isByte().range(0, 5));
    this.checkNBTKey(it, "Color", MCEntityValidator.predicates.isByte().range(0, 16));
    this.checkNBTKeyIsInt(it, "APX");
    this.checkNBTKeyIsInt(it, "APY");
    this.checkNBTKeyIsInt(it, "APZ");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("silverfish", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("skeleton", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("skeleton_horse", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBaseHorseNBT(it);
    this.checkNBTKey(it, "Temper", MCEntityValidator.predicates.isInt().range(0, 100));
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "ArmorItem", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "SaddleItem", _function_1);
    this.checkNBTKeyIsBool(it, "SkeletonTrap");
    this.checkNBTKey(it, "SkeletonTrapTime", MCEntityValidator.predicates.isInt().max(18000));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("slime", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKey(it, "Size", MCEntityValidator.predicates.isInt().min(0));
    this.checkNBTKeyIsBool(it, "wasOnGround");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("snow_golem", new MCEntityValidator.EntityDef(false, MCEntityValidator.genericAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBool(it, "Pumpkin");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("spider", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("squid", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("stray", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("trader_llama", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBaseHorseNBT(it);
    this.checkNBTKey(it, "Temper", MCEntityValidator.predicates.isInt().range(0, 100));
    this.checkNBTKey(it, "Variant", MCEntityValidator.predicates.isInt().range(0, 3));
    this.checkNBTKey(it, "Strength", MCEntityValidator.predicates.isInt().range(1, 5));
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "DecorItem", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, true);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Items", _function_1);
    this.checkNBTKeyIsInt(it, "DespawnDelay");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("tropical_fish", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsBool(it, "FromBucket");
    this.checkNBTKey(it, "Variant", MCEntityValidator.predicates.isInt().range(0, 0xFFFF));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("turtle", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    this.checkNBTKeyIsBool(it, "HasEgg");
    this.checkNBTKeyIsInt(it, "HomePosX");
    this.checkNBTKeyIsInt(it, "HomePosY");
    this.checkNBTKeyIsInt(it, "HomePosZ");
    this.checkNBTKeyIsInt(it, "TravelPosX");
    this.checkNBTKeyIsInt(it, "TravelPosY");
    this.checkNBTKeyIsInt(it, "TravelPosZ");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("vex", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKeyIsInt(it, "BoundX");
    this.checkNBTKeyIsInt(it, "BoundY");
    this.checkNBTKeyIsInt(it, "BoundZ");
    this.checkNBTKey(it, "LifeTicks", MCEntityValidator.predicates.isInt().min(0));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("villager", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, false);
    this.checkVillagerNBT(it);
    this.checkNBTKeyIsBool(it, "Willing");
    this.checkNBTKeyIsLong(it, "LastRestock");
    this.checkNBTKeyIsLong(it, "LastGossipDecay");
    this.checkNBTKey(it, "ResocksToday", MCEntityValidator.predicates.isInt().min(0));
    this.checkNBTKeyIsInt(it, "Xp");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, true);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Inventory", MCEntityValidator.predicates.isArray().rangeSize(0, 8), _function);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("vindicator", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkRaiderNBT(it);
    this.checkNBTKeyIsBool(it, "Johnny");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("wandering_trader", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKeyIsInt(it, "DespawnDelay");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsInt(it_1, "X");
      this.checkNBTKeyIsInt(it_1, "Y");
      this.checkNBTKeyIsInt(it_1, "Z");
      this.requiredKeys(it_1, "X", "Y", "Z");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "WanderTarget", _function);
    this.checkTraderOffersNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("witch", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkRaiderNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("wither", new MCEntityValidator.EntityDef(false, MCEntityValidator.genericAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it);
    this.checkNBTKey(it, "Invul", MCEntityValidator.predicates.isInt().min(0));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("wither_skeleton", this.DEFAULT_MOB_DEF), Pair.<String, MCEntityValidator.EntityDef>of("wolf", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMobNBT(it, true, true);
    this.checkNBTKeyIsBool(it, "Angry");
    this.checkNBTKey(it, "CollarColor", MCEntityValidator.predicates.isByte().range(0, 15));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("zombie", new MCEntityValidator.EntityDef(true, MCEntityValidator.zombieAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkZombieNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("zombie_horse", new MCEntityValidator.EntityDef(true, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBaseHorseNBT(it);
    this.checkNBTKey(it, "Temper", MCEntityValidator.predicates.isInt().range(0, 100));
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "ArmorItem", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "SaddleItem", _function_1);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("zombie_pigman", new MCEntityValidator.EntityDef(true, MCEntityValidator.zombieAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkZombieNBT(it);
    this.checkNBTKey(it, "Anger", MCEntityValidator.predicates.isShort());
    final Predicate<NBTValue> _function = (NBTValue it_1) -> {
      return MCEntityValidator.isUUID(it_1);
    };
    this.checkNBTKey(it, "HurtBy", _function, "Expected a UUID");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("zombie_villager", new MCEntityValidator.EntityDef(true, MCEntityValidator.zombieAttributes, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkZombieNBT(it);
    this.checkVillagerNBT(it);
    this.checkNBTKeyIsInt(it, "ConversionTime");
    this.checkNBTKeyIsLongExact(it, "ConversionPlayerLeast");
    this.checkNBTKeyIsLongExact(it, "ConversionPlayerMost");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("arrow", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    this.checkNBTKey(it, "pickup", MCEntityValidator.predicates.isByte().range(0, 2));
    this.checkNBTKeyIsBool(it, "player");
    this.checkNBTKey(it, "life", MCEntityValidator.predicates.isShort());
    this.checkNBTKey(it, "damage", MCEntityValidator.predicates.isDouble());
    this.checkNBTKeyIsBool(it, "inGround");
    this.checkNBTKeyIsBool(it, "crit");
    this.checkNBTKeyIsBool(it, "ShotFromCrossbow");
    this.checkNBTKeyIsByte(it, "PierceLevel");
    MCEntityValidator.Predicates.StringPredicate _isString = MCEntityValidator.predicates.isString();
    MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate _equalTo = MCEntityValidator.predicates.isString().equalTo("");
    MCEntityValidator.Predicates.NBTValuePredicate _not = _equalTo.operator_not();
    MCEntityValidator.Predicates.NBTValuePredicate _and = _isString.operator_and(_not);
    this.checkNBTKey(it, "SoundEvent", _and);
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDMost");
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDLeast");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("tipped_arrow", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    this.checkNBTKey(it, "pickup", MCEntityValidator.predicates.isByte().range(0, 2));
    this.checkNBTKeyIsBool(it, "player");
    this.checkNBTKey(it, "life", MCEntityValidator.predicates.isShort());
    this.checkNBTKey(it, "damage", MCEntityValidator.predicates.isDouble());
    this.checkNBTKeyIsBool(it, "inGround");
    this.checkNBTKeyIsBool(it, "crit");
    this.checkNBTKeyIsBool(it, "ShotFromCrossbow");
    this.checkNBTKeyIsByte(it, "PierceLevel");
    MCEntityValidator.Predicates.StringPredicate _isString = MCEntityValidator.predicates.isString();
    MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate _equalTo = MCEntityValidator.predicates.isString().equalTo("");
    MCEntityValidator.Predicates.NBTValuePredicate _not = _equalTo.operator_not();
    MCEntityValidator.Predicates.NBTValuePredicate _and = _isString.operator_and(_not);
    this.checkNBTKey(it, "SoundEvent", _and);
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDMost");
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDLeast");
    this.checkNBTKey(it, "Color", MCEntityValidator.predicates.isInt().range(0, 0xFFFFFF));
    this.checkPotionNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("spectral_arrow", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    this.checkNBTKey(it, "pickup", MCEntityValidator.predicates.isByte().range(0, 2));
    this.checkNBTKeyIsBool(it, "player");
    this.checkNBTKey(it, "life", MCEntityValidator.predicates.isShort());
    this.checkNBTKey(it, "damage", MCEntityValidator.predicates.isDouble());
    this.checkNBTKeyIsBool(it, "inGround");
    this.checkNBTKeyIsBool(it, "crit");
    this.checkNBTKeyIsBool(it, "ShotFromCrossbow");
    this.checkNBTKeyIsByte(it, "PierceLevel");
    MCEntityValidator.Predicates.StringPredicate _isString = MCEntityValidator.predicates.isString();
    MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate _equalTo = MCEntityValidator.predicates.isString().equalTo("");
    MCEntityValidator.Predicates.NBTValuePredicate _not = _equalTo.operator_not();
    MCEntityValidator.Predicates.NBTValuePredicate _and = _isString.operator_and(_not);
    this.checkNBTKey(it, "SoundEvent", _and);
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDMost");
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDLeast");
    this.checkNBTKeyIsInt(it, "Duration");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("dragon_fireball", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "direction", MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isDouble()));
    this.checkNBTKey(it, "power", MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isDouble()));
    this.checkNBTKey(it, "life", MCEntityValidator.predicates.isInt().min(0));
    this.requiredKeys(it, "direction", "power");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("egg", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.requiredKeys(it_1, "L", "M");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "owner", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function_1);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("ender_pearl", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.requiredKeys(it_1, "L", "M");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "owner", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function_1);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("experience_bottle", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.requiredKeys(it_1, "L", "M");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "owner", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function_1);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("fireball", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "direction", MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isDouble()));
    this.checkNBTKey(it, "power", MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isDouble()));
    this.checkNBTKey(it, "life", MCEntityValidator.predicates.isInt().min(0));
    this.checkNBTKeyIsInt(it, "ExplosionPower");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function);
    this.requiredKeys(it, "direction", "power");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("llama_spit", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "OwnerUUIDMost");
      this.checkNBTKeyIsLongExact(it_1, "OwnerUUIDLeast");
      this.requiredKeys(it_1, "OwnerUUIDMost", "OwnerUUIDLeast");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "Owner", _function);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("potion", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.requiredKeys(it_1, "L", "M");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "owner", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Potion", _function_1);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("shulker_bullet", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.checkNBTKeyIsInt(it_1, "X");
      this.checkNBTKeyIsInt(it_1, "Y");
      this.checkNBTKeyIsInt(it_1, "Z");
      this.requiredKeys(it_1, "L", "M");
    };
    this.checkNBTKeyIsObject(it, "Owner", _function);
    this.checkNBTKeyIsInt(it, "Steps");
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.checkNBTKeyIsInt(it_1, "X");
      this.checkNBTKeyIsInt(it_1, "Y");
      this.checkNBTKeyIsInt(it_1, "Z");
      this.requiredKeys(it_1, "L", "M");
    };
    this.checkNBTKeyIsObject(it, "Target", _function_1);
    this.checkNBTKey(it, "TXD", MCEntityValidator.predicates.isDouble());
    this.checkNBTKey(it, "TYD", MCEntityValidator.predicates.isDouble());
    this.checkNBTKey(it, "TZD", MCEntityValidator.predicates.isDouble());
  }))), Pair.<String, MCEntityValidator.EntityDef>of("small_fireball", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "direction", MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isDouble()));
    this.checkNBTKey(it, "power", MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isDouble()));
    this.checkNBTKey(it, "life", MCEntityValidator.predicates.isInt().min(0));
    this.checkNBTKeyIsInt(it, "ExplosionPower");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function);
    this.requiredKeys(it, "direction", "power");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("snowball", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.requiredKeys(it_1, "L", "M");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "owner", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function_1);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("trident", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkProjectileNBT(it);
    this.checkNBTKey(it, "pickup", MCEntityValidator.predicates.isByte().range(0, 2));
    this.checkNBTKeyIsBool(it, "player");
    this.checkNBTKey(it, "life", MCEntityValidator.predicates.isShort());
    this.checkNBTKey(it, "damage", MCEntityValidator.predicates.isDouble());
    this.checkNBTKeyIsBool(it, "inGround");
    this.checkNBTKeyIsBool(it, "crit");
    this.checkNBTKeyIsBool(it, "ShotFromCrossbow");
    this.checkNBTKeyIsByte(it, "PierceLevel");
    MCEntityValidator.Predicates.StringPredicate _isString = MCEntityValidator.predicates.isString();
    MCEntityValidator.Predicates.StringPredicate.EqualsStringPredicate _equalTo = MCEntityValidator.predicates.isString().equalTo("");
    MCEntityValidator.Predicates.NBTValuePredicate _not = _equalTo.operator_not();
    MCEntityValidator.Predicates.NBTValuePredicate _and = _isString.operator_and(_not);
    this.checkNBTKey(it, "SoundEvent", _and);
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDMost");
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDLeast");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("wither_skull", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "direction", MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isDouble()));
    this.checkNBTKey(it, "power", MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isDouble()));
    this.checkNBTKey(it, "life", MCEntityValidator.predicates.isInt().min(0));
    this.requiredKeys(it, "direction", "power");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("experience_orb", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "Age", MCEntityValidator.predicates.isShort());
    this.checkNBTKeyIsByte(it, "Health");
    this.checkNBTKey(it, "Value", MCEntityValidator.predicates.isShort());
  }))), Pair.<String, MCEntityValidator.EntityDef>of("item", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "Age", MCEntityValidator.predicates.isShort());
    this.checkNBTKey(it, "Health", MCEntityValidator.predicates.isShort());
    this.checkNBTKey(it, "PickupDelay", MCEntityValidator.predicates.isShort());
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.requiredKeys(it_1, "L", "M");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "Owner", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "L");
      this.checkNBTKeyIsLongExact(it_1, "M");
      this.requiredKeys(it_1, "L", "M");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "Thrower", _function_1);
    final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function_2);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("boat", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "Type", MCEntityValidator.predicates.isString().equalTo(this.WOOD_TYPES));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("minecart", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMinecartNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("chest_minecart", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMinecartNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, true);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Items", _function);
    this.checkLootableNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("command_block_minecart", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMinecartNBT(it);
    this.checkCommandBlockNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("furnace_minecart", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMinecartNBT(it);
    this.checkNBTKey(it, "PushX", MCEntityValidator.predicates.isDouble());
    this.checkNBTKey(it, "PushZ", MCEntityValidator.predicates.isDouble());
    this.checkNBTKey(it, "Fuel", MCEntityValidator.predicates.isShort());
  }))), Pair.<String, MCEntityValidator.EntityDef>of("hopper_minecart", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMinecartNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, true);
      this.checkNBTKey(it_1, "Slot", MCEntityValidator.predicates.isInt().range(0, 4));
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Items", MCEntityValidator.predicates.isArray().rangeSize(0, 4), _function);
    this.checkNBTKey(it, "TransferCooldown", MCEntityValidator.predicates.isInt().range(0, 8));
    this.checkNBTKeyIsBool(it, "Enabled");
    this.checkLootableNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("spawner_minecart", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMinecartNBT(it);
    this.checkSpawnerNBT(it);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("tnt_minecart", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkMinecartNBT(it);
    this.checkNBTKey(it, "TNTFuse", MCEntityValidator.predicates.isInt().min((-1)));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("falling_block", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final AtomicReference<MCEntityValidator.NBTData> tileEntityData = new AtomicReference<MCEntityValidator.NBTData>();
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      tileEntityData.set(it_1);
    };
    this.checkNBTKeyIsObject(it, "TileEntityData", _function);
    this.checkNBTKeyIsBlockstate(it, "BlockState", tileEntityData.get());
    this.checkNBTKey(it, "Time", MCEntityValidator.predicates.isInt().min(0));
    this.checkNBTKeyIsBool(it, "DropItem");
    this.checkNBTKeyIsBool(it, "HurtEntities");
    this.checkNBTKeyIsInt(it, "FallHurtMax");
    this.checkNBTKey(it, "FallHurtAmount", MCEntityValidator.predicates.isFloat());
  }))), Pair.<String, MCEntityValidator.EntityDef>of("tnt", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKey(it, "Fuse", MCEntityValidator.predicates.isShort().min(0));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("area_effect_cloud", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKeyIsInt(it, "Age");
    this.checkNBTKey(it, "Color", MCEntityValidator.predicates.isInt().range(0, 0xFFFFFF));
    this.checkNBTKeyIsInt(it, "Duration");
    this.checkNBTKeyIsInt(it, "ReapplicationDelay");
    this.checkNBTKeyIsInt(it, "WaitTime");
    this.checkNBTKeyIsInt(it, "DurationOnUse");
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDLeast");
    this.checkNBTKeyIsLongExact(it, "OwnerUUIDMost");
    this.checkNBTKey(it, "Radius", MCEntityValidator.predicates.isFloat());
    this.checkNBTKey(it, "RadiusOnUse", MCEntityValidator.predicates.isFloat());
    this.checkNBTKey(it, "RadiusPerTick", MCEntityValidator.predicates.isFloat());
    this.checkNBTKey(it, "Particle", MCEntityValidator.predicates.isString());
    this.checkNBTKey(it, "Potion", MCEntityValidator.predicates.isString().equalTo(this.DEFAULT_POTION_TYPES));
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKey(it_1, "Id", MCEntityValidator.predicates.isInt().range(1, 32));
      this.checkNBTKeyIsByte(it_1, "Amplifier");
      this.checkNBTKeyIsInt(it_1, "Duration");
      this.checkNBTKeyIsBool(it_1, "Ambient");
      this.checkNBTKeyIsBool(it_1, "ShowParticles");
      this.checkNBTKeyIsBool(it_1, "ShowIcon");
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Effects", _function);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("armor_stand", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKey(it_1, "Id", MCEntityValidator.predicates.isInt().range(1, 32));
      this.checkNBTKeyIsByte(it_1, "Amplifier");
      this.checkNBTKeyIsInt(it_1, "Duration");
      this.checkNBTKeyIsBool(it_1, "Ambient");
      this.checkNBTKeyIsBool(it_1, "ShowParticles");
      this.checkNBTKeyIsBool(it_1, "ShowIcon");
    };
    this.checkNBTKeyIsArrayOfObjects(it, "ActiveEffects", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "HandItems", MCEntityValidator.predicates.isArray().size(2), _function_1);
    final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "ArmorItems", MCEntityValidator.predicates.isArray().size(4), _function_2);
    this.checkNBTKeyIsBool(it, "Marker");
    this.checkNBTKeyIsBool(it, "Invisible");
    this.checkNBTKeyIsBool(it, "NoBasePlate");
    this.checkNBTKeyIsBool(it, "FallFlying");
    final Consumer<MCEntityValidator.NBTData> _function_3 = (MCEntityValidator.NBTData it_1) -> {
      final MCEntityValidator.Predicates.ArrayPredicate.SizeArrayPredicate.SizeMatchingArrayPredicate check = MCEntityValidator.predicates.isArray().size(3).matching(MCEntityValidator.predicates.isFloat());
      for (final String key : Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("Body", "LeftArm", "RightArm", "LeftLeg", "RightLeg", "Head"))) {
        this.checkNBTKey(it_1, key, check);
      }
    };
    this.checkNBTKeyIsObject(it, "Pose", _function_3);
    this.checkNBTKeyIsBool(it, "ShowArms");
    this.checkNBTKeyIsBool(it, "Small");
    this.checkNBTKeyIsInt(it, "DisabledSlots");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("end_crystal", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKeyIsBool(it, "ShowBottom");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsInt(it_1, "X");
      this.checkNBTKeyIsInt(it_1, "Y");
      this.checkNBTKeyIsInt(it_1, "Z");
      this.requiredKeys(it_1, "X", "Y", "Z");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "BeamTarget", _function);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("evoker_fangs", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKeyIsInt(it, "Warmup");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkNBTKeyIsLongExact(it_1, "OwnerUUIDLeast");
      this.checkNBTKeyIsLongExact(it_1, "OwnerUUIDMost");
      this.requiredKeys(it_1, "OwnerUUIDLeast", "OwnerUUIDMost");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsObject(it, "Owner", _function);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("eye_of_ender", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("firework_rocket", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKeyIsInt(it, "Life");
    this.checkNBTKeyIsInt(it, "LifeTime");
    this.checkNBTKeyIsBool(it, "ShotAtAngle");
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "FireworksItem", _function);
  }))), Pair.<String, MCEntityValidator.EntityDef>of("item_frame", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKeyIsInt(it, "TileX");
    this.checkNBTKeyIsInt(it, "TileY");
    this.checkNBTKeyIsInt(it, "TileZ");
    this.checkNBTKey(it, "Facing", MCEntityValidator.predicates.isByte().range(0, 5));
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkItemNBT(it_1, false);
    };
    this.checkNBTKeyIsObject(it, "Item", _function);
    this.checkNBTKey(it, "ItemDropChance", MCEntityValidator.predicates.isFloat().range(0.0f, 1.0f));
    this.checkNBTKey(it, "ItemRotation", MCEntityValidator.predicates.isByte().range(0, 8));
  }))), Pair.<String, MCEntityValidator.EntityDef>of("painting", new MCEntityValidator.EntityDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKeyIsInt(it, "TileX");
    this.checkNBTKeyIsInt(it, "TileY");
    this.checkNBTKeyIsInt(it, "TileZ");
    this.checkNBTKey(it, "Facing", MCEntityValidator.predicates.isByte().range(0, 5));
    final Predicate<NBTValue> _function = (NBTValue it_1) -> {
      return this.isValidPainting(it_1);
    };
    this.checkNBTKey(it, "Motive", _function, "Expected a painting id");
  }))), Pair.<String, MCEntityValidator.EntityDef>of("fishing_bobber", new MCEntityValidator.EntityDef()))))));
  
  public static MCEntityValidator.PropertyDef property(final String... options) {
    return MCEntityValidator.property(CollectionLiterals.<String>newHashSet(options));
  }
  
  public static MCEntityValidator.PropertyDef property(final Set<String> options) {
    final MCEntityValidator.PropertyDef _function = (String it) -> {
      return options.contains(it);
    };
    return _function;
  }
  
  private static final MCEntityValidator.PropertyDef BOOL_PROPERTY = ((MCEntityValidator.PropertyDef) (String it) -> {
    return (Objects.equal(it, "true") || Objects.equal(it, "false"));
  });
  
  public static MCEntityValidator.PropertyDef property(final int min, final int max) {
    final MCEntityValidator.PropertyDef _function = (String it) -> {
      try {
        final int i = Integer.parseInt(it);
        return ((i >= min) && (i <= max));
      } catch (final Throwable _t) {
        if (_t instanceof NumberFormatException) {
          return false;
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    };
    return _function;
  }
  
  private static final MCEntityValidator.PropertyDef FACING_PROPERTY = MCEntityValidator.property("up", "down", "north", "south", "east", "west");
  
  private static final MCEntityValidator.PropertyDef HORIZ_FACING_PROPERTY = MCEntityValidator.property("north", "south", "east", "west");
  
  private static final MCEntityValidator.PropertyDef AXIS_PROPERTY = MCEntityValidator.property("x", "y", "z");
  
  private static final MCEntityValidator.PropertyDef HORIZ_AXIS_PROPERTY = MCEntityValidator.property("x", "z");
  
  private final MCEntityValidator.BlockDef DEFAULT_BLOCK_DEF = new MCEntityValidator.BlockDef();
  
  private final Map<String, Map<String, MCEntityValidator.BlockDef>> ALL_BLOCKS = Collections.<String, Map<String, MCEntityValidator.BlockDef>>unmodifiableMap(CollectionLiterals.<String, Map<String, MCEntityValidator.BlockDef>>newHashMap(Pair.<String, Map<String, MCEntityValidator.BlockDef>>of("minecraft", Collections.<String, MCEntityValidator.BlockDef>unmodifiableMap(CollectionLiterals.<String, MCEntityValidator.BlockDef>newHashMap(Pair.<String, MCEntityValidator.BlockDef>of("stone", this.DEFAULT_BLOCK_DEF), Pair.<String, MCEntityValidator.BlockDef>of("portal", new MCEntityValidator.BlockDef(Collections.<String, MCEntityValidator.PropertyDef>unmodifiableMap(CollectionLiterals.<String, MCEntityValidator.PropertyDef>newHashMap(Pair.<String, MCEntityValidator.PropertyDef>of("axis", MCEntityValidator.HORIZ_AXIS_PROPERTY)))).hasItem(false)), Pair.<String, MCEntityValidator.BlockDef>of("spawner", new MCEntityValidator.BlockDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkSpawnerNBT(it_1);
    };
    this.checkNBTKeyIsObject(it, "BlockEntityTag", _function);
  }))))))));
  
  public MCEntityValidator.ItemDef toItemDef(final MCEntityValidator.BlockDef block) {
    Procedure1<MCEntityValidator.NBTData> _xifexpression = null;
    if ((block.checker != null)) {
      final Procedure1<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it) -> {
        final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
          block.checker.apply(it_1);
        };
        this.checkNBTKeyIsObject(it, "BlockEntityTag", _function_1);
        this.checkNBTKeyIsBlockstate(it, "BlockStateTag", block);
        this.checkBlockItemStackNBT(it);
      };
      _xifexpression = _function;
    }
    return new MCEntityValidator.ItemDef(64, _xifexpression);
  }
  
  private final MCEntityValidator.ItemDef DEFAULT_ITEM_DEF = new MCEntityValidator.ItemDef();
  
  private final MCEntityValidator.ItemDef NONSTACKABLE_ITEM_DEF = new MCEntityValidator.ItemDef(1);
  
  private final MCEntityValidator.ItemDef DEFAULT_ITEM_DEF16 = new MCEntityValidator.ItemDef(16);
  
  private final MCEntityValidator.ItemDef DAMAGEABLE_ITEM_DEF = new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkDamageableItemStackNBT(it);
  }));
  
  private final MCEntityValidator.ItemDef POTION_ITEM_DEF = new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkPotionNBT(it);
  }));
  
  private final MCEntityValidator.ItemDef PLACEABLE_ITEM_DEF = new MCEntityValidator.ItemDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBlockItemStackNBT(it);
  }));
  
  private final MCEntityValidator.ItemDef NONSTACKABLE_PLACEABLE_ITEMDEF = new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBlockItemStackNBT(it);
  }));
  
  private final Map<String, Map<String, MCEntityValidator.ItemDef>> ALL_ITEMS = Collections.<String, Map<String, MCEntityValidator.ItemDef>>unmodifiableMap(CollectionLiterals.<String, Map<String, MCEntityValidator.ItemDef>>newHashMap(Pair.<String, Map<String, MCEntityValidator.ItemDef>>of("minecraft", MapExtensions.union(Collections.<String, MCEntityValidator.ItemDef>unmodifiableMap(CollectionLiterals.<String, MCEntityValidator.ItemDef>newHashMap(Pair.<String, MCEntityValidator.ItemDef>of("acacia_boat", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("armor_stand", new MCEntityValidator.ItemDef(16, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBlockItemStackNBT(it);
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkEntityNBT(it_1, this.ALL_ENTITIES.get("minecraft").get("armor_stand"));
    };
    this.checkNBTKeyIsObject(it, "EntityTag", _function);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("beetroot_seeds", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("birch_boat", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("bottle_o_enchanting", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("bucket", new MCEntityValidator.ItemDef(16)), Pair.<String, MCEntityValidator.ItemDef>of("cod_bucket", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkEntityNBT(it_1, this.ALL_ENTITIES.get("minecraft").get("cod"));
    };
    this.checkNBTKeyIsObject(it, "EntityTag", _function);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("salmon_bucket", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkEntityNBT(it_1, this.ALL_ENTITIES.get("minecraft").get("salmon"));
    };
    this.checkNBTKeyIsObject(it, "EntityTag", _function);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("pufferfish_bucket", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkEntityNBT(it_1, this.ALL_ENTITIES.get("minecraft").get("pufferfish"));
    };
    this.checkNBTKeyIsObject(it, "EntityTag", _function);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("tropical_fish_bucket", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkEntityNBT(it_1, this.ALL_ENTITIES.get("minecraft").get("tropical_fish"));
    };
    this.checkNBTKeyIsObject(it, "EntityTag", _function);
    final Consumer<MCEntityValidator.NBTData> _function_1 = (MCEntityValidator.NBTData it_1) -> {
      this.checkEntityNBT(it_1, this.ALL_ENTITIES.get("minecraft").get("tropical_fish"));
    };
    this.checkNBTKeyIsObject(it, "BucketVariantTag", _function_1);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("carrot", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cocoa_beans", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("dark_oak_boat", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("egg", this.DEFAULT_ITEM_DEF16), Pair.<String, MCEntityValidator.ItemDef>of("ender_pearl", this.DEFAULT_ITEM_DEF16), Pair.<String, MCEntityValidator.ItemDef>of("end_crystal", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("eye_of_ender", this.DEFAULT_ITEM_DEF16), Pair.<String, MCEntityValidator.ItemDef>of("firework_rocket", new MCEntityValidator.ItemDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkFireworksNBT(it);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("fire_charge", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("flint_and_steel", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkDamageableItemStackNBT(it);
    this.checkBlockItemStackNBT(it);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("item_frame", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("jungle_boat", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("lava_bucket", this.NONSTACKABLE_PLACEABLE_ITEMDEF), Pair.<String, MCEntityValidator.ItemDef>of("lead", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("lingering_potion", this.POTION_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("melon_seeds", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("minecart", this.NONSTACKABLE_PLACEABLE_ITEMDEF), Pair.<String, MCEntityValidator.ItemDef>of("chest_minecart", this.NONSTACKABLE_PLACEABLE_ITEMDEF), Pair.<String, MCEntityValidator.ItemDef>of("command_block_minecart", this.NONSTACKABLE_PLACEABLE_ITEMDEF), Pair.<String, MCEntityValidator.ItemDef>of("furnace_minecart", this.NONSTACKABLE_PLACEABLE_ITEMDEF), Pair.<String, MCEntityValidator.ItemDef>of("hopper_minecart", this.NONSTACKABLE_PLACEABLE_ITEMDEF), Pair.<String, MCEntityValidator.ItemDef>of("tnt_minecart", this.NONSTACKABLE_PLACEABLE_ITEMDEF), Pair.<String, MCEntityValidator.ItemDef>of("nether_wart", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("oak_boat", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("painting", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("potato", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("pumpkin_seeds", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("redstone", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("snowball", this.DEFAULT_ITEM_DEF16), Pair.<String, MCEntityValidator.ItemDef>of("splash_potion", this.POTION_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("spruce_boat", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("string", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("sweet_berries", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("trident", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("water_bucket", this.NONSTACKABLE_PLACEABLE_ITEMDEF), Pair.<String, MCEntityValidator.ItemDef>of("wheat_seeds", this.PLACEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("apple", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("arrow", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("baked_potato", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("beetroot_soup", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("beetroot", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("black_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("blue_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("bone", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("bone_meal", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("book_and_quill", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBookPagesNBT(it);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("bow", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("bowl", this.DEFAULT_ITEM_DEF16), Pair.<String, MCEntityValidator.ItemDef>of("bread", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("brown_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("carrot_on_a_stick", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("chainmail_boots", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("chainmail_chestplate", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("chainmail_helmet", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("chainmail_leggings", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("charcoal", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("chorus_fruit", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("coal", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cooked_chicken", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cooked_cod", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cooked_mutton", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cooked_porkchop", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cooked_rabbit", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cooked_salmon", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cookie", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("crossbow", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cyan_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("debug_stick", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_axe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_boots", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_chestplate", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_helmet", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_hoe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_horse_armor", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_leggings", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_pickaxe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_shovel", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond_sword", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_axe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_boots", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_chestplate", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_helmet", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_hoe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_horse_armor", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_leggings", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_pickaxe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_shovel", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_sword", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_axe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_boots", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_chestplate", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_helmet", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_hoe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_horse_armor", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_leggings", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_pickaxe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_shovel", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_sword", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("dried_kelp", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("elytra", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("map", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("enchanted_book", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkEnchantmentNBT(it_1);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "StoredEnchantments", MCEntityValidator.predicates.isArray().minSize(1), _function);
    this.requiredKeys(it, "StoredEnchantments");
  }))), Pair.<String, MCEntityValidator.ItemDef>of("enchanted_golden_apple", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("filled_map", new MCEntityValidator.ItemDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkNBTKeyIsInt(it, "map");
    this.checkNBTKeyIsInt(it, "map_scale_direction");
    final HashSet<String> ids = CollectionLiterals.<String>newHashSet();
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      MCEntityValidator.Predicates.StringPredicate _isString = MCEntityValidator.predicates.isString();
      MCEntityValidator.Predicates.NBTValuePredicate _equalTo = MCEntityValidator.predicates.isString().equalTo(ids);
      MCEntityValidator.Predicates.NBTValuePredicate _not = _equalTo.operator_not();
      MCEntityValidator.Predicates.NBTValuePredicate _and = _isString.operator_and(_not);
      final Consumer<NBTString> _function_1 = (NBTString value) -> {
        String _value = value.getValue();
        ids.add(_value);
      };
      this.<NBTString>checkNBTKey(it_1, "id", _and, _function_1);
      this.checkNBTKey(it_1, "type", MCEntityValidator.predicates.isByte().range(0, 26));
      this.checkNBTKey(it_1, "x", MCEntityValidator.predicates.isDouble());
      this.checkNBTKey(it_1, "z", MCEntityValidator.predicates.isDouble());
      this.checkNBTKey(it_1, "rot", MCEntityValidator.predicates.isDouble().range(0.0, 360.0));
      this.requiredKeys(it_1, "id", "type", "x", "z");
      this.checkNoOtherKeys(it_1);
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Decorations", _function);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("fishing_rod", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("glass_bottle", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("golden_apple", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("gray_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("green_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("ink_sac", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_ingot", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("iron_nugget", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("gold_ingot", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("gold_nugget", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("knowledge_book", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Procedure2<NBTValue, Integer> _function = (NBTValue nbt, Integer index) -> {
      boolean _isNamespacedLocation = MCEntityValidator.isNamespacedLocation(nbt);
      boolean _not = (!_isNamespacedLocation);
      if (_not) {
        this.error("Expected a recipe id", 
          it.map.get("Recipes"), 
          McentityPackage.Literals.NBT_ENTRY__VALUE, index);
      }
    };
    this.<NBTValue>checkNBTKeyIsArray(it, "Recipes", _function);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("lapis_lazuli", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("leather_boots", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("leather_helmet", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("leather_chestplate", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("leather_leggings", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("leather_horse_armor", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("light_blue_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("light_gray_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("lime_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("magenta_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("melon_slice", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("milk_bucket", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("mushroom_stew", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_13", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_cat", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_blocks", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_chirp", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_far", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_mall", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_mellohi", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_stal", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_strad", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_ward", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_11", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("music_disc_wait", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("name_tag", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("orange_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("pink_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("poisonous_potato", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("potion", this.POTION_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("pufferfish", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("pumpkin_pie", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("purple_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("rabbit_stew", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("beef", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("chicken", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("mutton", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cod", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("porkchop", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("rabbit", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("salmon", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("red_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("rotten_flesh", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("saddle", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("shears", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("shield", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkDamageableItemStackNBT(it);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("spectral_arrow", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("spider_eye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("cooked_beef", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("stone_axe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("stone_hoe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("stone_pickaxe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("stone_shovel", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("stone_sword", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("sugar", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("suspicious_stew", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
    };
    this.checkNBTKeyIsArrayOfObjects(it, "Effects", _function);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("totem_of_undying", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("tropical_fish", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("turtle_helmet", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("wheat", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("white_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("wooden_axe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("wooden_hoe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("wooden_pickaxe", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("wooden_shovel", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("wooden_sword", this.DAMAGEABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("tipped_arrow", new MCEntityValidator.ItemDef(64, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkPotionNBT(it);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("yellow_dye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("written_book", new MCEntityValidator.ItemDef(1, ((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    this.checkBookPagesNBT(it);
    this.checkNBTKeyIsBool(it, "resolved");
    this.checkNBTKey(it, "generation", MCEntityValidator.predicates.isInt().range(0, 3));
    this.checkNBTKey(it, "author", MCEntityValidator.predicates.isString());
    this.checkNBTKey(it, "title", MCEntityValidator.predicates.isString());
  }))), Pair.<String, MCEntityValidator.ItemDef>of("flower_banner_pattern", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("creeper_banner_pattern", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("skull_banner_pattern", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("mojang_banner_pattern", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("globe_banner_pattern", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("blaze_powder", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("blaze_rod", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("book", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("brick", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("clay", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("clock", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("comppass", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("diamond", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("dragons_breath", this.NONSTACKABLE_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("emerald", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("feather", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("fermented_spider_eye", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("firework_star", new MCEntityValidator.ItemDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    final Consumer<MCEntityValidator.NBTData> _function = (MCEntityValidator.NBTData it_1) -> {
      this.checkFireworkExplosionNBT(it_1);
    };
    this.checkNBTKeyIsObject(it, "Explosion", _function);
  }))), Pair.<String, MCEntityValidator.ItemDef>of("flint", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("glistering_melon", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("glowstone_dust", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("gunpowder", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("heart_of_the_sea", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("honey_bottle", this.DEFAULT_ITEM_DEF16), Pair.<String, MCEntityValidator.ItemDef>of("honeycomb", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("leather", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("magma_cream", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("nautilus_shell", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("nether_brick", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("nether_quart", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("nether_star", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("paper", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("phantom_membrane", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("popped_chorus_fruit", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("prismarine_crystals", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("prismarine_shard", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("rabbit_hide", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("rabbit_foot", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("scute", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("shulker_shell", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("slimeball", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("stick", this.DEFAULT_ITEM_DEF), Pair.<String, MCEntityValidator.ItemDef>of("player_head", new MCEntityValidator.ItemDef(((Procedure1<MCEntityValidator.NBTData>) (MCEntityValidator.NBTData it) -> {
    MCEntityValidator.Predicates.StringPredicate.RegexStringPredicate _matching = MCEntityValidator.predicates.isString().matching("[a-zA-Z_0-9]+");
    MCEntityValidator.Predicates.ObjectPredicate _isObject = MCEntityValidator.predicates.isObject();
    MCEntityValidator.Predicates.NBTValuePredicate _or = _matching.operator_or(_isObject);
    final Consumer<NBTValue> _function = (NBTValue nbt) -> {
      if ((nbt instanceof NBTCompound)) {
        final MCEntityValidator.NBTData it_1 = new MCEntityValidator.NBTData(((NBTCompound) nbt));
        final Predicate<NBTValue> _function_1 = (NBTValue it_2) -> {
          return MCEntityValidator.isUUID(it_2);
        };
        this.checkNBTKey(it_1, "Id", _function_1, "Expected a player UUID");
        this.checkNBTKey(it_1, "Name", MCEntityValidator.predicates.isString().matching("[a-zA-Z_0-9]+"));
        final Consumer<MCEntityValidator.NBTData> _function_2 = (MCEntityValidator.NBTData it_2) -> {
          final Consumer<MCEntityValidator.NBTData> _function_3 = (MCEntityValidator.NBTData it_3) -> {
            this.checkNBTKey(it_3, "Signature", MCEntityValidator.predicates.isString());
            this.checkNBTKey(it_3, "Value", MCEntityValidator.predicates.isString().matching("[a-zA-Z0-9=+/]+"), "Expected a Base64 string");
          };
          this.checkNBTKeyIsArrayOfObjects(it_2, "textures", _function_3);
        };
        this.checkNBTKeyIsObject(it_1, "Properties", _function_2);
      }
    };
    this.<NBTValue>checkNBTKey(it, "SkullOwner", _or, _function);
  }))))), 
    MapExtensions.union(MapExtensions.<String, MCEntityValidator.BlockDef, MCEntityValidator.ItemDef>mapValues(MapExtensions.<String, MCEntityValidator.BlockDef>filter(this.ALL_BLOCKS.get("minecraft"), ((Function2<String, MCEntityValidator.BlockDef, Boolean>) (String _, MCEntityValidator.BlockDef it) -> {
      return Boolean.valueOf(it.hasItem);
    })), ((Function1<MCEntityValidator.BlockDef, MCEntityValidator.ItemDef>) (MCEntityValidator.BlockDef it) -> {
      return this.toItemDef(it);
    })), MapExtensions.<String, MCEntityValidator.EntityDef>filter(this.ALL_ENTITIES.get("minecraft"), ((Function2<String, MCEntityValidator.EntityDef, Boolean>) (String _, MCEntityValidator.EntityDef it) -> {
      return Boolean.valueOf(it.hasSpawnEgg);
    })).entrySet().stream().collect(
      Collectors.<Map.Entry<String, MCEntityValidator.EntityDef>, String, MCEntityValidator.ItemDef>toMap(
        ((Function<Map.Entry<String, MCEntityValidator.EntityDef>, String>) (Map.Entry<String, MCEntityValidator.EntityDef> it) -> {
          StringConcatenation _builder = new StringConcatenation();
          String _key = it.getKey();
          _builder.append(_key);
          _builder.append("_spawn_egg");
          return _builder.toString();
        }), 
        ((Function<Map.Entry<String, MCEntityValidator.EntityDef>, MCEntityValidator.ItemDef>) (Map.Entry<String, MCEntityValidator.EntityDef> it) -> {
          return this.toItem(it.getValue());
        }))))))));
  
  private final Set<String> PANDA_GENES = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("normal", "aggressive", "lazy", "worried", "playful", "weak", "brown"));
  
  private final Set<String> VILLAGER_PROFESSIONS = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("minecraft:armorer", "minecraft:butcher", "minecraft:cartographer", "minecraft:cleric", "minecraft:farmer", "minecraft:fisherman", "minecraft:fletcher", "minecraft:leatherworker", "minecraft:librarian", "minecraft:nitwit", "minecraft:none", "minecraft:mason", "minecraft:shepherd", "minecraft:toolsmith", "minecraft:weaponsmith"));
  
  private final Set<String> VILLAGER_TYPES = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("minecraft:desert", "minecraft:jungle", "minecraft:plains", "minecraft:savanna", "minecraft:snow", "minecraft:swamp", "minecraft:taiga"));
  
  private final Set<String> GOSSIP_TYPES = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("major_negative", "minor_negative", "major_positive", "minor_positive", "trading"));
  
  private final Set<String> DEFAULT_POTION_TYPES = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("minecraft:empty", "minecraft:water", "minecraft:mundane", "minecraft:thick", "minecraft:awkward", "minecraft:night_vision", "minecraft:invisibility", "minecraft:leaping", "minecraft:fire_resistance", "minecraft:swiftness", "minecraft:slowness", "minecraft:water_breathing", "minecraft:healing", "minecraft:harming", "minecraft:poison", "minecraft:regeneration", "minecraft:strength", "minecraft:weakness", "minecraft:luck", "minecraft:turtle_master", "minecraft:slow_falling", "minecraft:strong_leaping", "minecraft:strong_swiftness", "minecraft:strong_slowness", "minecraft:strong_healing", "minecraft:strong_harming", "minecraft:strong_poison", "minecraft:strong_regeneration", "minecraft:strong_strength", "minecraft:strong_turtle_master", "minecraft:long_night_vision", "minecraft:long_invisiblity", "minecraft:long_leaping", "minecraft:long_fire_resistance", "minecraft:long_swiftness", "minecraft:long_slowness", "minecraft:long_water_breathing", "minecraft:long_poison", "minecraft:long_regeneration", "minecraft:long_strength", "minecraft:long_weakness", "minecraft:long_turtle_master", "minecraft:long_slow_falling"));
  
  private final Set<String> WOOD_TYPES = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("oak", "spruce", "birch", "jungle", "acacia", "dark_oak"));
  
  private final Set<String> PAINTING_TYPES = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("minecraft:kebab", "minecraft:aztec", "minecraft:alban", "minecraft:aztec2", "minecraft:bomb", "minecraft:plant", "minecraft:wasteland", "minecraft:wanderer", "minecraft:graham", "minecraft:pool", "minecraft:courbet", "minecraft:sunset", "minecraft:sea", "minecraft:creebet", "minecraft:match", "minecraft:bust", "minecraft:stage", "minecraft:void", "minecraft:skull_and_roses", "minecraft:wither", "minecraft:fighters", "minecraft:skeleton", "minecraft:donkey_kong", "minecraft:pointer", "minecraft:pigscene", "minecraft:burning_skull"));
  
  private final Set<String> ENCHANTMENT_IDS = Collections.<String>unmodifiableSet(CollectionLiterals.<String>newHashSet("minecraft:bane_of_arthropods", "minecraft:channeling", "minecraft:vanishing_curse", "minecraft:efficiency", "minecraft:fire_aspect", "minecraft:flame", "minecraft:fortune", "minecraft:impaling", "minecraft:luck_of_the_sea", "minecraft:infinity", "minecraft:knockback", "minecraft:looting", "minecraft:loyalty", "minecraft:lure", "minecraft:mending", "minecraft:multishot", "minecraft:piercing", "minecraft:power", "minecraft:punch", "minecraft:quick_charge", "minecraft:riptide", "minecraft:sharpness", "minecraft:silk_touch", "minecraft:smite", "minecraft:sweeping", "minecraft:unbreaking", "minecraft:chopping"));
  
  private final Map<String, Integer> POTION_EFFECTS = Collections.<String, Integer>unmodifiableMap(CollectionLiterals.<String, Integer>newHashMap(Pair.<String, Integer>of("minecraft:speed", Integer.valueOf(1)), Pair.<String, Integer>of("minecraft:slowness", Integer.valueOf(2)), Pair.<String, Integer>of("minecraft:haste", Integer.valueOf(3)), Pair.<String, Integer>of("minecraft:mining_fatigue", Integer.valueOf(4)), Pair.<String, Integer>of("minecraft:strength", Integer.valueOf(5)), Pair.<String, Integer>of("minecraft:instant_health", Integer.valueOf(6)), Pair.<String, Integer>of("minecraft:instant_damage", Integer.valueOf(7)), Pair.<String, Integer>of("minecraft:jump_boost", Integer.valueOf(8)), Pair.<String, Integer>of("minecraft:nausea", Integer.valueOf(9)), Pair.<String, Integer>of("minecraft:regeneration", Integer.valueOf(10)), Pair.<String, Integer>of("minecraft:resistance", Integer.valueOf(11)), Pair.<String, Integer>of("minecraft:fire_resistance", Integer.valueOf(12)), Pair.<String, Integer>of("minecraft:water_breathing", Integer.valueOf(13)), Pair.<String, Integer>of("minecraft:invisibility", Integer.valueOf(14)), Pair.<String, Integer>of("minecraft:blindness", Integer.valueOf(15)), Pair.<String, Integer>of("minecraft:night_vision", Integer.valueOf(16)), Pair.<String, Integer>of("minecraft:hunger", Integer.valueOf(17)), Pair.<String, Integer>of("minecraft:weakness", Integer.valueOf(18)), Pair.<String, Integer>of("minecraft:poison", Integer.valueOf(19)), Pair.<String, Integer>of("minecraft:wither", Integer.valueOf(20)), Pair.<String, Integer>of("minecraft:health_boost", Integer.valueOf(21)), Pair.<String, Integer>of("minecraft:absorption", Integer.valueOf(22)), Pair.<String, Integer>of("minecraft:saturation", Integer.valueOf(23)), Pair.<String, Integer>of("minecraft:glowing", Integer.valueOf(24)), Pair.<String, Integer>of("minecraft:levitation", Integer.valueOf(25)), Pair.<String, Integer>of("minecraft:luck", Integer.valueOf(26)), Pair.<String, Integer>of("minecraft:unluck", Integer.valueOf(27)), Pair.<String, Integer>of("minecraft:slow_falling", Integer.valueOf(28)), Pair.<String, Integer>of("minecraft:conduit_power", Integer.valueOf(29)), Pair.<String, Integer>of("minecraft:dolphins_grace", Integer.valueOf(30)), Pair.<String, Integer>of("minecraft:bad_omean", Integer.valueOf(31)), Pair.<String, Integer>of("minecraft:hero_of_the_village", Integer.valueOf(32))));
  
  protected boolean _isValidEntity(final NamespacedKey it) {
    Map<String, MCEntityValidator.EntityDef> _get = this.ALL_ENTITIES.get(it.getNamespace());
    MCEntityValidator.EntityDef _get_1 = null;
    if (_get!=null) {
      _get_1=_get.get(it.getKey());
    }
    return (_get_1 != null);
  }
  
  protected boolean _isValidEntity(final NBTString it) {
    boolean _matches = it.getValue().matches("[-.a-z_0-9]+(:[-.a-z_0-9]+)?");
    if (_matches) {
      final int i = it.getValue().indexOf(":");
      String _xifexpression = null;
      if ((i == (-1))) {
        _xifexpression = "minecraft";
      } else {
        _xifexpression = it.getValue().substring(0, i);
      }
      final String namespace = _xifexpression;
      String _xifexpression_1 = null;
      if ((i == (-1))) {
        _xifexpression_1 = it.getValue();
      } else {
        _xifexpression_1 = it.getValue().substring((i + 1));
      }
      final String key = _xifexpression_1;
      Map<String, MCEntityValidator.EntityDef> _get = this.ALL_ENTITIES.get(namespace);
      MCEntityValidator.EntityDef _get_1 = null;
      if (_get!=null) {
        _get_1=_get.get(key);
      }
      return (_get_1 != null);
    } else {
      return false;
    }
  }
  
  protected boolean _isValidEntity(final NBTValue it) {
    return false;
  }
  
  protected boolean _isValidProfession(final NamespacedKey it) {
    String _namespace = it.getNamespace();
    String _plus = (_namespace + ":");
    String _key = it.getKey();
    String _plus_1 = (_plus + _key);
    return this.VILLAGER_PROFESSIONS.contains(_plus_1);
  }
  
  protected boolean _isValidProfession(final NBTString it) {
    boolean _xblockexpression = false;
    {
      final int i = it.getValue().indexOf(":");
      boolean _xifexpression = false;
      if ((i == (-1))) {
        String _value = it.getValue();
        String _plus = ("minecraft:" + _value);
        _xifexpression = this.VILLAGER_PROFESSIONS.contains(_plus);
      } else {
        _xifexpression = this.VILLAGER_PROFESSIONS.contains(it.getValue());
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected boolean _isValidProfession(final NBTValue it) {
    return false;
  }
  
  protected boolean _isValidVillagerType(final NamespacedKey it) {
    String _namespace = it.getNamespace();
    String _plus = (_namespace + ":");
    String _key = it.getKey();
    String _plus_1 = (_plus + _key);
    return this.VILLAGER_TYPES.contains(_plus_1);
  }
  
  protected boolean _isValidVillagerType(final NBTString it) {
    boolean _xblockexpression = false;
    {
      final int i = it.getValue().indexOf(":");
      boolean _xifexpression = false;
      if ((i == (-1))) {
        String _value = it.getValue();
        String _plus = ("minecraft:" + _value);
        _xifexpression = this.VILLAGER_TYPES.contains(_plus);
      } else {
        _xifexpression = this.VILLAGER_TYPES.contains(it.getValue());
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected boolean _isValidVillagerType(final NBTValue it) {
    return false;
  }
  
  protected boolean _isValidPainting(final NamespacedKey it) {
    String _namespace = it.getNamespace();
    String _plus = (_namespace + ":");
    String _key = it.getKey();
    String _plus_1 = (_plus + _key);
    return this.PAINTING_TYPES.contains(_plus_1);
  }
  
  protected boolean _isValidPainting(final NBTString it) {
    boolean _xblockexpression = false;
    {
      final int i = it.getValue().indexOf(":");
      boolean _xifexpression = false;
      if ((i == (-1))) {
        String _value = it.getValue();
        String _plus = ("minecraft:" + _value);
        _xifexpression = this.PAINTING_TYPES.contains(_plus);
      } else {
        _xifexpression = this.PAINTING_TYPES.contains(it.getValue());
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected boolean _isValidPainting(final NBTValue it) {
    return false;
  }
  
  protected boolean _isValidEnchantment(final NamespacedKey it) {
    String _namespace = it.getNamespace();
    String _plus = (_namespace + ":");
    String _key = it.getKey();
    String _plus_1 = (_plus + _key);
    return this.ENCHANTMENT_IDS.contains(_plus_1);
  }
  
  protected boolean _isValidEnchantment(final NBTString it) {
    boolean _xblockexpression = false;
    {
      final int i = it.getValue().indexOf(":");
      boolean _xifexpression = false;
      if ((i == (-1))) {
        String _value = it.getValue();
        String _plus = ("minecraft:" + _value);
        _xifexpression = this.ENCHANTMENT_IDS.contains(_plus);
      } else {
        _xifexpression = this.ENCHANTMENT_IDS.contains(it.getValue());
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected boolean _isValidEnchantment(final NBTValue it) {
    return false;
  }
  
  protected MCEntityValidator.Possibility _isValidItem(final NBTString it) {
    MCEntityValidator.Possibility _xblockexpression = null;
    {
      final Matcher m = MCEntityValidator.NAMESPACED_KEY_REGEX.matcher(it.getValue());
      MCEntityValidator.Possibility _xifexpression = null;
      boolean _matches = m.matches();
      if (_matches) {
        MCEntityValidator.Possibility _xifexpression_1 = null;
        String _elvis = null;
        String _group = m.group("namespace");
        if (_group != null) {
          _elvis = _group;
        } else {
          _elvis = "minecraft";
        }
        Map<String, MCEntityValidator.ItemDef> _get = this.ALL_ITEMS.get(_elvis);
        MCEntityValidator.ItemDef _get_1 = null;
        if (_get!=null) {
          _get_1=_get.get(m.group("key"));
        }
        boolean _tripleNotEquals = (_get_1 != null);
        if (_tripleNotEquals) {
          _xifexpression_1 = MCEntityValidator.Possibility.YES;
        } else {
          _xifexpression_1 = MCEntityValidator.Possibility.MAYBE;
        }
        _xifexpression = _xifexpression_1;
      } else {
        _xifexpression = MCEntityValidator.Possibility.NO;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected MCEntityValidator.Possibility _isValidItem(final NamespacedKey it) {
    MCEntityValidator.Possibility _xifexpression = null;
    Map<String, MCEntityValidator.ItemDef> _get = this.ALL_ITEMS.get(it.getNamespace());
    MCEntityValidator.ItemDef _get_1 = null;
    if (_get!=null) {
      _get_1=_get.get(it.getKey());
    }
    boolean _tripleNotEquals = (_get_1 != null);
    if (_tripleNotEquals) {
      _xifexpression = MCEntityValidator.Possibility.YES;
    } else {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    }
    return _xifexpression;
  }
  
  protected MCEntityValidator.Possibility _isValidItem(final NBTValue it) {
    return MCEntityValidator.Possibility.NO;
  }
  
  protected MCEntityValidator.Possibility _isValidBlock(final NBTString it) {
    MCEntityValidator.Possibility _xblockexpression = null;
    {
      final Matcher m = MCEntityValidator.NAMESPACED_KEY_REGEX.matcher(it.getValue());
      MCEntityValidator.Possibility _xifexpression = null;
      boolean _matches = m.matches();
      if (_matches) {
        MCEntityValidator.Possibility _xifexpression_1 = null;
        String _elvis = null;
        String _group = m.group("namespace");
        if (_group != null) {
          _elvis = _group;
        } else {
          _elvis = "minecraft";
        }
        Map<String, MCEntityValidator.BlockDef> _get = this.ALL_BLOCKS.get(_elvis);
        MCEntityValidator.BlockDef _get_1 = null;
        if (_get!=null) {
          _get_1=_get.get(m.group("key"));
        }
        boolean _tripleNotEquals = (_get_1 != null);
        if (_tripleNotEquals) {
          _xifexpression_1 = MCEntityValidator.Possibility.YES;
        } else {
          _xifexpression_1 = MCEntityValidator.Possibility.MAYBE;
        }
        _xifexpression = _xifexpression_1;
      } else {
        _xifexpression = MCEntityValidator.Possibility.NO;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected MCEntityValidator.Possibility _isValidBlock(final NamespacedKey it) {
    MCEntityValidator.Possibility _xifexpression = null;
    Map<String, MCEntityValidator.BlockDef> _get = this.ALL_BLOCKS.get(it.getNamespace());
    MCEntityValidator.BlockDef _get_1 = null;
    if (_get!=null) {
      _get_1=_get.get(it.getKey());
    }
    boolean _tripleNotEquals = (_get_1 != null);
    if (_tripleNotEquals) {
      _xifexpression = MCEntityValidator.Possibility.YES;
    } else {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    }
    return _xifexpression;
  }
  
  protected MCEntityValidator.Possibility _isValidBlock(final NBTValue it) {
    return MCEntityValidator.Possibility.NO;
  }
  
  protected boolean _isValidEffect(final NamespacedKey it) {
    String _namespace = it.getNamespace();
    String _plus = (_namespace + ":");
    String _key = it.getKey();
    String _plus_1 = (_plus + _key);
    return this.POTION_EFFECTS.containsKey(_plus_1);
  }
  
  protected boolean _isValidEffect(final NBTString it) {
    final Matcher m = MCEntityValidator.NAMESPACED_KEY_REGEX.matcher(it.getValue());
    return (m.matches() && this.POTION_EFFECTS.containsKey(((ObjectExtensions.<String>operator_elvis(m.group("namespace"), "minecraft") + ":") + m.group("key"))));
  }
  
  protected boolean _isValidEffect(final NBTValue it) {
    return false;
  }
  
  public static boolean isVec3D(final NBTValue it) {
    final Function1<NBTValue, Boolean> _function = (NBTValue it_1) -> {
      return Boolean.valueOf(MCEntityValidator.isDouble(it_1));
    };
    return MCEntityValidator.isArray(it, 3, _function);
  }
  
  public static boolean isVec2F(final NBTValue it) {
    final Function1<NBTValue, Boolean> _function = (NBTValue it_1) -> {
      return Boolean.valueOf(MCEntityValidator.isFloat(it_1));
    };
    return MCEntityValidator.isArray(it, 2, _function);
  }
  
  public static boolean isString(final NBTValue it) {
    return (it instanceof NBTString);
  }
  
  public static boolean isString(final NBTValue it, final String exact) {
    return ((it instanceof NBTString) && Objects.equal(((NBTString) it).getValue(), exact));
  }
  
  public static boolean isStringMatching(final NBTValue it, final Pattern regex) {
    return ((it instanceof NBTString) && regex.matcher(((NBTString) it).getValue()).matches());
  }
  
  public static boolean isUUID(final NBTValue it) {
    return MCEntityValidator.isStringMatching(it, MCEntityValidator.UUID_REGEX);
  }
  
  protected static boolean _isNamespacedKey(final NBTString it) {
    return MCEntityValidator.NAMESPACED_KEY_REGEX.matcher(it.getValue()).matches();
  }
  
  protected static boolean _isNamespacedKey(final NamespacedKey it) {
    return MCEntityValidator.KEY_REGEX.matcher(it.getKey()).matches();
  }
  
  protected static boolean _isNamespacedKey(final NBTValue it) {
    return false;
  }
  
  protected static boolean _isNamespacedLocation(final NBTString it) {
    return MCEntityValidator.NAMESPACED_FOLDER_REGEX.matcher(it.getValue()).matches();
  }
  
  protected static boolean _isNamespacedLocation(final NamespacedKey it) {
    return MCEntityValidator.FOLDER_REGEX.matcher(it.getKey()).matches();
  }
  
  protected static boolean _isNamespacedLocation(final NBTValue it) {
    return false;
  }
  
  public static boolean isDouble(final NBTValue it) {
    return ((it instanceof NBTDouble) || (it instanceof NBTInt));
  }
  
  protected static boolean _isDouble(final NBTDouble it, final double exact) {
    double _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isDouble(final NBTInt it, final double exact) {
    int _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isDouble(final NBTValue it, final double exact) {
    return false;
  }
  
  protected static boolean _isDouble(final NBTDouble it, final double min, final double max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isDouble(final NBTInt it, final double min, final double max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isDouble(final NBTValue it, final double min, final double max) {
    return false;
  }
  
  public static boolean isFloat(final NBTValue it) {
    return ((it instanceof NBTFloat) || (it instanceof NBTInt));
  }
  
  protected static boolean _isFloat(final NBTFloat it, final float exact) {
    float _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isFloat(final NBTInt it, final float exact) {
    int _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isFloat(final NBTValue it, final float exact) {
    return false;
  }
  
  protected static boolean _isFloat(final NBTFloat it, final float min, final float max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isFloat(final NBTInt it, final float min, final float max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isFloat(final NBTValue it, final float min, final float max) {
    return false;
  }
  
  public static boolean isLong(final NBTValue it) {
    return ((it instanceof NBTLong) || MCEntityValidator.isInt(it));
  }
  
  protected static boolean _isLong(final NBTLong it, final long exact) {
    long _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isLong(final NBTInt it, final long exact) {
    int _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isLong(final NBTShort it, final long exact) {
    short _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isLong(final NBTByte it, final long exact) {
    byte _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isLong(final NBTBool it, final long exact) {
    boolean _isValue = it.isValue();
    return (_isValue == (exact != 0));
  }
  
  protected static boolean _isLong(final NBTValue it, final long exact) {
    return false;
  }
  
  protected static boolean _isLong(final NBTLong it, final long min, final long max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isLong(final NBTInt it, final long min, final long max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isLong(final NBTShort it, final long min, final long max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isLong(final NBTByte it, final long min, final long max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isLong(final NBTValue it, final long min, final long max) {
    return false;
  }
  
  public static boolean isInt(final NBTValue it) {
    return ((((it instanceof NBTInt) || (it instanceof NBTShort)) || (it instanceof NBTByte)) || (it instanceof NBTBool));
  }
  
  protected static boolean _isInt(final NBTInt it, final int exact) {
    int _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isInt(final NBTShort it, final int exact) {
    short _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isInt(final NBTByte it, final int exact) {
    byte _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isInt(final NBTValue it, final int exact) {
    return false;
  }
  
  protected static boolean _isInt(final NBTInt it, final int min, final int max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isInt(final NBTShort it, final int min, final int max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isInt(final NBTByte it, final int min, final int max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isInt(final NBTValue it, final int min, final int max) {
    return false;
  }
  
  protected static boolean _isShort(final NBTShort it) {
    return true;
  }
  
  protected static boolean _isShort(final NBTInt it) {
    return ((it.getValue() >= Short.MIN_VALUE) && (it.getValue() <= Short.MAX_VALUE));
  }
  
  protected static boolean _isShort(final NBTByte it) {
    return true;
  }
  
  protected static boolean _isShort(final NBTValue it) {
    return false;
  }
  
  protected static boolean _isShort(final NBTShort it, final short exact) {
    short _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isShort(final NBTInt it, final short exact) {
    int _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isShort(final NBTByte it, final short exact) {
    byte _value = it.getValue();
    return (_value == exact);
  }
  
  protected static boolean _isShort(final NBTValue it, final short exact) {
    return false;
  }
  
  protected static boolean _isShort(final NBTShort it, final short min, final short max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isShort(final NBTInt it, final short min, final short max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isShort(final NBTByte it, final short min, final short max) {
    return ((it.getValue() >= min) && (it.getValue() <= max));
  }
  
  protected static boolean _isShort(final NBTValue it, final short min, final short max) {
    return false;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTShort it) {
    return MCEntityValidator.Possibility.YES;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTInt it) {
    MCEntityValidator.Possibility _xifexpression = null;
    if (((it.getValue() >= Short.MIN_VALUE) && (it.getValue() <= Short.MAX_VALUE))) {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTByte it) {
    return MCEntityValidator.Possibility.MAYBE;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTValue it) {
    return MCEntityValidator.Possibility.NO;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTShort it, final short exact) {
    MCEntityValidator.Possibility _xifexpression = null;
    short _value = it.getValue();
    boolean _equals = (_value == exact);
    if (_equals) {
      _xifexpression = MCEntityValidator.Possibility.YES;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTInt it, final short exact) {
    MCEntityValidator.Possibility _xifexpression = null;
    int _value = it.getValue();
    boolean _equals = (_value == exact);
    if (_equals) {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTByte it, final short exact) {
    MCEntityValidator.Possibility _xifexpression = null;
    byte _value = it.getValue();
    boolean _equals = (_value == exact);
    if (_equals) {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTValue it, final short exact) {
    return MCEntityValidator.Possibility.NO;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTShort it, final short min, final short max) {
    MCEntityValidator.Possibility _xifexpression = null;
    if (((it.getValue() >= min) && (it.getValue() <= max))) {
      _xifexpression = MCEntityValidator.Possibility.YES;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTInt it, final short min, final short max) {
    MCEntityValidator.Possibility _xifexpression = null;
    if (((it.getValue() >= min) && (it.getValue() <= max))) {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTByte it, final short min, final short max) {
    MCEntityValidator.Possibility _xifexpression = null;
    if (((it.getValue() >= min) && (it.getValue() <= max))) {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToShort(final NBTValue it, final short min, final short max) {
    return MCEntityValidator.Possibility.NO;
  }
  
  protected static boolean _isByte(final NBTByte it) {
    return true;
  }
  
  protected static boolean _isByte(final NBTShort it) {
    return ((it.getValue() >= Byte.MIN_VALUE) && (it.getValue() <= Byte.MAX_VALUE));
  }
  
  protected static boolean _isByte(final NBTInt it) {
    return ((it.getValue() >= Byte.MIN_VALUE) && (it.getValue() <= Byte.MAX_VALUE));
  }
  
  protected static boolean _isByte(final NBTValue it) {
    return false;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToByte(final NBTByte it) {
    return MCEntityValidator.Possibility.YES;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToByte(final NBTShort it) {
    MCEntityValidator.Possibility _xifexpression = null;
    if (((it.getValue() >= Byte.MIN_VALUE) && (it.getValue() <= Byte.MAX_VALUE))) {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToByte(final NBTInt it) {
    MCEntityValidator.Possibility _xifexpression = null;
    if (((it.getValue() >= Byte.MIN_VALUE) && (it.getValue() <= Byte.MAX_VALUE))) {
      _xifexpression = MCEntityValidator.Possibility.MAYBE;
    } else {
      _xifexpression = MCEntityValidator.Possibility.NO;
    }
    return _xifexpression;
  }
  
  protected static MCEntityValidator.Possibility _isConvertibleToByte(final NBTValue it) {
    return MCEntityValidator.Possibility.NO;
  }
  
  protected static boolean _isBool(final NBTBool it) {
    return true;
  }
  
  protected static boolean _isBool(final NBTInt it) {
    return ((it.getValue() == 0) || (it.getValue() == 1));
  }
  
  protected static boolean _isBool(final NBTByte it) {
    return ((it.getValue() == 0) || (it.getValue() == 1));
  }
  
  protected static boolean _isBool(final NBTValue it) {
    return false;
  }
  
  protected static boolean _isBool(final NBTBool it, final boolean exact) {
    boolean _isValue = it.isValue();
    return (_isValue == exact);
  }
  
  protected static boolean _isBool(final NBTInt it, final boolean exact) {
    int _value = it.getValue();
    boolean _notEquals = (_value != 0);
    return (exact == _notEquals);
  }
  
  protected static boolean _isBool(final NBTByte it, final boolean exact) {
    byte _value = it.getValue();
    boolean _notEquals = (_value != 0);
    return (exact == _notEquals);
  }
  
  public static boolean isArray(final NBTValue it) {
    return (it instanceof NBTArray);
  }
  
  public static boolean isArray(final NBTValue it, final int size) {
    return ((it instanceof NBTArray) && (((NBTArray) it).getElements().size() == size));
  }
  
  public static boolean isArray(final NBTValue it, final Function1<? super NBTValue, ? extends Boolean> elementPredicate) {
    if ((it instanceof NBTArray)) {
      EList<NBTValue> _elements = ((NBTArray)it).getElements();
      for (final NBTValue element : _elements) {
        Boolean _apply = elementPredicate.apply(element);
        boolean _not = (!(_apply).booleanValue());
        if (_not) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  
  public static boolean isArray(final NBTValue it, final int size, final Function1<? super NBTValue, ? extends Boolean> elementPredicate) {
    if ((it instanceof NBTArray)) {
      final EList<NBTValue> elements = ((NBTArray)it).getElements();
      int _size = elements.size();
      boolean _notEquals = (_size != size);
      if (_notEquals) {
        return false;
      }
      for (final NBTValue element : elements) {
        Boolean _apply = elementPredicate.apply(element);
        boolean _not = (!(_apply).booleanValue());
        if (_not) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  
  public static boolean isArray(final NBTValue it, final int minSize, final int maxSize) {
    if ((it instanceof NBTArray)) {
      final int size = ((NBTArray)it).getElements().size();
      return ((size >= minSize) && (size <= maxSize));
    }
    return false;
  }
  
  public static boolean isArray(final NBTValue it, final int minSize, final int maxSize, final Function1<? super NBTValue, ? extends Boolean> elementPredicate) {
    if ((it instanceof NBTArray)) {
      final EList<NBTValue> elements = ((NBTArray)it).getElements();
      if (((elements.size() < minSize) || (elements.size() > maxSize))) {
        return false;
      }
      for (final NBTValue element : elements) {
        Boolean _apply = elementPredicate.apply(element);
        boolean _not = (!(_apply).booleanValue());
        if (_not) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it) {
    return (it instanceof NBTCompound);
  }
  
  public static boolean isCompound(final NBTValue it, final int size) {
    return ((it instanceof NBTCompound) && (((NBTCompound) it).getEntries().size() == size));
  }
  
  public static boolean isCompound(final NBTValue it, final int minSize, final int maxSize) {
    if ((it instanceof NBTCompound)) {
      final int size = ((NBTCompound)it).getEntries().size();
      return ((size >= minSize) && (size <= maxSize));
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final Function2<? super String, ? super NBTValue, ? extends Boolean> entryPredicate) {
    if ((it instanceof NBTCompound)) {
      EList<NBTEntry> _entries = ((NBTCompound)it).getEntries();
      for (final NBTEntry entry : _entries) {
        Boolean _apply = entryPredicate.apply(entry.getKey(), entry.getValue());
        boolean _not = (!(_apply).booleanValue());
        if (_not) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final Function1<? super NBTValue, ? extends Boolean> valuePredicate) {
    if ((it instanceof NBTCompound)) {
      EList<NBTEntry> _entries = ((NBTCompound)it).getEntries();
      for (final NBTEntry entry : _entries) {
        Boolean _apply = valuePredicate.apply(entry.getValue());
        boolean _not = (!(_apply).booleanValue());
        if (_not) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final Predicate<String> keyPredicate) {
    if ((it instanceof NBTCompound)) {
      EList<NBTEntry> _entries = ((NBTCompound)it).getEntries();
      for (final NBTEntry entry : _entries) {
        boolean _test = keyPredicate.test(entry.getKey());
        boolean _not = (!_test);
        if (_not) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final int size, final Function2<? super String, ? super NBTValue, ? extends Boolean> entryPredicate) {
    if ((it instanceof NBTCompound)) {
      final EList<NBTEntry> entries = ((NBTCompound)it).getEntries();
      int _size = entries.size();
      boolean _equals = (_size == size);
      if (_equals) {
        for (final NBTEntry entry : entries) {
          Boolean _apply = entryPredicate.apply(entry.getKey(), entry.getValue());
          boolean _not = (!(_apply).booleanValue());
          if (_not) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final int size, final Function1<? super NBTValue, ? extends Boolean> valuePredicate) {
    if ((it instanceof NBTCompound)) {
      final EList<NBTEntry> entries = ((NBTCompound)it).getEntries();
      int _size = entries.size();
      boolean _equals = (_size == size);
      if (_equals) {
        for (final NBTEntry entry : entries) {
          Boolean _apply = valuePredicate.apply(entry.getValue());
          boolean _not = (!(_apply).booleanValue());
          if (_not) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final int size, final Predicate<String> keyPredicate) {
    if ((it instanceof NBTCompound)) {
      final EList<NBTEntry> entries = ((NBTCompound)it).getEntries();
      int _size = entries.size();
      boolean _equals = (_size == size);
      if (_equals) {
        for (final NBTEntry entry : entries) {
          boolean _test = keyPredicate.test(entry.getKey());
          boolean _not = (!_test);
          if (_not) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final int minSize, final int maxSize, final Function2<? super String, ? super NBTValue, ? extends Boolean> entryPredicate) {
    if ((it instanceof NBTCompound)) {
      final EList<NBTEntry> entries = ((NBTCompound)it).getEntries();
      if (((entries.size() >= minSize) && (entries.size() <= maxSize))) {
        for (final NBTEntry entry : entries) {
          Boolean _apply = entryPredicate.apply(entry.getKey(), entry.getValue());
          boolean _not = (!(_apply).booleanValue());
          if (_not) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final int minSize, final int maxSize, final Function1<? super NBTValue, ? extends Boolean> valuePredicate) {
    if ((it instanceof NBTCompound)) {
      final EList<NBTEntry> entries = ((NBTCompound)it).getEntries();
      if (((entries.size() >= minSize) && (entries.size() <= maxSize))) {
        for (final NBTEntry entry : entries) {
          Boolean _apply = valuePredicate.apply(entry.getValue());
          boolean _not = (!(_apply).booleanValue());
          if (_not) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public static boolean isCompound(final NBTValue it, final int minSize, final int maxSize, final Predicate<String> keyPredicate) {
    if ((it instanceof NBTCompound)) {
      final EList<NBTEntry> entries = ((NBTCompound)it).getEntries();
      if (((entries.size() >= minSize) && (entries.size() <= maxSize))) {
        for (final NBTEntry entry : entries) {
          boolean _test = keyPredicate.test(entry.getKey());
          boolean _not = (!_test);
          if (_not) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  
  public static ImmutableMap<String, NBTEntry> toMap(final NBTCompound nbt) {
    final HashMap<String, NBTEntry> map = CollectionLiterals.<String, NBTEntry>newHashMap();
    EList<NBTEntry> _entries = nbt.getEntries();
    for (final NBTEntry entry : _entries) {
      map.put(entry.getKey(), entry);
    }
    return ImmutableMap.<String, NBTEntry>copyOf(map);
  }
  
  private static final MCEntityValidator.Predicates predicates = new MCEntityValidator.Predicates();
  
  static String s(final int amount) {
    String _xifexpression = null;
    if ((amount == 1)) {
      _xifexpression = "";
    } else {
      _xifexpression = "s";
    }
    return _xifexpression;
  }
  
  public boolean isValidEntity(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isValidEntity((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isValidEntity((NamespacedKey)it);
    } else if (it != null) {
      return _isValidEntity(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public boolean isValidProfession(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isValidProfession((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isValidProfession((NamespacedKey)it);
    } else if (it != null) {
      return _isValidProfession(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public boolean isValidVillagerType(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isValidVillagerType((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isValidVillagerType((NamespacedKey)it);
    } else if (it != null) {
      return _isValidVillagerType(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public boolean isValidPainting(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isValidPainting((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isValidPainting((NamespacedKey)it);
    } else if (it != null) {
      return _isValidPainting(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public boolean isValidEnchantment(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isValidEnchantment((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isValidEnchantment((NamespacedKey)it);
    } else if (it != null) {
      return _isValidEnchantment(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public MCEntityValidator.Possibility isValidItem(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isValidItem((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isValidItem((NamespacedKey)it);
    } else if (it != null) {
      return _isValidItem(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public MCEntityValidator.Possibility isValidBlock(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isValidBlock((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isValidBlock((NamespacedKey)it);
    } else if (it != null) {
      return _isValidBlock(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public boolean isValidEffect(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isValidEffect((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isValidEffect((NamespacedKey)it);
    } else if (it != null) {
      return _isValidEffect(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public static boolean isNamespacedKey(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isNamespacedKey((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isNamespacedKey((NamespacedKey)it);
    } else if (it != null) {
      return _isNamespacedKey(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public static boolean isNamespacedLocation(final NBTValue it) {
    if (it instanceof NBTString) {
      return _isNamespacedLocation((NBTString)it);
    } else if (it instanceof NamespacedKey) {
      return _isNamespacedLocation((NamespacedKey)it);
    } else if (it != null) {
      return _isNamespacedLocation(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public static boolean isDouble(final NBTValue it, final double exact) {
    if (it instanceof NBTDouble) {
      return _isDouble((NBTDouble)it, exact);
    } else if (it instanceof NBTInt) {
      return _isDouble((NBTInt)it, exact);
    } else if (it != null) {
      return _isDouble(it, exact);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, exact).toString());
    }
  }
  
  public static boolean isDouble(final NBTValue it, final double min, final double max) {
    if (it instanceof NBTDouble) {
      return _isDouble((NBTDouble)it, min, max);
    } else if (it instanceof NBTInt) {
      return _isDouble((NBTInt)it, min, max);
    } else if (it != null) {
      return _isDouble(it, min, max);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, min, max).toString());
    }
  }
  
  public static boolean isFloat(final NBTValue it, final float exact) {
    if (it instanceof NBTFloat) {
      return _isFloat((NBTFloat)it, exact);
    } else if (it instanceof NBTInt) {
      return _isFloat((NBTInt)it, exact);
    } else if (it != null) {
      return _isFloat(it, exact);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, exact).toString());
    }
  }
  
  public static boolean isFloat(final NBTValue it, final float min, final float max) {
    if (it instanceof NBTFloat) {
      return _isFloat((NBTFloat)it, min, max);
    } else if (it instanceof NBTInt) {
      return _isFloat((NBTInt)it, min, max);
    } else if (it != null) {
      return _isFloat(it, min, max);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, min, max).toString());
    }
  }
  
  public static boolean isLong(final NBTValue it, final long exact) {
    if (it instanceof NBTByte) {
      return _isLong((NBTByte)it, exact);
    } else if (it instanceof NBTInt) {
      return _isLong((NBTInt)it, exact);
    } else if (it instanceof NBTLong) {
      return _isLong((NBTLong)it, exact);
    } else if (it instanceof NBTShort) {
      return _isLong((NBTShort)it, exact);
    } else if (it instanceof NBTBool) {
      return _isLong((NBTBool)it, exact);
    } else if (it != null) {
      return _isLong(it, exact);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, exact).toString());
    }
  }
  
  public static boolean isLong(final NBTValue it, final long min, final long max) {
    if (it instanceof NBTByte) {
      return _isLong((NBTByte)it, min, max);
    } else if (it instanceof NBTInt) {
      return _isLong((NBTInt)it, min, max);
    } else if (it instanceof NBTLong) {
      return _isLong((NBTLong)it, min, max);
    } else if (it instanceof NBTShort) {
      return _isLong((NBTShort)it, min, max);
    } else if (it != null) {
      return _isLong(it, min, max);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, min, max).toString());
    }
  }
  
  public static boolean isInt(final NBTValue it, final int exact) {
    if (it instanceof NBTByte) {
      return _isInt((NBTByte)it, exact);
    } else if (it instanceof NBTInt) {
      return _isInt((NBTInt)it, exact);
    } else if (it instanceof NBTShort) {
      return _isInt((NBTShort)it, exact);
    } else if (it != null) {
      return _isInt(it, exact);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, exact).toString());
    }
  }
  
  public static boolean isInt(final NBTValue it, final int min, final int max) {
    if (it instanceof NBTByte) {
      return _isInt((NBTByte)it, min, max);
    } else if (it instanceof NBTInt) {
      return _isInt((NBTInt)it, min, max);
    } else if (it instanceof NBTShort) {
      return _isInt((NBTShort)it, min, max);
    } else if (it != null) {
      return _isInt(it, min, max);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, min, max).toString());
    }
  }
  
  public static boolean isShort(final NBTValue it) {
    if (it instanceof NBTByte) {
      return _isShort((NBTByte)it);
    } else if (it instanceof NBTInt) {
      return _isShort((NBTInt)it);
    } else if (it instanceof NBTShort) {
      return _isShort((NBTShort)it);
    } else if (it != null) {
      return _isShort(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public static boolean isShort(final NBTValue it, final short exact) {
    if (it instanceof NBTByte) {
      return _isShort((NBTByte)it, exact);
    } else if (it instanceof NBTInt) {
      return _isShort((NBTInt)it, exact);
    } else if (it instanceof NBTShort) {
      return _isShort((NBTShort)it, exact);
    } else if (it != null) {
      return _isShort(it, exact);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, exact).toString());
    }
  }
  
  public static boolean isShort(final NBTValue it, final short min, final short max) {
    if (it instanceof NBTByte) {
      return _isShort((NBTByte)it, min, max);
    } else if (it instanceof NBTInt) {
      return _isShort((NBTInt)it, min, max);
    } else if (it instanceof NBTShort) {
      return _isShort((NBTShort)it, min, max);
    } else if (it != null) {
      return _isShort(it, min, max);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, min, max).toString());
    }
  }
  
  public static MCEntityValidator.Possibility isConvertibleToShort(final NBTValue it) {
    if (it instanceof NBTByte) {
      return _isConvertibleToShort((NBTByte)it);
    } else if (it instanceof NBTInt) {
      return _isConvertibleToShort((NBTInt)it);
    } else if (it instanceof NBTShort) {
      return _isConvertibleToShort((NBTShort)it);
    } else if (it != null) {
      return _isConvertibleToShort(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public static MCEntityValidator.Possibility isConvertibleToShort(final NBTValue it, final short exact) {
    if (it instanceof NBTByte) {
      return _isConvertibleToShort((NBTByte)it, exact);
    } else if (it instanceof NBTInt) {
      return _isConvertibleToShort((NBTInt)it, exact);
    } else if (it instanceof NBTShort) {
      return _isConvertibleToShort((NBTShort)it, exact);
    } else if (it != null) {
      return _isConvertibleToShort(it, exact);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, exact).toString());
    }
  }
  
  public static MCEntityValidator.Possibility isConvertibleToShort(final NBTValue it, final short min, final short max) {
    if (it instanceof NBTByte) {
      return _isConvertibleToShort((NBTByte)it, min, max);
    } else if (it instanceof NBTInt) {
      return _isConvertibleToShort((NBTInt)it, min, max);
    } else if (it instanceof NBTShort) {
      return _isConvertibleToShort((NBTShort)it, min, max);
    } else if (it != null) {
      return _isConvertibleToShort(it, min, max);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, min, max).toString());
    }
  }
  
  public static boolean isByte(final NBTValue it) {
    if (it instanceof NBTByte) {
      return _isByte((NBTByte)it);
    } else if (it instanceof NBTInt) {
      return _isByte((NBTInt)it);
    } else if (it instanceof NBTShort) {
      return _isByte((NBTShort)it);
    } else if (it != null) {
      return _isByte(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public static MCEntityValidator.Possibility isConvertibleToByte(final NBTValue it) {
    if (it instanceof NBTByte) {
      return _isConvertibleToByte((NBTByte)it);
    } else if (it instanceof NBTInt) {
      return _isConvertibleToByte((NBTInt)it);
    } else if (it instanceof NBTShort) {
      return _isConvertibleToByte((NBTShort)it);
    } else if (it != null) {
      return _isConvertibleToByte(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public static boolean isBool(final NBTValue it) {
    if (it instanceof NBTByte) {
      return _isBool((NBTByte)it);
    } else if (it instanceof NBTInt) {
      return _isBool((NBTInt)it);
    } else if (it instanceof NBTBool) {
      return _isBool((NBTBool)it);
    } else if (it != null) {
      return _isBool(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public static boolean isBool(final NBTValue it, final boolean exact) {
    if (it instanceof NBTByte) {
      return _isBool((NBTByte)it, exact);
    } else if (it instanceof NBTInt) {
      return _isBool((NBTInt)it, exact);
    } else if (it instanceof NBTBool) {
      return _isBool((NBTBool)it, exact);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, exact).toString());
    }
  }
}
