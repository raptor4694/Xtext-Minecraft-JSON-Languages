/**
 * generated by Xtext 2.19.0
 */
package com.raptor.mcentity.mcentity.util;

import com.raptor.mcentity.mcentity.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.raptor.mcentity.mcentity.McentityPackage
 * @generated
 */
public class McentitySwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static McentityPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public McentitySwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = McentityPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case McentityPackage.ENTITY_DATA:
      {
        EntityData entityData = (EntityData)theEObject;
        T result = caseEntityData(entityData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_VALUE:
      {
        NBTValue nbtValue = (NBTValue)theEObject;
        T result = caseNBTValue(nbtValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_COMPOUND:
      {
        NBTCompound nbtCompound = (NBTCompound)theEObject;
        T result = caseNBTCompound(nbtCompound);
        if (result == null) result = caseNBTValue(nbtCompound);
        if (result == null) result = caseSelectorValue(nbtCompound);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_ENTRY:
      {
        NBTEntry nbtEntry = (NBTEntry)theEObject;
        T result = caseNBTEntry(nbtEntry);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_BYTE_ARRAY:
      {
        NBTByteArray nbtByteArray = (NBTByteArray)theEObject;
        T result = caseNBTByteArray(nbtByteArray);
        if (result == null) result = caseNBTValue(nbtByteArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_LONG_ARRAY:
      {
        NBTLongArray nbtLongArray = (NBTLongArray)theEObject;
        T result = caseNBTLongArray(nbtLongArray);
        if (result == null) result = caseNBTValue(nbtLongArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_INT_ARRAY:
      {
        NBTIntArray nbtIntArray = (NBTIntArray)theEObject;
        T result = caseNBTIntArray(nbtIntArray);
        if (result == null) result = caseNBTValue(nbtIntArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_ARRAY:
      {
        NBTArray nbtArray = (NBTArray)theEObject;
        T result = caseNBTArray(nbtArray);
        if (result == null) result = caseNBTValue(nbtArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_BOOL:
      {
        NBTBool nbtBool = (NBTBool)theEObject;
        T result = caseNBTBool(nbtBool);
        if (result == null) result = caseNBTValue(nbtBool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_NUMBER:
      {
        NBTNumber nbtNumber = (NBTNumber)theEObject;
        T result = caseNBTNumber(nbtNumber);
        if (result == null) result = caseNBTValue(nbtNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_FLOAT:
      {
        NBTFloat nbtFloat = (NBTFloat)theEObject;
        T result = caseNBTFloat(nbtFloat);
        if (result == null) result = caseNBTNumber(nbtFloat);
        if (result == null) result = caseNBTValue(nbtFloat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_DOUBLE:
      {
        NBTDouble nbtDouble = (NBTDouble)theEObject;
        T result = caseNBTDouble(nbtDouble);
        if (result == null) result = caseNBTNumber(nbtDouble);
        if (result == null) result = caseNBTValue(nbtDouble);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_LONG:
      {
        NBTLong nbtLong = (NBTLong)theEObject;
        T result = caseNBTLong(nbtLong);
        if (result == null) result = caseNBTNumber(nbtLong);
        if (result == null) result = caseNBTValue(nbtLong);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_SHORT:
      {
        NBTShort nbtShort = (NBTShort)theEObject;
        T result = caseNBTShort(nbtShort);
        if (result == null) result = caseNBTNumber(nbtShort);
        if (result == null) result = caseNBTValue(nbtShort);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_BYTE:
      {
        NBTByte nbtByte = (NBTByte)theEObject;
        T result = caseNBTByte(nbtByte);
        if (result == null) result = caseNBTNumber(nbtByte);
        if (result == null) result = caseNBTValue(nbtByte);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_INT:
      {
        NBTInt nbtInt = (NBTInt)theEObject;
        T result = caseNBTInt(nbtInt);
        if (result == null) result = caseNBTNumber(nbtInt);
        if (result == null) result = caseNBTValue(nbtInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBT_STRING:
      {
        NBTString nbtString = (NBTString)theEObject;
        T result = caseNBTString(nbtString);
        if (result == null) result = caseNBTValue(nbtString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NBTJSON_TEXT_COMPONENT:
      {
        NBTJSONTextComponent nbtjsonTextComponent = (NBTJSONTextComponent)theEObject;
        T result = caseNBTJSONTextComponent(nbtjsonTextComponent);
        if (result == null) result = caseNBTValue(nbtjsonTextComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_TEXT_COMPONENT:
      {
        JSONTextComponent jsonTextComponent = (JSONTextComponent)theEObject;
        T result = caseJSONTextComponent(jsonTextComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_VALUE:
      {
        JSONValue jsonValue = (JSONValue)theEObject;
        T result = caseJSONValue(jsonValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_BOOL:
      {
        JSONBool jsonBool = (JSONBool)theEObject;
        T result = caseJSONBool(jsonBool);
        if (result == null) result = caseJSONValue(jsonBool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_NUMBER:
      {
        JSONNumber jsonNumber = (JSONNumber)theEObject;
        T result = caseJSONNumber(jsonNumber);
        if (result == null) result = caseJSONValue(jsonNumber);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_DOUBLE:
      {
        JSONDouble jsonDouble = (JSONDouble)theEObject;
        T result = caseJSONDouble(jsonDouble);
        if (result == null) result = caseJSONNumber(jsonDouble);
        if (result == null) result = caseJSONValue(jsonDouble);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_LONG:
      {
        JSONLong jsonLong = (JSONLong)theEObject;
        T result = caseJSONLong(jsonLong);
        if (result == null) result = caseJSONNumber(jsonLong);
        if (result == null) result = caseJSONValue(jsonLong);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_OBJECT:
      {
        JSONObject jsonObject = (JSONObject)theEObject;
        T result = caseJSONObject(jsonObject);
        if (result == null) result = caseJSONTextComponent(jsonObject);
        if (result == null) result = caseJSONValue(jsonObject);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_ENTRY:
      {
        JSONEntry jsonEntry = (JSONEntry)theEObject;
        T result = caseJSONEntry(jsonEntry);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_ARRAY:
      {
        JSONArray jsonArray = (JSONArray)theEObject;
        T result = caseJSONArray(jsonArray);
        if (result == null) result = caseJSONTextComponent(jsonArray);
        if (result == null) result = caseJSONValue(jsonArray);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.JSON_STRING:
      {
        JSONString jsonString = (JSONString)theEObject;
        T result = caseJSONString(jsonString);
        if (result == null) result = caseJSONTextComponent(jsonString);
        if (result == null) result = caseJSONValue(jsonString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.SELECTOR:
      {
        Selector selector = (Selector)theEObject;
        T result = caseSelector(selector);
        if (result == null) result = caseJSONValue(selector);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.SELECTOR_ARGUMENTS:
      {
        SelectorArguments selectorArguments = (SelectorArguments)theEObject;
        T result = caseSelectorArguments(selectorArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.SELECTOR_FILTER:
      {
        SelectorFilter selectorFilter = (SelectorFilter)theEObject;
        T result = caseSelectorFilter(selectorFilter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.SELECTOR_VALUE:
      {
        SelectorValue selectorValue = (SelectorValue)theEObject;
        T result = caseSelectorValue(selectorValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.INT_RANGE:
      {
        IntRange intRange = (IntRange)theEObject;
        T result = caseIntRange(intRange);
        if (result == null) result = caseSelectorValue(intRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.DOUBLE_RANGE:
      {
        DoubleRange doubleRange = (DoubleRange)theEObject;
        T result = caseDoubleRange(doubleRange);
        if (result == null) result = caseSelectorValue(doubleRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.INT_SELECTOR_VALUE:
      {
        IntSelectorValue intSelectorValue = (IntSelectorValue)theEObject;
        T result = caseIntSelectorValue(intSelectorValue);
        if (result == null) result = caseSelectorValue(intSelectorValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.DOUBLE_SELECTOR_VALUE:
      {
        DoubleSelectorValue doubleSelectorValue = (DoubleSelectorValue)theEObject;
        T result = caseDoubleSelectorValue(doubleSelectorValue);
        if (result == null) result = caseSelectorValue(doubleSelectorValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.BOOL_SELECTOR_VALUE:
      {
        BoolSelectorValue boolSelectorValue = (BoolSelectorValue)theEObject;
        T result = caseBoolSelectorValue(boolSelectorValue);
        if (result == null) result = caseSelectorValue(boolSelectorValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.STRING_SELECTOR_VALUE:
      {
        StringSelectorValue stringSelectorValue = (StringSelectorValue)theEObject;
        T result = caseStringSelectorValue(stringSelectorValue);
        if (result == null) result = caseSelectorValue(stringSelectorValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.NAMESPACED_KEY:
      {
        NamespacedKey namespacedKey = (NamespacedKey)theEObject;
        T result = caseNamespacedKey(namespacedKey);
        if (result == null) result = caseNBTValue(namespacedKey);
        if (result == null) result = caseSelectorValue(namespacedKey);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.CLOSED_INT_RANGE:
      {
        ClosedIntRange closedIntRange = (ClosedIntRange)theEObject;
        T result = caseClosedIntRange(closedIntRange);
        if (result == null) result = caseIntRange(closedIntRange);
        if (result == null) result = caseSelectorValue(closedIntRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.OPEN_ENDED_INT_RANGE:
      {
        OpenEndedIntRange openEndedIntRange = (OpenEndedIntRange)theEObject;
        T result = caseOpenEndedIntRange(openEndedIntRange);
        if (result == null) result = caseIntRange(openEndedIntRange);
        if (result == null) result = caseSelectorValue(openEndedIntRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.OPEN_BEGINNING_INT_RANGE:
      {
        OpenBeginningIntRange openBeginningIntRange = (OpenBeginningIntRange)theEObject;
        T result = caseOpenBeginningIntRange(openBeginningIntRange);
        if (result == null) result = caseIntRange(openBeginningIntRange);
        if (result == null) result = caseSelectorValue(openBeginningIntRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.CLOSED_DOUBLE_RANGE:
      {
        ClosedDoubleRange closedDoubleRange = (ClosedDoubleRange)theEObject;
        T result = caseClosedDoubleRange(closedDoubleRange);
        if (result == null) result = caseDoubleRange(closedDoubleRange);
        if (result == null) result = caseSelectorValue(closedDoubleRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.OPEN_ENDED_DOUBLE_RANGE:
      {
        OpenEndedDoubleRange openEndedDoubleRange = (OpenEndedDoubleRange)theEObject;
        T result = caseOpenEndedDoubleRange(openEndedDoubleRange);
        if (result == null) result = caseDoubleRange(openEndedDoubleRange);
        if (result == null) result = caseSelectorValue(openEndedDoubleRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case McentityPackage.OPEN_BEGINNING_DOUBLE_RANGE:
      {
        OpenBeginningDoubleRange openBeginningDoubleRange = (OpenBeginningDoubleRange)theEObject;
        T result = caseOpenBeginningDoubleRange(openBeginningDoubleRange);
        if (result == null) result = caseDoubleRange(openBeginningDoubleRange);
        if (result == null) result = caseSelectorValue(openBeginningDoubleRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Entity Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Entity Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEntityData(EntityData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTValue(NBTValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Compound</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Compound</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTCompound(NBTCompound object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Entry</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Entry</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTEntry(NBTEntry object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Byte Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Byte Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTByteArray(NBTByteArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Long Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Long Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTLongArray(NBTLongArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Int Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Int Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTIntArray(NBTIntArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTArray(NBTArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Bool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Bool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTBool(NBTBool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTNumber(NBTNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Float</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Float</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTFloat(NBTFloat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Double</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Double</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTDouble(NBTDouble object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Long</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Long</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTLong(NBTLong object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Short</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Short</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTShort(NBTShort object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Byte</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Byte</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTByte(NBTByte object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTInt(NBTInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBT String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBT String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTString(NBTString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NBTJSON Text Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NBTJSON Text Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNBTJSONTextComponent(NBTJSONTextComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Text Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Text Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONTextComponent(JSONTextComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONValue(JSONValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Bool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Bool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONBool(JSONBool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONNumber(JSONNumber object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Double</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Double</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONDouble(JSONDouble object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Long</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Long</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONLong(JSONLong object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Object</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Object</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONObject(JSONObject object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Entry</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Entry</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONEntry(JSONEntry object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON Array</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON Array</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONArray(JSONArray object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JSON String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JSON String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJSONString(JSONString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selector</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selector</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelector(Selector object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selector Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selector Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectorArguments(SelectorArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selector Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selector Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectorFilter(SelectorFilter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Selector Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Selector Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSelectorValue(SelectorValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntRange(IntRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Double Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Double Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoubleRange(DoubleRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Int Selector Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Int Selector Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIntSelectorValue(IntSelectorValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Double Selector Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Double Selector Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDoubleSelectorValue(DoubleSelectorValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Selector Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Selector Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolSelectorValue(BoolSelectorValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Selector Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Selector Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringSelectorValue(StringSelectorValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Namespaced Key</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Namespaced Key</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNamespacedKey(NamespacedKey object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Closed Int Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Closed Int Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClosedIntRange(ClosedIntRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Open Ended Int Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Open Ended Int Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpenEndedIntRange(OpenEndedIntRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Open Beginning Int Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Open Beginning Int Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpenBeginningIntRange(OpenBeginningIntRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Closed Double Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Closed Double Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseClosedDoubleRange(ClosedDoubleRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Open Ended Double Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Open Ended Double Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpenEndedDoubleRange(OpenEndedDoubleRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Open Beginning Double Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Open Beginning Double Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpenBeginningDoubleRange(OpenBeginningDoubleRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //McentitySwitch
