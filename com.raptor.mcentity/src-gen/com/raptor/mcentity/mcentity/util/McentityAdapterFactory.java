/**
 * generated by Xtext 2.19.0
 */
package com.raptor.mcentity.mcentity.util;

import com.raptor.mcentity.mcentity.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.raptor.mcentity.mcentity.McentityPackage
 * @generated
 */
public class McentityAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static McentityPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public McentityAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = McentityPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected McentitySwitch<Adapter> modelSwitch =
    new McentitySwitch<Adapter>()
    {
      @Override
      public Adapter caseEntityData(EntityData object)
      {
        return createEntityDataAdapter();
      }
      @Override
      public Adapter caseNBTValue(NBTValue object)
      {
        return createNBTValueAdapter();
      }
      @Override
      public Adapter caseNBTCompound(NBTCompound object)
      {
        return createNBTCompoundAdapter();
      }
      @Override
      public Adapter caseNBTEntry(NBTEntry object)
      {
        return createNBTEntryAdapter();
      }
      @Override
      public Adapter caseNBTByteArray(NBTByteArray object)
      {
        return createNBTByteArrayAdapter();
      }
      @Override
      public Adapter caseNBTLongArray(NBTLongArray object)
      {
        return createNBTLongArrayAdapter();
      }
      @Override
      public Adapter caseNBTIntArray(NBTIntArray object)
      {
        return createNBTIntArrayAdapter();
      }
      @Override
      public Adapter caseNBTArray(NBTArray object)
      {
        return createNBTArrayAdapter();
      }
      @Override
      public Adapter caseNBTBool(NBTBool object)
      {
        return createNBTBoolAdapter();
      }
      @Override
      public Adapter caseNBTNumber(NBTNumber object)
      {
        return createNBTNumberAdapter();
      }
      @Override
      public Adapter caseNBTFloat(NBTFloat object)
      {
        return createNBTFloatAdapter();
      }
      @Override
      public Adapter caseNBTDouble(NBTDouble object)
      {
        return createNBTDoubleAdapter();
      }
      @Override
      public Adapter caseNBTLong(NBTLong object)
      {
        return createNBTLongAdapter();
      }
      @Override
      public Adapter caseNBTShort(NBTShort object)
      {
        return createNBTShortAdapter();
      }
      @Override
      public Adapter caseNBTByte(NBTByte object)
      {
        return createNBTByteAdapter();
      }
      @Override
      public Adapter caseNBTInt(NBTInt object)
      {
        return createNBTIntAdapter();
      }
      @Override
      public Adapter caseNBTString(NBTString object)
      {
        return createNBTStringAdapter();
      }
      @Override
      public Adapter caseNBTJSONTextComponent(NBTJSONTextComponent object)
      {
        return createNBTJSONTextComponentAdapter();
      }
      @Override
      public Adapter caseJSONTextComponent(JSONTextComponent object)
      {
        return createJSONTextComponentAdapter();
      }
      @Override
      public Adapter caseJSONValue(JSONValue object)
      {
        return createJSONValueAdapter();
      }
      @Override
      public Adapter caseJSONBool(JSONBool object)
      {
        return createJSONBoolAdapter();
      }
      @Override
      public Adapter caseJSONNumber(JSONNumber object)
      {
        return createJSONNumberAdapter();
      }
      @Override
      public Adapter caseJSONDouble(JSONDouble object)
      {
        return createJSONDoubleAdapter();
      }
      @Override
      public Adapter caseJSONLong(JSONLong object)
      {
        return createJSONLongAdapter();
      }
      @Override
      public Adapter caseJSONObject(JSONObject object)
      {
        return createJSONObjectAdapter();
      }
      @Override
      public Adapter caseJSONEntry(JSONEntry object)
      {
        return createJSONEntryAdapter();
      }
      @Override
      public Adapter caseJSONArray(JSONArray object)
      {
        return createJSONArrayAdapter();
      }
      @Override
      public Adapter caseJSONString(JSONString object)
      {
        return createJSONStringAdapter();
      }
      @Override
      public Adapter caseSelector(Selector object)
      {
        return createSelectorAdapter();
      }
      @Override
      public Adapter caseSelectorArguments(SelectorArguments object)
      {
        return createSelectorArgumentsAdapter();
      }
      @Override
      public Adapter caseSelectorFilter(SelectorFilter object)
      {
        return createSelectorFilterAdapter();
      }
      @Override
      public Adapter caseSelectorValue(SelectorValue object)
      {
        return createSelectorValueAdapter();
      }
      @Override
      public Adapter caseIntRange(IntRange object)
      {
        return createIntRangeAdapter();
      }
      @Override
      public Adapter caseDoubleRange(DoubleRange object)
      {
        return createDoubleRangeAdapter();
      }
      @Override
      public Adapter caseIntSelectorValue(IntSelectorValue object)
      {
        return createIntSelectorValueAdapter();
      }
      @Override
      public Adapter caseDoubleSelectorValue(DoubleSelectorValue object)
      {
        return createDoubleSelectorValueAdapter();
      }
      @Override
      public Adapter caseBoolSelectorValue(BoolSelectorValue object)
      {
        return createBoolSelectorValueAdapter();
      }
      @Override
      public Adapter caseStringSelectorValue(StringSelectorValue object)
      {
        return createStringSelectorValueAdapter();
      }
      @Override
      public Adapter caseNamespacedKey(NamespacedKey object)
      {
        return createNamespacedKeyAdapter();
      }
      @Override
      public Adapter caseClosedIntRange(ClosedIntRange object)
      {
        return createClosedIntRangeAdapter();
      }
      @Override
      public Adapter caseOpenEndedIntRange(OpenEndedIntRange object)
      {
        return createOpenEndedIntRangeAdapter();
      }
      @Override
      public Adapter caseOpenBeginningIntRange(OpenBeginningIntRange object)
      {
        return createOpenBeginningIntRangeAdapter();
      }
      @Override
      public Adapter caseClosedDoubleRange(ClosedDoubleRange object)
      {
        return createClosedDoubleRangeAdapter();
      }
      @Override
      public Adapter caseOpenEndedDoubleRange(OpenEndedDoubleRange object)
      {
        return createOpenEndedDoubleRangeAdapter();
      }
      @Override
      public Adapter caseOpenBeginningDoubleRange(OpenBeginningDoubleRange object)
      {
        return createOpenBeginningDoubleRangeAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.EntityData <em>Entity Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.EntityData
   * @generated
   */
  public Adapter createEntityDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTValue <em>NBT Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTValue
   * @generated
   */
  public Adapter createNBTValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTCompound <em>NBT Compound</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTCompound
   * @generated
   */
  public Adapter createNBTCompoundAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTEntry <em>NBT Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTEntry
   * @generated
   */
  public Adapter createNBTEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTByteArray <em>NBT Byte Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTByteArray
   * @generated
   */
  public Adapter createNBTByteArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTLongArray <em>NBT Long Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTLongArray
   * @generated
   */
  public Adapter createNBTLongArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTIntArray <em>NBT Int Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTIntArray
   * @generated
   */
  public Adapter createNBTIntArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTArray <em>NBT Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTArray
   * @generated
   */
  public Adapter createNBTArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTBool <em>NBT Bool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTBool
   * @generated
   */
  public Adapter createNBTBoolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTNumber <em>NBT Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTNumber
   * @generated
   */
  public Adapter createNBTNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTFloat <em>NBT Float</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTFloat
   * @generated
   */
  public Adapter createNBTFloatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTDouble <em>NBT Double</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTDouble
   * @generated
   */
  public Adapter createNBTDoubleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTLong <em>NBT Long</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTLong
   * @generated
   */
  public Adapter createNBTLongAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTShort <em>NBT Short</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTShort
   * @generated
   */
  public Adapter createNBTShortAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTByte <em>NBT Byte</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTByte
   * @generated
   */
  public Adapter createNBTByteAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTInt <em>NBT Int</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTInt
   * @generated
   */
  public Adapter createNBTIntAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTString <em>NBT String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTString
   * @generated
   */
  public Adapter createNBTStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NBTJSONTextComponent <em>NBTJSON Text Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NBTJSONTextComponent
   * @generated
   */
  public Adapter createNBTJSONTextComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONTextComponent <em>JSON Text Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONTextComponent
   * @generated
   */
  public Adapter createJSONTextComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONValue <em>JSON Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONValue
   * @generated
   */
  public Adapter createJSONValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONBool <em>JSON Bool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONBool
   * @generated
   */
  public Adapter createJSONBoolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONNumber <em>JSON Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONNumber
   * @generated
   */
  public Adapter createJSONNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONDouble <em>JSON Double</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONDouble
   * @generated
   */
  public Adapter createJSONDoubleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONLong <em>JSON Long</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONLong
   * @generated
   */
  public Adapter createJSONLongAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONObject <em>JSON Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONObject
   * @generated
   */
  public Adapter createJSONObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONEntry <em>JSON Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONEntry
   * @generated
   */
  public Adapter createJSONEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONArray <em>JSON Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONArray
   * @generated
   */
  public Adapter createJSONArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.JSONString <em>JSON String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.JSONString
   * @generated
   */
  public Adapter createJSONStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.Selector <em>Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.Selector
   * @generated
   */
  public Adapter createSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.SelectorArguments <em>Selector Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.SelectorArguments
   * @generated
   */
  public Adapter createSelectorArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.SelectorFilter <em>Selector Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.SelectorFilter
   * @generated
   */
  public Adapter createSelectorFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.SelectorValue <em>Selector Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.SelectorValue
   * @generated
   */
  public Adapter createSelectorValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.IntRange <em>Int Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.IntRange
   * @generated
   */
  public Adapter createIntRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.DoubleRange <em>Double Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.DoubleRange
   * @generated
   */
  public Adapter createDoubleRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.IntSelectorValue <em>Int Selector Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.IntSelectorValue
   * @generated
   */
  public Adapter createIntSelectorValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.DoubleSelectorValue <em>Double Selector Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.DoubleSelectorValue
   * @generated
   */
  public Adapter createDoubleSelectorValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.BoolSelectorValue <em>Bool Selector Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.BoolSelectorValue
   * @generated
   */
  public Adapter createBoolSelectorValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.StringSelectorValue <em>String Selector Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.StringSelectorValue
   * @generated
   */
  public Adapter createStringSelectorValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.NamespacedKey <em>Namespaced Key</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.NamespacedKey
   * @generated
   */
  public Adapter createNamespacedKeyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.ClosedIntRange <em>Closed Int Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.ClosedIntRange
   * @generated
   */
  public Adapter createClosedIntRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.OpenEndedIntRange <em>Open Ended Int Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.OpenEndedIntRange
   * @generated
   */
  public Adapter createOpenEndedIntRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.OpenBeginningIntRange <em>Open Beginning Int Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.OpenBeginningIntRange
   * @generated
   */
  public Adapter createOpenBeginningIntRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.ClosedDoubleRange <em>Closed Double Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.ClosedDoubleRange
   * @generated
   */
  public Adapter createClosedDoubleRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.OpenEndedDoubleRange <em>Open Ended Double Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.OpenEndedDoubleRange
   * @generated
   */
  public Adapter createOpenEndedDoubleRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcentity.mcentity.OpenBeginningDoubleRange <em>Open Beginning Double Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcentity.mcentity.OpenBeginningDoubleRange
   * @generated
   */
  public Adapter createOpenBeginningDoubleRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //McentityAdapterFactory
