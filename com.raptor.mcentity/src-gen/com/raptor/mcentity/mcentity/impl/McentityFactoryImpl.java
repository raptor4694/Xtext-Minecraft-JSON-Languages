/**
 * generated by Xtext 2.19.0
 */
package com.raptor.mcentity.mcentity.impl;

import com.raptor.mcentity.mcentity.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class McentityFactoryImpl extends EFactoryImpl implements McentityFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static McentityFactory init()
  {
    try
    {
      McentityFactory theMcentityFactory = (McentityFactory)EPackage.Registry.INSTANCE.getEFactory(McentityPackage.eNS_URI);
      if (theMcentityFactory != null)
      {
        return theMcentityFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new McentityFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public McentityFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case McentityPackage.ENTITY_DATA: return createEntityData();
      case McentityPackage.NBT_VALUE: return createNBTValue();
      case McentityPackage.NBT_COMPOUND: return createNBTCompound();
      case McentityPackage.NBT_ENTRY: return createNBTEntry();
      case McentityPackage.NBT_BYTE_ARRAY: return createNBTByteArray();
      case McentityPackage.NBT_LONG_ARRAY: return createNBTLongArray();
      case McentityPackage.NBT_INT_ARRAY: return createNBTIntArray();
      case McentityPackage.NBT_ARRAY: return createNBTArray();
      case McentityPackage.NBT_BOOL: return createNBTBool();
      case McentityPackage.NBT_NUMBER: return createNBTNumber();
      case McentityPackage.NBT_FLOAT: return createNBTFloat();
      case McentityPackage.NBT_DOUBLE: return createNBTDouble();
      case McentityPackage.NBT_LONG: return createNBTLong();
      case McentityPackage.NBT_SHORT: return createNBTShort();
      case McentityPackage.NBT_BYTE: return createNBTByte();
      case McentityPackage.NBT_INT: return createNBTInt();
      case McentityPackage.NBT_STRING: return createNBTString();
      case McentityPackage.NBTJSON_TEXT_COMPONENT: return createNBTJSONTextComponent();
      case McentityPackage.JSON_TEXT_COMPONENT: return createJSONTextComponent();
      case McentityPackage.JSON_VALUE: return createJSONValue();
      case McentityPackage.JSON_BOOL: return createJSONBool();
      case McentityPackage.JSON_NUMBER: return createJSONNumber();
      case McentityPackage.JSON_DOUBLE: return createJSONDouble();
      case McentityPackage.JSON_LONG: return createJSONLong();
      case McentityPackage.JSON_OBJECT: return createJSONObject();
      case McentityPackage.JSON_ENTRY: return createJSONEntry();
      case McentityPackage.JSON_ARRAY: return createJSONArray();
      case McentityPackage.JSON_STRING: return createJSONString();
      case McentityPackage.SELECTOR: return createSelector();
      case McentityPackage.SELECTOR_ARGUMENTS: return createSelectorArguments();
      case McentityPackage.SELECTOR_FILTER: return createSelectorFilter();
      case McentityPackage.SELECTOR_VALUE: return createSelectorValue();
      case McentityPackage.INT_RANGE: return createIntRange();
      case McentityPackage.DOUBLE_RANGE: return createDoubleRange();
      case McentityPackage.INT_SELECTOR_VALUE: return createIntSelectorValue();
      case McentityPackage.DOUBLE_SELECTOR_VALUE: return createDoubleSelectorValue();
      case McentityPackage.BOOL_SELECTOR_VALUE: return createBoolSelectorValue();
      case McentityPackage.STRING_SELECTOR_VALUE: return createStringSelectorValue();
      case McentityPackage.NAMESPACED_KEY: return createNamespacedKey();
      case McentityPackage.CLOSED_INT_RANGE: return createClosedIntRange();
      case McentityPackage.OPEN_ENDED_INT_RANGE: return createOpenEndedIntRange();
      case McentityPackage.OPEN_BEGINNING_INT_RANGE: return createOpenBeginningIntRange();
      case McentityPackage.CLOSED_DOUBLE_RANGE: return createClosedDoubleRange();
      case McentityPackage.OPEN_ENDED_DOUBLE_RANGE: return createOpenEndedDoubleRange();
      case McentityPackage.OPEN_BEGINNING_DOUBLE_RANGE: return createOpenBeginningDoubleRange();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case McentityPackage.SELECTOR_TYPE:
        return createSelectorTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case McentityPackage.SELECTOR_TYPE:
        return convertSelectorTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityData createEntityData()
  {
    EntityDataImpl entityData = new EntityDataImpl();
    return entityData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTValue createNBTValue()
  {
    NBTValueImpl nbtValue = new NBTValueImpl();
    return nbtValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTCompound createNBTCompound()
  {
    NBTCompoundImpl nbtCompound = new NBTCompoundImpl();
    return nbtCompound;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTEntry createNBTEntry()
  {
    NBTEntryImpl nbtEntry = new NBTEntryImpl();
    return nbtEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTByteArray createNBTByteArray()
  {
    NBTByteArrayImpl nbtByteArray = new NBTByteArrayImpl();
    return nbtByteArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTLongArray createNBTLongArray()
  {
    NBTLongArrayImpl nbtLongArray = new NBTLongArrayImpl();
    return nbtLongArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTIntArray createNBTIntArray()
  {
    NBTIntArrayImpl nbtIntArray = new NBTIntArrayImpl();
    return nbtIntArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTArray createNBTArray()
  {
    NBTArrayImpl nbtArray = new NBTArrayImpl();
    return nbtArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTBool createNBTBool()
  {
    NBTBoolImpl nbtBool = new NBTBoolImpl();
    return nbtBool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTNumber createNBTNumber()
  {
    NBTNumberImpl nbtNumber = new NBTNumberImpl();
    return nbtNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTFloat createNBTFloat()
  {
    NBTFloatImpl nbtFloat = new NBTFloatImpl();
    return nbtFloat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTDouble createNBTDouble()
  {
    NBTDoubleImpl nbtDouble = new NBTDoubleImpl();
    return nbtDouble;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTLong createNBTLong()
  {
    NBTLongImpl nbtLong = new NBTLongImpl();
    return nbtLong;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTShort createNBTShort()
  {
    NBTShortImpl nbtShort = new NBTShortImpl();
    return nbtShort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTByte createNBTByte()
  {
    NBTByteImpl nbtByte = new NBTByteImpl();
    return nbtByte;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTInt createNBTInt()
  {
    NBTIntImpl nbtInt = new NBTIntImpl();
    return nbtInt;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTString createNBTString()
  {
    NBTStringImpl nbtString = new NBTStringImpl();
    return nbtString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NBTJSONTextComponent createNBTJSONTextComponent()
  {
    NBTJSONTextComponentImpl nbtjsonTextComponent = new NBTJSONTextComponentImpl();
    return nbtjsonTextComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONTextComponent createJSONTextComponent()
  {
    JSONTextComponentImpl jsonTextComponent = new JSONTextComponentImpl();
    return jsonTextComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONValue createJSONValue()
  {
    JSONValueImpl jsonValue = new JSONValueImpl();
    return jsonValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONBool createJSONBool()
  {
    JSONBoolImpl jsonBool = new JSONBoolImpl();
    return jsonBool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONNumber createJSONNumber()
  {
    JSONNumberImpl jsonNumber = new JSONNumberImpl();
    return jsonNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONDouble createJSONDouble()
  {
    JSONDoubleImpl jsonDouble = new JSONDoubleImpl();
    return jsonDouble;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONLong createJSONLong()
  {
    JSONLongImpl jsonLong = new JSONLongImpl();
    return jsonLong;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONObject createJSONObject()
  {
    JSONObjectImpl jsonObject = new JSONObjectImpl();
    return jsonObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONEntry createJSONEntry()
  {
    JSONEntryImpl jsonEntry = new JSONEntryImpl();
    return jsonEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONArray createJSONArray()
  {
    JSONArrayImpl jsonArray = new JSONArrayImpl();
    return jsonArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JSONString createJSONString()
  {
    JSONStringImpl jsonString = new JSONStringImpl();
    return jsonString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Selector createSelector()
  {
    SelectorImpl selector = new SelectorImpl();
    return selector;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectorArguments createSelectorArguments()
  {
    SelectorArgumentsImpl selectorArguments = new SelectorArgumentsImpl();
    return selectorArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectorFilter createSelectorFilter()
  {
    SelectorFilterImpl selectorFilter = new SelectorFilterImpl();
    return selectorFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectorValue createSelectorValue()
  {
    SelectorValueImpl selectorValue = new SelectorValueImpl();
    return selectorValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntRange createIntRange()
  {
    IntRangeImpl intRange = new IntRangeImpl();
    return intRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleRange createDoubleRange()
  {
    DoubleRangeImpl doubleRange = new DoubleRangeImpl();
    return doubleRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntSelectorValue createIntSelectorValue()
  {
    IntSelectorValueImpl intSelectorValue = new IntSelectorValueImpl();
    return intSelectorValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DoubleSelectorValue createDoubleSelectorValue()
  {
    DoubleSelectorValueImpl doubleSelectorValue = new DoubleSelectorValueImpl();
    return doubleSelectorValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BoolSelectorValue createBoolSelectorValue()
  {
    BoolSelectorValueImpl boolSelectorValue = new BoolSelectorValueImpl();
    return boolSelectorValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringSelectorValue createStringSelectorValue()
  {
    StringSelectorValueImpl stringSelectorValue = new StringSelectorValueImpl();
    return stringSelectorValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamespacedKey createNamespacedKey()
  {
    NamespacedKeyImpl namespacedKey = new NamespacedKeyImpl();
    return namespacedKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClosedIntRange createClosedIntRange()
  {
    ClosedIntRangeImpl closedIntRange = new ClosedIntRangeImpl();
    return closedIntRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpenEndedIntRange createOpenEndedIntRange()
  {
    OpenEndedIntRangeImpl openEndedIntRange = new OpenEndedIntRangeImpl();
    return openEndedIntRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpenBeginningIntRange createOpenBeginningIntRange()
  {
    OpenBeginningIntRangeImpl openBeginningIntRange = new OpenBeginningIntRangeImpl();
    return openBeginningIntRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClosedDoubleRange createClosedDoubleRange()
  {
    ClosedDoubleRangeImpl closedDoubleRange = new ClosedDoubleRangeImpl();
    return closedDoubleRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpenEndedDoubleRange createOpenEndedDoubleRange()
  {
    OpenEndedDoubleRangeImpl openEndedDoubleRange = new OpenEndedDoubleRangeImpl();
    return openEndedDoubleRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpenBeginningDoubleRange createOpenBeginningDoubleRange()
  {
    OpenBeginningDoubleRangeImpl openBeginningDoubleRange = new OpenBeginningDoubleRangeImpl();
    return openBeginningDoubleRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelectorType createSelectorTypeFromString(EDataType eDataType, String initialValue)
  {
    SelectorType result = SelectorType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSelectorTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public McentityPackage getMcentityPackage()
  {
    return (McentityPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static McentityPackage getPackage()
  {
    return McentityPackage.eINSTANCE;
  }

} //McentityFactoryImpl
