/**
 * generated by Xtext 2.19.0
 */
package com.raptor.mcentity.mcentity;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Selector Type</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see com.raptor.mcentity.mcentity.McentityPackage#getSelectorType()
 * @model
 * @generated
 */
public enum SelectorType implements Enumerator
{
  /**
   * The '<em><b>NEAREST PLAYER</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEAREST_PLAYER_VALUE
   * @generated
   * @ordered
   */
  NEAREST_PLAYER(0, "NEAREST_PLAYER", "@p"),

  /**
   * The '<em><b>ALL PLAYERS</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ALL_PLAYERS_VALUE
   * @generated
   * @ordered
   */
  ALL_PLAYERS(1, "ALL_PLAYERS", "@a"),

  /**
   * The '<em><b>SELF</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SELF_VALUE
   * @generated
   * @ordered
   */
  SELF(2, "SELF", "@s"),

  /**
   * The '<em><b>ENTITIES</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ENTITIES_VALUE
   * @generated
   * @ordered
   */
  ENTITIES(3, "ENTITIES", "@e"),

  /**
   * The '<em><b>RANDOM PLAYER</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #RANDOM_PLAYER_VALUE
   * @generated
   * @ordered
   */
  RANDOM_PLAYER(4, "RANDOM_PLAYER", "@r");

  /**
   * The '<em><b>NEAREST PLAYER</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NEAREST_PLAYER
   * @model literal="@p"
   * @generated
   * @ordered
   */
  public static final int NEAREST_PLAYER_VALUE = 0;

  /**
   * The '<em><b>ALL PLAYERS</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ALL_PLAYERS
   * @model literal="@a"
   * @generated
   * @ordered
   */
  public static final int ALL_PLAYERS_VALUE = 1;

  /**
   * The '<em><b>SELF</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SELF
   * @model literal="@s"
   * @generated
   * @ordered
   */
  public static final int SELF_VALUE = 2;

  /**
   * The '<em><b>ENTITIES</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ENTITIES
   * @model literal="@e"
   * @generated
   * @ordered
   */
  public static final int ENTITIES_VALUE = 3;

  /**
   * The '<em><b>RANDOM PLAYER</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #RANDOM_PLAYER
   * @model literal="@r"
   * @generated
   * @ordered
   */
  public static final int RANDOM_PLAYER_VALUE = 4;

  /**
   * An array of all the '<em><b>Selector Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final SelectorType[] VALUES_ARRAY =
    new SelectorType[]
    {
      NEAREST_PLAYER,
      ALL_PLAYERS,
      SELF,
      ENTITIES,
      RANDOM_PLAYER,
    };

  /**
   * A public read-only list of all the '<em><b>Selector Type</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<SelectorType> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Selector Type</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static SelectorType get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      SelectorType result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Selector Type</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static SelectorType getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      SelectorType result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Selector Type</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static SelectorType get(int value)
  {
    switch (value)
    {
      case NEAREST_PLAYER_VALUE: return NEAREST_PLAYER;
      case ALL_PLAYERS_VALUE: return ALL_PLAYERS;
      case SELF_VALUE: return SELF;
      case ENTITIES_VALUE: return ENTITIES;
      case RANDOM_PLAYER_VALUE: return RANDOM_PLAYER;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private SelectorType(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //SelectorType
