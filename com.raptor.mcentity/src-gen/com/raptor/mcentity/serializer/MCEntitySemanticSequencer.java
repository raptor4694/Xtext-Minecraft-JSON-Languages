/*
 * generated by Xtext 2.19.0
 */
package com.raptor.mcentity.serializer;

import com.google.inject.Inject;
import com.raptor.mcentity.mcentity.BoolSelectorValue;
import com.raptor.mcentity.mcentity.ClosedDoubleRange;
import com.raptor.mcentity.mcentity.ClosedIntRange;
import com.raptor.mcentity.mcentity.DoubleSelectorValue;
import com.raptor.mcentity.mcentity.EntityData;
import com.raptor.mcentity.mcentity.IntSelectorValue;
import com.raptor.mcentity.mcentity.JSONArray;
import com.raptor.mcentity.mcentity.JSONBool;
import com.raptor.mcentity.mcentity.JSONDouble;
import com.raptor.mcentity.mcentity.JSONEntry;
import com.raptor.mcentity.mcentity.JSONLong;
import com.raptor.mcentity.mcentity.JSONObject;
import com.raptor.mcentity.mcentity.JSONString;
import com.raptor.mcentity.mcentity.McentityPackage;
import com.raptor.mcentity.mcentity.NBTArray;
import com.raptor.mcentity.mcentity.NBTBool;
import com.raptor.mcentity.mcentity.NBTByte;
import com.raptor.mcentity.mcentity.NBTByteArray;
import com.raptor.mcentity.mcentity.NBTCompound;
import com.raptor.mcentity.mcentity.NBTDouble;
import com.raptor.mcentity.mcentity.NBTEntry;
import com.raptor.mcentity.mcentity.NBTFloat;
import com.raptor.mcentity.mcentity.NBTInt;
import com.raptor.mcentity.mcentity.NBTIntArray;
import com.raptor.mcentity.mcentity.NBTJSONTextComponent;
import com.raptor.mcentity.mcentity.NBTLong;
import com.raptor.mcentity.mcentity.NBTLongArray;
import com.raptor.mcentity.mcentity.NBTShort;
import com.raptor.mcentity.mcentity.NBTString;
import com.raptor.mcentity.mcentity.NamespacedKey;
import com.raptor.mcentity.mcentity.OpenBeginningDoubleRange;
import com.raptor.mcentity.mcentity.OpenBeginningIntRange;
import com.raptor.mcentity.mcentity.OpenEndedDoubleRange;
import com.raptor.mcentity.mcentity.OpenEndedIntRange;
import com.raptor.mcentity.mcentity.Selector;
import com.raptor.mcentity.mcentity.SelectorArguments;
import com.raptor.mcentity.mcentity.SelectorFilter;
import com.raptor.mcentity.mcentity.StringSelectorValue;
import com.raptor.mcentity.services.MCEntityGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class MCEntitySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MCEntityGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == McentityPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case McentityPackage.BOOL_SELECTOR_VALUE:
				sequence_BoolSelectorValue(context, (BoolSelectorValue) semanticObject); 
				return; 
			case McentityPackage.CLOSED_DOUBLE_RANGE:
				sequence_DoubleRange(context, (ClosedDoubleRange) semanticObject); 
				return; 
			case McentityPackage.CLOSED_INT_RANGE:
				sequence_IntRange(context, (ClosedIntRange) semanticObject); 
				return; 
			case McentityPackage.DOUBLE_SELECTOR_VALUE:
				sequence_DoubleSelectorValue(context, (DoubleSelectorValue) semanticObject); 
				return; 
			case McentityPackage.ENTITY_DATA:
				sequence_EntityData(context, (EntityData) semanticObject); 
				return; 
			case McentityPackage.INT_SELECTOR_VALUE:
				sequence_IntSelectorValue(context, (IntSelectorValue) semanticObject); 
				return; 
			case McentityPackage.JSON_ARRAY:
				if (rule == grammarAccess.getJSONTextComponentRule()
						|| rule == grammarAccess.getJSONValueRule()
						|| rule == grammarAccess.getJSONArrayRule()) {
					sequence_JSONArray(context, (JSONArray) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNBTJSONTextComponentArrayRule()) {
					sequence_NBTJSONTextComponentArray(context, (JSONArray) semanticObject); 
					return; 
				}
				else break;
			case McentityPackage.JSON_BOOL:
				sequence_JSONBool(context, (JSONBool) semanticObject); 
				return; 
			case McentityPackage.JSON_DOUBLE:
				sequence_JSONDouble(context, (JSONDouble) semanticObject); 
				return; 
			case McentityPackage.JSON_ENTRY:
				sequence_JSONEntry(context, (JSONEntry) semanticObject); 
				return; 
			case McentityPackage.JSON_LONG:
				sequence_JSONLong(context, (JSONLong) semanticObject); 
				return; 
			case McentityPackage.JSON_OBJECT:
				if (rule == grammarAccess.getJSONTextComponentRule()
						|| rule == grammarAccess.getJSONValueRule()
						|| rule == grammarAccess.getJSONObjectRule()) {
					sequence_JSONObject(context, (JSONObject) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNBTJSONTextComponentObjectRule()) {
					sequence_NBTJSONTextComponentObject(context, (JSONObject) semanticObject); 
					return; 
				}
				else break;
			case McentityPackage.JSON_STRING:
				if (rule == grammarAccess.getJSONTextComponentRule()
						|| rule == grammarAccess.getJSONValueRule()
						|| rule == grammarAccess.getJSONStringRule()) {
					sequence_JSONString(context, (JSONString) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNBTJSONTextComponentStringRule()) {
					sequence_NBTJSONTextComponentString(context, (JSONString) semanticObject); 
					return; 
				}
				else break;
			case McentityPackage.NBT_ARRAY:
				sequence_NBTArray(context, (NBTArray) semanticObject); 
				return; 
			case McentityPackage.NBT_BOOL:
				sequence_NBTBool(context, (NBTBool) semanticObject); 
				return; 
			case McentityPackage.NBT_BYTE:
				sequence_NBTByte(context, (NBTByte) semanticObject); 
				return; 
			case McentityPackage.NBT_BYTE_ARRAY:
				sequence_NBTByteArray(context, (NBTByteArray) semanticObject); 
				return; 
			case McentityPackage.NBT_COMPOUND:
				sequence_NBTCompound(context, (NBTCompound) semanticObject); 
				return; 
			case McentityPackage.NBT_DOUBLE:
				sequence_NBTDouble(context, (NBTDouble) semanticObject); 
				return; 
			case McentityPackage.NBT_ENTRY:
				sequence_NBTEntry(context, (NBTEntry) semanticObject); 
				return; 
			case McentityPackage.NBT_FLOAT:
				sequence_NBTFloat(context, (NBTFloat) semanticObject); 
				return; 
			case McentityPackage.NBT_INT:
				sequence_NBTInt(context, (NBTInt) semanticObject); 
				return; 
			case McentityPackage.NBT_INT_ARRAY:
				sequence_NBTIntArray(context, (NBTIntArray) semanticObject); 
				return; 
			case McentityPackage.NBTJSON_TEXT_COMPONENT:
				sequence_NBTJSONTextComponent(context, (NBTJSONTextComponent) semanticObject); 
				return; 
			case McentityPackage.NBT_LONG:
				sequence_NBTLong(context, (NBTLong) semanticObject); 
				return; 
			case McentityPackage.NBT_LONG_ARRAY:
				sequence_NBTLongArray(context, (NBTLongArray) semanticObject); 
				return; 
			case McentityPackage.NBT_SHORT:
				sequence_NBTShort(context, (NBTShort) semanticObject); 
				return; 
			case McentityPackage.NBT_STRING:
				sequence_NBTString(context, (NBTString) semanticObject); 
				return; 
			case McentityPackage.NAMESPACED_KEY:
				sequence_NamespacedKey(context, (NamespacedKey) semanticObject); 
				return; 
			case McentityPackage.OPEN_BEGINNING_DOUBLE_RANGE:
				sequence_DoubleRange(context, (OpenBeginningDoubleRange) semanticObject); 
				return; 
			case McentityPackage.OPEN_BEGINNING_INT_RANGE:
				sequence_IntRange(context, (OpenBeginningIntRange) semanticObject); 
				return; 
			case McentityPackage.OPEN_ENDED_DOUBLE_RANGE:
				sequence_DoubleRange(context, (OpenEndedDoubleRange) semanticObject); 
				return; 
			case McentityPackage.OPEN_ENDED_INT_RANGE:
				sequence_IntRange(context, (OpenEndedIntRange) semanticObject); 
				return; 
			case McentityPackage.SELECTOR:
				sequence_Selector(context, (Selector) semanticObject); 
				return; 
			case McentityPackage.SELECTOR_ARGUMENTS:
				sequence_SelectorArguments(context, (SelectorArguments) semanticObject); 
				return; 
			case McentityPackage.SELECTOR_FILTER:
				sequence_SelectorFilter(context, (SelectorFilter) semanticObject); 
				return; 
			case McentityPackage.STRING_SELECTOR_VALUE:
				sequence_StringSelectorValue(context, (StringSelectorValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SelectorValue returns BoolSelectorValue
	 *     BoolSelectorValue returns BoolSelectorValue
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_BoolSelectorValue(ISerializationContext context, BoolSelectorValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns ClosedDoubleRange
	 *     DoubleRange returns ClosedDoubleRange
	 *
	 * Constraint:
	 *     ((begin=INTasDouble end=DOUBLE) | (begin=DOUBLE end=DOUBLEorINT))
	 */
	protected void sequence_DoubleRange(ISerializationContext context, ClosedDoubleRange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns OpenBeginningDoubleRange
	 *     DoubleRange returns OpenBeginningDoubleRange
	 *
	 * Constraint:
	 *     end=DOUBLE
	 */
	protected void sequence_DoubleRange(ISerializationContext context, OpenBeginningDoubleRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.OPEN_BEGINNING_DOUBLE_RANGE__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.OPEN_BEGINNING_DOUBLE_RANGE__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoubleRangeAccess().getEndDOUBLETerminalRuleCall_2_2_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns OpenEndedDoubleRange
	 *     DoubleRange returns OpenEndedDoubleRange
	 *
	 * Constraint:
	 *     begin=DOUBLE
	 */
	protected void sequence_DoubleRange(ISerializationContext context, OpenEndedDoubleRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.OPEN_ENDED_DOUBLE_RANGE__BEGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.OPEN_ENDED_DOUBLE_RANGE__BEGIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoubleRangeAccess().getBeginDOUBLETerminalRuleCall_1_1_0(), semanticObject.getBegin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns DoubleSelectorValue
	 *     DoubleSelectorValue returns DoubleSelectorValue
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_DoubleSelectorValue(ISerializationContext context, DoubleSelectorValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.DOUBLE_SELECTOR_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.DOUBLE_SELECTOR_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDoubleSelectorValueAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EntityData returns EntityData
	 *
	 * Constraint:
	 *     nbt=NBTCompound
	 */
	protected void sequence_EntityData(ISerializationContext context, EntityData semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.ENTITY_DATA__NBT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.ENTITY_DATA__NBT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEntityDataAccess().getNbtNBTCompoundParserRuleCall_0(), semanticObject.getNbt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns ClosedIntRange
	 *     IntRange returns ClosedIntRange
	 *
	 * Constraint:
	 *     (begin=INT end=INT)
	 */
	protected void sequence_IntRange(ISerializationContext context, ClosedIntRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.CLOSED_INT_RANGE__BEGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.CLOSED_INT_RANGE__BEGIN));
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.CLOSED_INT_RANGE__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.CLOSED_INT_RANGE__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntRangeAccess().getBeginINTTerminalRuleCall_0_1_0(), semanticObject.getBegin());
		feeder.accept(grammarAccess.getIntRangeAccess().getEndINTTerminalRuleCall_0_3_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns OpenBeginningIntRange
	 *     IntRange returns OpenBeginningIntRange
	 *
	 * Constraint:
	 *     end=INT
	 */
	protected void sequence_IntRange(ISerializationContext context, OpenBeginningIntRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.OPEN_BEGINNING_INT_RANGE__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.OPEN_BEGINNING_INT_RANGE__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntRangeAccess().getEndINTTerminalRuleCall_2_2_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns OpenEndedIntRange
	 *     IntRange returns OpenEndedIntRange
	 *
	 * Constraint:
	 *     begin=INT
	 */
	protected void sequence_IntRange(ISerializationContext context, OpenEndedIntRange semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.OPEN_ENDED_INT_RANGE__BEGIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.OPEN_ENDED_INT_RANGE__BEGIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntRangeAccess().getBeginINTTerminalRuleCall_1_1_0(), semanticObject.getBegin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns IntSelectorValue
	 *     IntSelectorValue returns IntSelectorValue
	 *
	 * Constraint:
	 *     value=INTAsLong
	 */
	protected void sequence_IntSelectorValue(ISerializationContext context, IntSelectorValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.INT_SELECTOR_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.INT_SELECTOR_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntSelectorValueAccess().getValueINTAsLongParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONTextComponent returns JSONArray
	 *     JSONValue returns JSONArray
	 *     JSONArray returns JSONArray
	 *
	 * Constraint:
	 *     (entries+=JSONValue entries+=JSONValue*)?
	 */
	protected void sequence_JSONArray(ISerializationContext context, JSONArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSONValue returns JSONBool
	 *     JSONBool returns JSONBool
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_JSONBool(ISerializationContext context, JSONBool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSONValue returns JSONDouble
	 *     JSONNumber returns JSONDouble
	 *     JSONDouble returns JSONDouble
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_JSONDouble(ISerializationContext context, JSONDouble semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.JSON_DOUBLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.JSON_DOUBLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONDoubleAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONEntry returns JSONEntry
	 *
	 * Constraint:
	 *     (key=STRING value=JSONValue)
	 */
	protected void sequence_JSONEntry(ISerializationContext context, JSONEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.JSON_ENTRY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.JSON_ENTRY__KEY));
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.JSON_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.JSON_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONEntryAccess().getKeySTRINGTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getJSONEntryAccess().getValueJSONValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONValue returns JSONLong
	 *     JSONNumber returns JSONLong
	 *     JSONLong returns JSONLong
	 *
	 * Constraint:
	 *     value=INTAsLong
	 */
	protected void sequence_JSONLong(ISerializationContext context, JSONLong semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.JSON_LONG__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.JSON_LONG__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONLongAccess().getValueINTAsLongParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     JSONTextComponent returns JSONObject
	 *     JSONValue returns JSONObject
	 *     JSONObject returns JSONObject
	 *
	 * Constraint:
	 *     (entries+=JSONEntry entries+=JSONEntry*)?
	 */
	protected void sequence_JSONObject(ISerializationContext context, JSONObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSONTextComponent returns JSONString
	 *     JSONValue returns JSONString
	 *     JSONString returns JSONString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_JSONString(ISerializationContext context, JSONString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.JSON_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.JSON_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJSONStringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTArray
	 *     NBTArray returns NBTArray
	 *
	 * Constraint:
	 *     (
	 *         (elements+=NBTCompound elements+=NBTCompound*) | 
	 *         (elements+=NBTByteArray elements+=NBTByteArray*) | 
	 *         (elements+=NBTLongArray elements+=NBTLongArray*) | 
	 *         (elements+=NBTIntArray elements+=NBTIntArray*) | 
	 *         (elements+=NBTArray elements+=NBTArray*) | 
	 *         ((elements+=NBTBool | elements+=NBTNumber) elements+=NBTNumber? (elements+=NBTBool? elements+=NBTNumber?)*) | 
	 *         (elements+=NBTString elements+=NBTString*) | 
	 *         (elements+=NBTJSONTextComponent elements+=NBTJSONTextComponent*)
	 *     )?
	 */
	protected void sequence_NBTArray(ISerializationContext context, NBTArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTBool
	 *     NBTBool returns NBTBool
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_NBTBool(ISerializationContext context, NBTBool semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTByteArray
	 *     NBTByteArray returns NBTByteArray
	 *
	 * Constraint:
	 *     (elements+=BYTE elements+=BYTE*)?
	 */
	protected void sequence_NBTByteArray(ISerializationContext context, NBTByteArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTByte
	 *     NBTNumber returns NBTByte
	 *     NBTByte returns NBTByte
	 *
	 * Constraint:
	 *     value=BYTE
	 */
	protected void sequence_NBTByte(ISerializationContext context, NBTByte semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.NBT_BYTE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.NBT_BYTE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNBTByteAccess().getValueBYTETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTCompound
	 *     NBTCompound returns NBTCompound
	 *     SelectorValue returns NBTCompound
	 *
	 * Constraint:
	 *     (entries+=NBTEntry entries+=NBTEntry*)?
	 */
	protected void sequence_NBTCompound(ISerializationContext context, NBTCompound semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTDouble
	 *     NBTNumber returns NBTDouble
	 *     NBTDouble returns NBTDouble
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_NBTDouble(ISerializationContext context, NBTDouble semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.NBT_DOUBLE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.NBT_DOUBLE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNBTDoubleAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NBTEntry returns NBTEntry
	 *
	 * Constraint:
	 *     ((key=STRING | key=UnquotedString) value=NBTValue)
	 */
	protected void sequence_NBTEntry(ISerializationContext context, NBTEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTFloat
	 *     NBTNumber returns NBTFloat
	 *     NBTFloat returns NBTFloat
	 *
	 * Constraint:
	 *     value=FLOAT
	 */
	protected void sequence_NBTFloat(ISerializationContext context, NBTFloat semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.NBT_FLOAT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.NBT_FLOAT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNBTFloatAccess().getValueFLOATTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTIntArray
	 *     NBTIntArray returns NBTIntArray
	 *
	 * Constraint:
	 *     (elements+=INT elements+=INT*)?
	 */
	protected void sequence_NBTIntArray(ISerializationContext context, NBTIntArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTInt
	 *     NBTNumber returns NBTInt
	 *     NBTInt returns NBTInt
	 *
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_NBTInt(ISerializationContext context, NBTInt semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.NBT_INT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.NBT_INT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNBTIntAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NBTJSONTextComponentArray returns JSONArray
	 *
	 * Constraint:
	 *     (entries+=JSONValue entries+=JSONValue*)?
	 */
	protected void sequence_NBTJSONTextComponentArray(ISerializationContext context, JSONArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTJSONTextComponentObject returns JSONObject
	 *
	 * Constraint:
	 *     (entries+=JSONEntry entries+=JSONEntry*)?
	 */
	protected void sequence_NBTJSONTextComponentObject(ISerializationContext context, JSONObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTJSONTextComponentString returns JSONString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_NBTJSONTextComponentString(ISerializationContext context, JSONString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.JSON_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.JSON_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNBTJSONTextComponentStringAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTJSONTextComponent
	 *     NBTJSONTextComponent returns NBTJSONTextComponent
	 *
	 * Constraint:
	 *     (value=NBTJSONTextComponentObject | value=NBTJSONTextComponentArray | value=NBTJSONTextComponentString)
	 */
	protected void sequence_NBTJSONTextComponent(ISerializationContext context, NBTJSONTextComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTLongArray
	 *     NBTLongArray returns NBTLongArray
	 *
	 * Constraint:
	 *     (elements+=LONG elements+=LONG*)?
	 */
	protected void sequence_NBTLongArray(ISerializationContext context, NBTLongArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTLong
	 *     NBTNumber returns NBTLong
	 *     NBTLong returns NBTLong
	 *
	 * Constraint:
	 *     value=LONG
	 */
	protected void sequence_NBTLong(ISerializationContext context, NBTLong semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.NBT_LONG__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.NBT_LONG__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNBTLongAccess().getValueLONGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTShort
	 *     NBTNumber returns NBTShort
	 *     NBTShort returns NBTShort
	 *
	 * Constraint:
	 *     value=SHORT
	 */
	protected void sequence_NBTShort(ISerializationContext context, NBTShort semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.NBT_SHORT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.NBT_SHORT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNBTShortAccess().getValueSHORTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NBTString
	 *     NBTString returns NBTString
	 *
	 * Constraint:
	 *     (value=STRING | value=SINGLE_STRING | value=UnquotedString)
	 */
	protected void sequence_NBTString(ISerializationContext context, NBTString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NBTValue returns NamespacedKey
	 *     SelectorValue returns NamespacedKey
	 *     NamespacedKey returns NamespacedKey
	 *
	 * Constraint:
	 *     (namespace=UnquotedString key=NamespacedKeyKey)
	 */
	protected void sequence_NamespacedKey(ISerializationContext context, NamespacedKey semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.NAMESPACED_KEY__NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.NAMESPACED_KEY__NAMESPACE));
			if (transientValues.isValueTransient(semanticObject, McentityPackage.Literals.NAMESPACED_KEY__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McentityPackage.Literals.NAMESPACED_KEY__KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNamespacedKeyAccess().getNamespaceUnquotedStringParserRuleCall_0_0(), semanticObject.getNamespace());
		feeder.accept(grammarAccess.getNamespacedKeyAccess().getKeyNamespacedKeyKeyParserRuleCall_2_0(), semanticObject.getKey());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SelectorArguments returns SelectorArguments
	 *
	 * Constraint:
	 *     (filters+=SelectorFilter filters+=SelectorFilter*)
	 */
	protected void sequence_SelectorArguments(ISerializationContext context, SelectorArguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelectorFilter returns SelectorFilter
	 *
	 * Constraint:
	 *     (name=ID inverted?='!'? value=SelectorValue)
	 */
	protected void sequence_SelectorFilter(ISerializationContext context, SelectorFilter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     JSONValue returns Selector
	 *     Selector returns Selector
	 *
	 * Constraint:
	 *     (type=SelectorType arguments=SelectorArguments?)
	 */
	protected void sequence_Selector(ISerializationContext context, Selector semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SelectorValue returns StringSelectorValue
	 *     StringSelectorValue returns StringSelectorValue
	 *
	 * Constraint:
	 *     (value=STRING | value=UnquotedString)
	 */
	protected void sequence_StringSelectorValue(ISerializationContext context, StringSelectorValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
