/*
 * generated by Xtext 2.19.0
 */
package com.raptor.mcentity.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MCEntityGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EntityDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.EntityData");
		private final Assignment cNbtAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNbtNBTCompoundParserRuleCall_0 = (RuleCall)cNbtAssignment.eContents().get(0);
		
		//EntityData:
		//	nbt=NBTCompound;
		@Override public ParserRule getRule() { return rule; }
		
		//nbt=NBTCompound
		public Assignment getNbtAssignment() { return cNbtAssignment; }
		
		//NBTCompound
		public RuleCall getNbtNBTCompoundParserRuleCall_0() { return cNbtNBTCompoundParserRuleCall_0; }
	}
	public class NBTValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNBTJSONTextComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNBTCompoundParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNBTByteArrayParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNBTLongArrayParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNBTIntArrayParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNBTArrayParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNBTBoolParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNBTNumberParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cNamespacedKeyParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cNBTStringParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		////DefaultEntityDatum returns EntityDatum:
		////	"Pos" {PosDatum} ':' pos=Vec3D |
		////	"Motion" {MotionDatum} ':' motion=Vec3D |
		////	"Rotation" {RotationDatum} ':' rotation=Vec2F |
		////	"FallDistance" {FallDistanceDatum} ':' fallDistance=FloatAssumed |
		////	"Fire" {FireDatum} ':' fire=ShortAssumed |
		////	"Air" {AirDatum} ':' air=ShortAssumed |
		////	"OnGround" {OnGroundDatum} ':' (onGround?="true" | "false") |
		////	"NoGravity" {NoGravityDatum} ':' (noGravity?="true" | "false") |
		////	"Invulnerable" {InvulnerableDatum} ':' (invulnerable?="true" | "false") |
		////	"PortalCooldown" {PortalCooldownDatum} ':' portalCooldown=INT |
		////	"UUIDMost" {UUIDMostDatum} ':' uuidMost=LongAssumed |
		////	"UUIDLeast" {UUIDLeastDatum} ':' uuidLeast=LongAssumed |
		////	"CustomName" {CustomNameDatum} ':' customName=JSONTextComponent |
		////;
		////
		////Vec3D:
		////	'[' x=DoubleAssumed ',' y=DoubleAssumed ',' z=DoubleAssumed ','? ']'
		////;
		////
		////Vec2F:
		////	'[' first=FloatAssumed ',' second=FloatAssumed ','? ']'
		////;
		//NBTValue:
		//	NBTJSONTextComponent
		//	| NBTCompound
		//	| NBTByteArray
		//	| NBTLongArray
		//	| NBTIntArray
		//	| NBTArray
		//	| NBTBool
		//	| NBTNumber
		//	| NamespacedKey
		//	| NBTString;
		@Override public ParserRule getRule() { return rule; }
		
		//NBTJSONTextComponent | NBTCompound | NBTByteArray | NBTLongArray | NBTIntArray | NBTArray | NBTBool | NBTNumber |
		//NamespacedKey | NBTString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NBTJSONTextComponent
		public RuleCall getNBTJSONTextComponentParserRuleCall_0() { return cNBTJSONTextComponentParserRuleCall_0; }
		
		//NBTCompound
		public RuleCall getNBTCompoundParserRuleCall_1() { return cNBTCompoundParserRuleCall_1; }
		
		//NBTByteArray
		public RuleCall getNBTByteArrayParserRuleCall_2() { return cNBTByteArrayParserRuleCall_2; }
		
		//NBTLongArray
		public RuleCall getNBTLongArrayParserRuleCall_3() { return cNBTLongArrayParserRuleCall_3; }
		
		//NBTIntArray
		public RuleCall getNBTIntArrayParserRuleCall_4() { return cNBTIntArrayParserRuleCall_4; }
		
		//NBTArray
		public RuleCall getNBTArrayParserRuleCall_5() { return cNBTArrayParserRuleCall_5; }
		
		//NBTBool
		public RuleCall getNBTBoolParserRuleCall_6() { return cNBTBoolParserRuleCall_6; }
		
		//NBTNumber
		public RuleCall getNBTNumberParserRuleCall_7() { return cNBTNumberParserRuleCall_7; }
		
		//NamespacedKey
		public RuleCall getNamespacedKeyParserRuleCall_8() { return cNamespacedKeyParserRuleCall_8; }
		
		//NBTString
		public RuleCall getNBTStringParserRuleCall_9() { return cNBTStringParserRuleCall_9; }
	}
	public class NBTCompoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTCompound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cNBTCompoundAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesNBTEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesNBTEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////DoNotUse_NBTValue returns NBTValue:
		////	Vec3D
		////;
		//NBTCompound:
		//	'{' {NBTCompound} (entries+=NBTEntry (',' entries+=NBTEntry)* ','?)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {NBTCompound} (entries+=NBTEntry (',' entries+=NBTEntry)* ','?)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{NBTCompound}
		public Action getNBTCompoundAction_1() { return cNBTCompoundAction_1; }
		
		//(entries+=NBTEntry (',' entries+=NBTEntry)* ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=NBTEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//NBTEntry
		public RuleCall getEntriesNBTEntryParserRuleCall_2_0_0() { return cEntriesNBTEntryParserRuleCall_2_0_0; }
		
		//(',' entries+=NBTEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entries+=NBTEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//NBTEntry
		public RuleCall getEntriesNBTEntryParserRuleCall_2_1_1_0() { return cEntriesNBTEntryParserRuleCall_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class NBTEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cKeyAlternatives_0_0 = (Alternatives)cKeyAssignment_0.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0_0 = (RuleCall)cKeyAlternatives_0_0.eContents().get(0);
		private final RuleCall cKeyUnquotedStringParserRuleCall_0_0_1 = (RuleCall)cKeyAlternatives_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueNBTValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//NBTEntry:
		//	key=(STRING | UnquotedString) ':' value=NBTValue;
		@Override public ParserRule getRule() { return rule; }
		
		//key=(STRING | UnquotedString) ':' value=NBTValue
		public Group getGroup() { return cGroup; }
		
		//key=(STRING | UnquotedString)
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//(STRING | UnquotedString)
		public Alternatives getKeyAlternatives_0_0() { return cKeyAlternatives_0_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0_0() { return cKeySTRINGTerminalRuleCall_0_0_0; }
		
		//UnquotedString
		public RuleCall getKeyUnquotedStringParserRuleCall_0_0_1() { return cKeyUnquotedStringParserRuleCall_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=NBTValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//NBTValue
		public RuleCall getValueNBTValueParserRuleCall_2_0() { return cValueNBTValueParserRuleCall_2_0; }
	}
	public class NBTByteArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTByteArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNBT_BYTE_ARRAY_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cNBTByteArrayAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsBYTETerminalRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsBYTETerminalRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NBTByteArray:
		//	NBT_BYTE_ARRAY_START {NBTByteArray} (elements+=BYTE (',' elements+=BYTE)* ','?)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//NBT_BYTE_ARRAY_START {NBTByteArray} (elements+=BYTE (',' elements+=BYTE)* ','?)? ']'
		public Group getGroup() { return cGroup; }
		
		//NBT_BYTE_ARRAY_START
		public RuleCall getNBT_BYTE_ARRAY_STARTTerminalRuleCall_0() { return cNBT_BYTE_ARRAY_STARTTerminalRuleCall_0; }
		
		//{NBTByteArray}
		public Action getNBTByteArrayAction_1() { return cNBTByteArrayAction_1; }
		
		//(elements+=BYTE (',' elements+=BYTE)* ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=BYTE
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//BYTE
		public RuleCall getElementsBYTETerminalRuleCall_2_0_0() { return cElementsBYTETerminalRuleCall_2_0_0; }
		
		//(',' elements+=BYTE)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=BYTE
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//BYTE
		public RuleCall getElementsBYTETerminalRuleCall_2_1_1_0() { return cElementsBYTETerminalRuleCall_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class NBTLongArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTLongArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNBT_LONG_ARRAY_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cNBTLongArrayAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsLONGTerminalRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsLONGTerminalRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NBTLongArray:
		//	NBT_LONG_ARRAY_START {NBTLongArray} (elements+=LONG (',' elements+=LONG)* ','?)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//NBT_LONG_ARRAY_START {NBTLongArray} (elements+=LONG (',' elements+=LONG)* ','?)? ']'
		public Group getGroup() { return cGroup; }
		
		//NBT_LONG_ARRAY_START
		public RuleCall getNBT_LONG_ARRAY_STARTTerminalRuleCall_0() { return cNBT_LONG_ARRAY_STARTTerminalRuleCall_0; }
		
		//{NBTLongArray}
		public Action getNBTLongArrayAction_1() { return cNBTLongArrayAction_1; }
		
		//(elements+=LONG (',' elements+=LONG)* ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=LONG
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//LONG
		public RuleCall getElementsLONGTerminalRuleCall_2_0_0() { return cElementsLONGTerminalRuleCall_2_0_0; }
		
		//(',' elements+=LONG)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=LONG
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//LONG
		public RuleCall getElementsLONGTerminalRuleCall_2_1_1_0() { return cElementsLONGTerminalRuleCall_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class NBTIntArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTIntArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNBT_INT_ARRAY_STARTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cNBTIntArrayAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsINTTerminalRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsINTTerminalRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//NBTIntArray:
		//	NBT_INT_ARRAY_START {NBTIntArray} (elements+=INT (',' elements+=INT)* ','?)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//NBT_INT_ARRAY_START {NBTIntArray} (elements+=INT (',' elements+=INT)* ','?)? ']'
		public Group getGroup() { return cGroup; }
		
		//NBT_INT_ARRAY_START
		public RuleCall getNBT_INT_ARRAY_STARTTerminalRuleCall_0() { return cNBT_INT_ARRAY_STARTTerminalRuleCall_0; }
		
		//{NBTIntArray}
		public Action getNBTIntArrayAction_1() { return cNBTIntArrayAction_1; }
		
		//(elements+=INT (',' elements+=INT)* ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=INT
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//INT
		public RuleCall getElementsINTTerminalRuleCall_2_0_0() { return cElementsINTTerminalRuleCall_2_0_0; }
		
		//(',' elements+=INT)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=INT
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//INT
		public RuleCall getElementsINTTerminalRuleCall_2_1_1_0() { return cElementsINTTerminalRuleCall_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class NBTArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cNBTArrayAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cAlternatives_2_0.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cElementsNBTCompoundParserRuleCall_2_0_0_0_0 = (RuleCall)cElementsAssignment_2_0_0_0.eContents().get(0);
		private final Group cGroup_2_0_0_1 = (Group)cGroup_2_0_0.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_0_1_0 = (Keyword)cGroup_2_0_0_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_0_1_1 = (Assignment)cGroup_2_0_0_1.eContents().get(1);
		private final RuleCall cElementsNBTCompoundParserRuleCall_2_0_0_1_1_0 = (RuleCall)cElementsAssignment_2_0_0_1_1.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Assignment cElementsAssignment_2_0_1_0 = (Assignment)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cElementsNBTByteArrayParserRuleCall_2_0_1_0_0 = (RuleCall)cElementsAssignment_2_0_1_0.eContents().get(0);
		private final Group cGroup_2_0_1_1 = (Group)cGroup_2_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_1_1_0 = (Keyword)cGroup_2_0_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_1_1_1 = (Assignment)cGroup_2_0_1_1.eContents().get(1);
		private final RuleCall cElementsNBTByteArrayParserRuleCall_2_0_1_1_1_0 = (RuleCall)cElementsAssignment_2_0_1_1_1.eContents().get(0);
		private final Group cGroup_2_0_2 = (Group)cAlternatives_2_0.eContents().get(2);
		private final Assignment cElementsAssignment_2_0_2_0 = (Assignment)cGroup_2_0_2.eContents().get(0);
		private final RuleCall cElementsNBTLongArrayParserRuleCall_2_0_2_0_0 = (RuleCall)cElementsAssignment_2_0_2_0.eContents().get(0);
		private final Group cGroup_2_0_2_1 = (Group)cGroup_2_0_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_2_1_0 = (Keyword)cGroup_2_0_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_2_1_1 = (Assignment)cGroup_2_0_2_1.eContents().get(1);
		private final RuleCall cElementsNBTLongArrayParserRuleCall_2_0_2_1_1_0 = (RuleCall)cElementsAssignment_2_0_2_1_1.eContents().get(0);
		private final Group cGroup_2_0_3 = (Group)cAlternatives_2_0.eContents().get(3);
		private final Assignment cElementsAssignment_2_0_3_0 = (Assignment)cGroup_2_0_3.eContents().get(0);
		private final RuleCall cElementsNBTIntArrayParserRuleCall_2_0_3_0_0 = (RuleCall)cElementsAssignment_2_0_3_0.eContents().get(0);
		private final Group cGroup_2_0_3_1 = (Group)cGroup_2_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_3_1_0 = (Keyword)cGroup_2_0_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_3_1_1 = (Assignment)cGroup_2_0_3_1.eContents().get(1);
		private final RuleCall cElementsNBTIntArrayParserRuleCall_2_0_3_1_1_0 = (RuleCall)cElementsAssignment_2_0_3_1_1.eContents().get(0);
		private final Group cGroup_2_0_4 = (Group)cAlternatives_2_0.eContents().get(4);
		private final Assignment cElementsAssignment_2_0_4_0 = (Assignment)cGroup_2_0_4.eContents().get(0);
		private final RuleCall cElementsNBTArrayParserRuleCall_2_0_4_0_0 = (RuleCall)cElementsAssignment_2_0_4_0.eContents().get(0);
		private final Group cGroup_2_0_4_1 = (Group)cGroup_2_0_4.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_4_1_0 = (Keyword)cGroup_2_0_4_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_4_1_1 = (Assignment)cGroup_2_0_4_1.eContents().get(1);
		private final RuleCall cElementsNBTArrayParserRuleCall_2_0_4_1_1_0 = (RuleCall)cElementsAssignment_2_0_4_1_1.eContents().get(0);
		private final Group cGroup_2_0_5 = (Group)cAlternatives_2_0.eContents().get(5);
		private final Assignment cElementsAssignment_2_0_5_0 = (Assignment)cGroup_2_0_5.eContents().get(0);
		private final Alternatives cElementsAlternatives_2_0_5_0_0 = (Alternatives)cElementsAssignment_2_0_5_0.eContents().get(0);
		private final RuleCall cElementsNBTBoolParserRuleCall_2_0_5_0_0_0 = (RuleCall)cElementsAlternatives_2_0_5_0_0.eContents().get(0);
		private final RuleCall cElementsNBTNumberParserRuleCall_2_0_5_0_0_1 = (RuleCall)cElementsAlternatives_2_0_5_0_0.eContents().get(1);
		private final Group cGroup_2_0_5_1 = (Group)cGroup_2_0_5.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_5_1_0 = (Keyword)cGroup_2_0_5_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_5_1_1 = (Assignment)cGroup_2_0_5_1.eContents().get(1);
		private final Alternatives cElementsAlternatives_2_0_5_1_1_0 = (Alternatives)cElementsAssignment_2_0_5_1_1.eContents().get(0);
		private final RuleCall cElementsNBTBoolParserRuleCall_2_0_5_1_1_0_0 = (RuleCall)cElementsAlternatives_2_0_5_1_1_0.eContents().get(0);
		private final RuleCall cElementsNBTNumberParserRuleCall_2_0_5_1_1_0_1 = (RuleCall)cElementsAlternatives_2_0_5_1_1_0.eContents().get(1);
		private final Group cGroup_2_0_6 = (Group)cAlternatives_2_0.eContents().get(6);
		private final Assignment cElementsAssignment_2_0_6_0 = (Assignment)cGroup_2_0_6.eContents().get(0);
		private final RuleCall cElementsNBTStringParserRuleCall_2_0_6_0_0 = (RuleCall)cElementsAssignment_2_0_6_0.eContents().get(0);
		private final Group cGroup_2_0_6_1 = (Group)cGroup_2_0_6.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_6_1_0 = (Keyword)cGroup_2_0_6_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_6_1_1 = (Assignment)cGroup_2_0_6_1.eContents().get(1);
		private final RuleCall cElementsNBTStringParserRuleCall_2_0_6_1_1_0 = (RuleCall)cElementsAssignment_2_0_6_1_1.eContents().get(0);
		private final Group cGroup_2_0_7 = (Group)cAlternatives_2_0.eContents().get(7);
		private final Assignment cElementsAssignment_2_0_7_0 = (Assignment)cGroup_2_0_7.eContents().get(0);
		private final RuleCall cElementsNBTJSONTextComponentParserRuleCall_2_0_7_0_0 = (RuleCall)cElementsAssignment_2_0_7_0.eContents().get(0);
		private final Group cGroup_2_0_7_1 = (Group)cGroup_2_0_7.eContents().get(1);
		private final Keyword cCommaKeyword_2_0_7_1_0 = (Keyword)cGroup_2_0_7_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_0_7_1_1 = (Assignment)cGroup_2_0_7_1.eContents().get(1);
		private final RuleCall cElementsNBTJSONTextComponentParserRuleCall_2_0_7_1_1_0 = (RuleCall)cElementsAssignment_2_0_7_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////ByteAssumed returns ecore::EByte: BYTE | INT;
		////
		////ShortAssumed returns ecore::EShort: SHORT | INT;
		////
		////FloatAssumed returns ecore::EFloat: FLOAT | INT;
		////
		////DoubleAssumed returns ecore::EDouble: DOUBLE | INT;
		////
		////LongAssumed returns ecore::ELong: LONG | INT;
		//NBTArray:
		//	'[' {NBTArray} ((elements+=NBTCompound (',' elements+=NBTCompound)*
		//	| elements+=NBTByteArray (',' elements+=NBTByteArray)*
		//	| elements+=NBTLongArray (',' elements+=NBTLongArray)*
		//	| elements+=NBTIntArray (',' elements+=NBTIntArray)*
		//	| elements+=NBTArray (',' elements+=NBTArray)*
		//	| elements+=(NBTBool | NBTNumber) (',' elements+=(NBTBool | NBTNumber))*
		//	| elements+=NBTString (',' elements+=NBTString)*
		//	| elements+=NBTJSONTextComponent (',' elements+=NBTJSONTextComponent)*) ','?)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' {NBTArray} ((elements+=NBTCompound (',' elements+=NBTCompound)* | elements+=NBTByteArray (','
		//elements+=NBTByteArray)* | elements+=NBTLongArray (',' elements+=NBTLongArray)* | elements+=NBTIntArray (','
		//elements+=NBTIntArray)* | elements+=NBTArray (',' elements+=NBTArray)* | elements+=(NBTBool | NBTNumber) (','
		//elements+=(NBTBool | NBTNumber))* | elements+=NBTString (',' elements+=NBTString)* | elements+=NBTJSONTextComponent
		//(',' elements+=NBTJSONTextComponent)*) ','?)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{NBTArray}
		public Action getNBTArrayAction_1() { return cNBTArrayAction_1; }
		
		//((elements+=NBTCompound (',' elements+=NBTCompound)* | elements+=NBTByteArray (',' elements+=NBTByteArray)* |
		//elements+=NBTLongArray (',' elements+=NBTLongArray)* | elements+=NBTIntArray (',' elements+=NBTIntArray)* |
		//elements+=NBTArray (',' elements+=NBTArray)* | elements+=(NBTBool | NBTNumber) (',' elements+=(NBTBool | NBTNumber))*
		//| elements+=NBTString (',' elements+=NBTString)* | elements+=NBTJSONTextComponent (','
		//elements+=NBTJSONTextComponent)*) ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//(elements+=NBTCompound (',' elements+=NBTCompound)* | elements+=NBTByteArray (',' elements+=NBTByteArray)* |
		//elements+=NBTLongArray (',' elements+=NBTLongArray)* | elements+=NBTIntArray (',' elements+=NBTIntArray)* |
		//elements+=NBTArray (',' elements+=NBTArray)* | elements+=(NBTBool | NBTNumber) (',' elements+=(NBTBool | NBTNumber))*
		//| elements+=NBTString (',' elements+=NBTString)* | elements+=NBTJSONTextComponent (','
		//elements+=NBTJSONTextComponent)*)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//elements+=NBTCompound (',' elements+=NBTCompound)*
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//elements+=NBTCompound
		public Assignment getElementsAssignment_2_0_0_0() { return cElementsAssignment_2_0_0_0; }
		
		//NBTCompound
		public RuleCall getElementsNBTCompoundParserRuleCall_2_0_0_0_0() { return cElementsNBTCompoundParserRuleCall_2_0_0_0_0; }
		
		//(',' elements+=NBTCompound)*
		public Group getGroup_2_0_0_1() { return cGroup_2_0_0_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_0_1_0() { return cCommaKeyword_2_0_0_1_0; }
		
		//elements+=NBTCompound
		public Assignment getElementsAssignment_2_0_0_1_1() { return cElementsAssignment_2_0_0_1_1; }
		
		//NBTCompound
		public RuleCall getElementsNBTCompoundParserRuleCall_2_0_0_1_1_0() { return cElementsNBTCompoundParserRuleCall_2_0_0_1_1_0; }
		
		//elements+=NBTByteArray (',' elements+=NBTByteArray)*
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }
		
		//elements+=NBTByteArray
		public Assignment getElementsAssignment_2_0_1_0() { return cElementsAssignment_2_0_1_0; }
		
		//NBTByteArray
		public RuleCall getElementsNBTByteArrayParserRuleCall_2_0_1_0_0() { return cElementsNBTByteArrayParserRuleCall_2_0_1_0_0; }
		
		//(',' elements+=NBTByteArray)*
		public Group getGroup_2_0_1_1() { return cGroup_2_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_1_1_0() { return cCommaKeyword_2_0_1_1_0; }
		
		//elements+=NBTByteArray
		public Assignment getElementsAssignment_2_0_1_1_1() { return cElementsAssignment_2_0_1_1_1; }
		
		//NBTByteArray
		public RuleCall getElementsNBTByteArrayParserRuleCall_2_0_1_1_1_0() { return cElementsNBTByteArrayParserRuleCall_2_0_1_1_1_0; }
		
		//elements+=NBTLongArray (',' elements+=NBTLongArray)*
		public Group getGroup_2_0_2() { return cGroup_2_0_2; }
		
		//elements+=NBTLongArray
		public Assignment getElementsAssignment_2_0_2_0() { return cElementsAssignment_2_0_2_0; }
		
		//NBTLongArray
		public RuleCall getElementsNBTLongArrayParserRuleCall_2_0_2_0_0() { return cElementsNBTLongArrayParserRuleCall_2_0_2_0_0; }
		
		//(',' elements+=NBTLongArray)*
		public Group getGroup_2_0_2_1() { return cGroup_2_0_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_2_1_0() { return cCommaKeyword_2_0_2_1_0; }
		
		//elements+=NBTLongArray
		public Assignment getElementsAssignment_2_0_2_1_1() { return cElementsAssignment_2_0_2_1_1; }
		
		//NBTLongArray
		public RuleCall getElementsNBTLongArrayParserRuleCall_2_0_2_1_1_0() { return cElementsNBTLongArrayParserRuleCall_2_0_2_1_1_0; }
		
		//elements+=NBTIntArray (',' elements+=NBTIntArray)*
		public Group getGroup_2_0_3() { return cGroup_2_0_3; }
		
		//elements+=NBTIntArray
		public Assignment getElementsAssignment_2_0_3_0() { return cElementsAssignment_2_0_3_0; }
		
		//NBTIntArray
		public RuleCall getElementsNBTIntArrayParserRuleCall_2_0_3_0_0() { return cElementsNBTIntArrayParserRuleCall_2_0_3_0_0; }
		
		//(',' elements+=NBTIntArray)*
		public Group getGroup_2_0_3_1() { return cGroup_2_0_3_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_3_1_0() { return cCommaKeyword_2_0_3_1_0; }
		
		//elements+=NBTIntArray
		public Assignment getElementsAssignment_2_0_3_1_1() { return cElementsAssignment_2_0_3_1_1; }
		
		//NBTIntArray
		public RuleCall getElementsNBTIntArrayParserRuleCall_2_0_3_1_1_0() { return cElementsNBTIntArrayParserRuleCall_2_0_3_1_1_0; }
		
		//elements+=NBTArray (',' elements+=NBTArray)*
		public Group getGroup_2_0_4() { return cGroup_2_0_4; }
		
		//elements+=NBTArray
		public Assignment getElementsAssignment_2_0_4_0() { return cElementsAssignment_2_0_4_0; }
		
		//NBTArray
		public RuleCall getElementsNBTArrayParserRuleCall_2_0_4_0_0() { return cElementsNBTArrayParserRuleCall_2_0_4_0_0; }
		
		//(',' elements+=NBTArray)*
		public Group getGroup_2_0_4_1() { return cGroup_2_0_4_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_4_1_0() { return cCommaKeyword_2_0_4_1_0; }
		
		//elements+=NBTArray
		public Assignment getElementsAssignment_2_0_4_1_1() { return cElementsAssignment_2_0_4_1_1; }
		
		//NBTArray
		public RuleCall getElementsNBTArrayParserRuleCall_2_0_4_1_1_0() { return cElementsNBTArrayParserRuleCall_2_0_4_1_1_0; }
		
		//elements+=(NBTBool | NBTNumber) (',' elements+=(NBTBool | NBTNumber))*
		public Group getGroup_2_0_5() { return cGroup_2_0_5; }
		
		//elements+=(NBTBool | NBTNumber)
		public Assignment getElementsAssignment_2_0_5_0() { return cElementsAssignment_2_0_5_0; }
		
		//(NBTBool | NBTNumber)
		public Alternatives getElementsAlternatives_2_0_5_0_0() { return cElementsAlternatives_2_0_5_0_0; }
		
		//NBTBool
		public RuleCall getElementsNBTBoolParserRuleCall_2_0_5_0_0_0() { return cElementsNBTBoolParserRuleCall_2_0_5_0_0_0; }
		
		//NBTNumber
		public RuleCall getElementsNBTNumberParserRuleCall_2_0_5_0_0_1() { return cElementsNBTNumberParserRuleCall_2_0_5_0_0_1; }
		
		//(',' elements+=(NBTBool | NBTNumber))*
		public Group getGroup_2_0_5_1() { return cGroup_2_0_5_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_5_1_0() { return cCommaKeyword_2_0_5_1_0; }
		
		//elements+=(NBTBool | NBTNumber)
		public Assignment getElementsAssignment_2_0_5_1_1() { return cElementsAssignment_2_0_5_1_1; }
		
		//(NBTBool | NBTNumber)
		public Alternatives getElementsAlternatives_2_0_5_1_1_0() { return cElementsAlternatives_2_0_5_1_1_0; }
		
		//NBTBool
		public RuleCall getElementsNBTBoolParserRuleCall_2_0_5_1_1_0_0() { return cElementsNBTBoolParserRuleCall_2_0_5_1_1_0_0; }
		
		//NBTNumber
		public RuleCall getElementsNBTNumberParserRuleCall_2_0_5_1_1_0_1() { return cElementsNBTNumberParserRuleCall_2_0_5_1_1_0_1; }
		
		//elements+=NBTString (',' elements+=NBTString)*
		public Group getGroup_2_0_6() { return cGroup_2_0_6; }
		
		//elements+=NBTString
		public Assignment getElementsAssignment_2_0_6_0() { return cElementsAssignment_2_0_6_0; }
		
		//NBTString
		public RuleCall getElementsNBTStringParserRuleCall_2_0_6_0_0() { return cElementsNBTStringParserRuleCall_2_0_6_0_0; }
		
		//(',' elements+=NBTString)*
		public Group getGroup_2_0_6_1() { return cGroup_2_0_6_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_6_1_0() { return cCommaKeyword_2_0_6_1_0; }
		
		//elements+=NBTString
		public Assignment getElementsAssignment_2_0_6_1_1() { return cElementsAssignment_2_0_6_1_1; }
		
		//NBTString
		public RuleCall getElementsNBTStringParserRuleCall_2_0_6_1_1_0() { return cElementsNBTStringParserRuleCall_2_0_6_1_1_0; }
		
		//elements+=NBTJSONTextComponent (',' elements+=NBTJSONTextComponent)*
		public Group getGroup_2_0_7() { return cGroup_2_0_7; }
		
		//elements+=NBTJSONTextComponent
		public Assignment getElementsAssignment_2_0_7_0() { return cElementsAssignment_2_0_7_0; }
		
		//NBTJSONTextComponent
		public RuleCall getElementsNBTJSONTextComponentParserRuleCall_2_0_7_0_0() { return cElementsNBTJSONTextComponentParserRuleCall_2_0_7_0_0; }
		
		//(',' elements+=NBTJSONTextComponent)*
		public Group getGroup_2_0_7_1() { return cGroup_2_0_7_1; }
		
		//','
		public Keyword getCommaKeyword_2_0_7_1_0() { return cCommaKeyword_2_0_7_1_0; }
		
		//elements+=NBTJSONTextComponent
		public Assignment getElementsAssignment_2_0_7_1_1() { return cElementsAssignment_2_0_7_1_1; }
		
		//NBTJSONTextComponent
		public RuleCall getElementsNBTJSONTextComponentParserRuleCall_2_0_7_1_1_0() { return cElementsNBTJSONTextComponentParserRuleCall_2_0_7_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class NBTBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cNBTBoolAction_1_1 = (Action)cGroup_1.eContents().get(1);
		
		//NBTBool:
		//	value?="true" | "false" {NBTBool};
		@Override public ParserRule getRule() { return rule; }
		
		//value?="true" | "false" {NBTBool}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value?="true"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//"false" {NBTBool}
		public Group getGroup_1() { return cGroup_1; }
		
		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//{NBTBool}
		public Action getNBTBoolAction_1_1() { return cNBTBoolAction_1_1; }
	}
	public class NBTNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNBTFloatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNBTDoubleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNBTLongParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNBTShortParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNBTByteParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNBTIntParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//NBTNumber:
		//	NBTFloat
		//	| NBTDouble
		//	| NBTLong
		//	| NBTShort
		//	| NBTByte
		//	| NBTInt;
		@Override public ParserRule getRule() { return rule; }
		
		//NBTFloat | NBTDouble | NBTLong | NBTShort | NBTByte | NBTInt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NBTFloat
		public RuleCall getNBTFloatParserRuleCall_0() { return cNBTFloatParserRuleCall_0; }
		
		//NBTDouble
		public RuleCall getNBTDoubleParserRuleCall_1() { return cNBTDoubleParserRuleCall_1; }
		
		//NBTLong
		public RuleCall getNBTLongParserRuleCall_2() { return cNBTLongParserRuleCall_2; }
		
		//NBTShort
		public RuleCall getNBTShortParserRuleCall_3() { return cNBTShortParserRuleCall_3; }
		
		//NBTByte
		public RuleCall getNBTByteParserRuleCall_4() { return cNBTByteParserRuleCall_4; }
		
		//NBTInt
		public RuleCall getNBTIntParserRuleCall_5() { return cNBTIntParserRuleCall_5; }
	}
	public class NBTFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTFloat");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NBTFloat:
		//	value=FLOAT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}
	public class NBTDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTDouble");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NBTDouble:
		//	value=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	public class NBTLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTLong");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLONGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NBTLong:
		//	value=LONG;
		@Override public ParserRule getRule() { return rule; }
		
		//value=LONG
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//LONG
		public RuleCall getValueLONGTerminalRuleCall_0() { return cValueLONGTerminalRuleCall_0; }
	}
	public class NBTShortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTShort");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSHORTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NBTShort:
		//	value=SHORT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=SHORT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//SHORT
		public RuleCall getValueSHORTTerminalRuleCall_0() { return cValueSHORTTerminalRuleCall_0; }
	}
	public class NBTByteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTByte");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBYTETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NBTByte:
		//	value=BYTE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BYTE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BYTE
		public RuleCall getValueBYTETerminalRuleCall_0() { return cValueBYTETerminalRuleCall_0; }
	}
	public class NBTIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTInt");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NBTInt:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class NBTStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueSINGLE_STRINGTerminalRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		private final RuleCall cValueUnquotedStringParserRuleCall_0_2 = (RuleCall)cValueAlternatives_0.eContents().get(2);
		
		//NBTString:
		//	value=(STRING | SINGLE_STRING | UnquotedString);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(STRING | SINGLE_STRING | UnquotedString)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(STRING | SINGLE_STRING | UnquotedString)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }
		
		//SINGLE_STRING
		public RuleCall getValueSINGLE_STRINGTerminalRuleCall_0_1() { return cValueSINGLE_STRINGTerminalRuleCall_0_1; }
		
		//UnquotedString
		public RuleCall getValueUnquotedStringParserRuleCall_0_2() { return cValueUnquotedStringParserRuleCall_0_2; }
	}
	public class NBTJSONTextComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTJSONTextComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cJSON_TEXT_BEGIN_OBJTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueNBTJSONTextComponentObjectParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final RuleCall cJSON_TEXT_END_OBJTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cJSON_TEXT_BEGIN_ARRAYTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueNBTJSONTextComponentArrayParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cJSON_TEXT_END_ARRAYTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cJSON_TEXT_BEGIN_STRTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueNBTJSONTextComponentStringParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cJSON_TEXT_END_STRTerminalRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//NBTJSONTextComponent:
		//	JSON_TEXT_BEGIN_OBJ
		//	value=NBTJSONTextComponentObject
		//	JSON_TEXT_END_OBJ
		//	| JSON_TEXT_BEGIN_ARRAY
		//	value=NBTJSONTextComponentArray
		//	JSON_TEXT_END_ARRAY
		//	| JSON_TEXT_BEGIN_STR
		//	value=NBTJSONTextComponentString
		//	JSON_TEXT_END_STR;
		@Override public ParserRule getRule() { return rule; }
		
		//JSON_TEXT_BEGIN_OBJ value=NBTJSONTextComponentObject JSON_TEXT_END_OBJ | JSON_TEXT_BEGIN_ARRAY
		//value=NBTJSONTextComponentArray JSON_TEXT_END_ARRAY | JSON_TEXT_BEGIN_STR value=NBTJSONTextComponentString
		//JSON_TEXT_END_STR
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JSON_TEXT_BEGIN_OBJ value=NBTJSONTextComponentObject JSON_TEXT_END_OBJ
		public Group getGroup_0() { return cGroup_0; }
		
		//JSON_TEXT_BEGIN_OBJ
		public RuleCall getJSON_TEXT_BEGIN_OBJTerminalRuleCall_0_0() { return cJSON_TEXT_BEGIN_OBJTerminalRuleCall_0_0; }
		
		//value=NBTJSONTextComponentObject
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }
		
		//NBTJSONTextComponentObject
		public RuleCall getValueNBTJSONTextComponentObjectParserRuleCall_0_1_0() { return cValueNBTJSONTextComponentObjectParserRuleCall_0_1_0; }
		
		//JSON_TEXT_END_OBJ
		public RuleCall getJSON_TEXT_END_OBJTerminalRuleCall_0_2() { return cJSON_TEXT_END_OBJTerminalRuleCall_0_2; }
		
		//JSON_TEXT_BEGIN_ARRAY value=NBTJSONTextComponentArray JSON_TEXT_END_ARRAY
		public Group getGroup_1() { return cGroup_1; }
		
		//JSON_TEXT_BEGIN_ARRAY
		public RuleCall getJSON_TEXT_BEGIN_ARRAYTerminalRuleCall_1_0() { return cJSON_TEXT_BEGIN_ARRAYTerminalRuleCall_1_0; }
		
		//value=NBTJSONTextComponentArray
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//NBTJSONTextComponentArray
		public RuleCall getValueNBTJSONTextComponentArrayParserRuleCall_1_1_0() { return cValueNBTJSONTextComponentArrayParserRuleCall_1_1_0; }
		
		//JSON_TEXT_END_ARRAY
		public RuleCall getJSON_TEXT_END_ARRAYTerminalRuleCall_1_2() { return cJSON_TEXT_END_ARRAYTerminalRuleCall_1_2; }
		
		//JSON_TEXT_BEGIN_STR value=NBTJSONTextComponentString JSON_TEXT_END_STR
		public Group getGroup_2() { return cGroup_2; }
		
		//JSON_TEXT_BEGIN_STR
		public RuleCall getJSON_TEXT_BEGIN_STRTerminalRuleCall_2_0() { return cJSON_TEXT_BEGIN_STRTerminalRuleCall_2_0; }
		
		//value=NBTJSONTextComponentString
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }
		
		//NBTJSONTextComponentString
		public RuleCall getValueNBTJSONTextComponentStringParserRuleCall_2_1_0() { return cValueNBTJSONTextComponentStringParserRuleCall_2_1_0; }
		
		//JSON_TEXT_END_STR
		public RuleCall getJSON_TEXT_END_STRTerminalRuleCall_2_2() { return cJSON_TEXT_END_STRTerminalRuleCall_2_2; }
	}
	public class NBTJSONTextComponentObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTJSONTextComponentObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJSONObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEntriesJSONEntryParserRuleCall_1_0_0 = (RuleCall)cEntriesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesJSONEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//NBTJSONTextComponentObject JSONTextComponent:
		//	{JSONObject} (entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JSONObject} (entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?
		public Group getGroup() { return cGroup; }
		
		//{JSONObject}
		public Action getJSONObjectAction_0() { return cJSONObjectAction_0; }
		
		//(entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//entries+=JSONEntry
		public Assignment getEntriesAssignment_1_0() { return cEntriesAssignment_1_0; }
		
		//JSONEntry
		public RuleCall getEntriesJSONEntryParserRuleCall_1_0_0() { return cEntriesJSONEntryParserRuleCall_1_0_0; }
		
		//(',' entries+=JSONEntry)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//entries+=JSONEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }
		
		//JSONEntry
		public RuleCall getEntriesJSONEntryParserRuleCall_1_1_1_0() { return cEntriesJSONEntryParserRuleCall_1_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
	}
	public class NBTJSONTextComponentStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTJSONTextComponentString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJSONStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//NBTJSONTextComponentString JSONTextComponent:
		//	{JSONString} value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{JSONString} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{JSONString}
		public Action getJSONStringAction_0() { return cJSONStringAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class NBTJSONTextComponentArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBTJSONTextComponentArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJSONArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cEntriesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cEntriesJSONValueParserRuleCall_1_0_0 = (RuleCall)cEntriesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesJSONValueParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//NBTJSONTextComponentArray JSONTextComponent:
		//	{JSONArray} (entries+=JSONValue (',' entries+=JSONValue)* ','?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{JSONArray} (entries+=JSONValue (',' entries+=JSONValue)* ','?)?
		public Group getGroup() { return cGroup; }
		
		//{JSONArray}
		public Action getJSONArrayAction_0() { return cJSONArrayAction_0; }
		
		//(entries+=JSONValue (',' entries+=JSONValue)* ','?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//entries+=JSONValue
		public Assignment getEntriesAssignment_1_0() { return cEntriesAssignment_1_0; }
		
		//JSONValue
		public RuleCall getEntriesJSONValueParserRuleCall_1_0_0() { return cEntriesJSONValueParserRuleCall_1_0_0; }
		
		//(',' entries+=JSONValue)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//entries+=JSONValue
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }
		
		//JSONValue
		public RuleCall getEntriesJSONValueParserRuleCall_1_1_1_0() { return cEntriesJSONValueParserRuleCall_1_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
	}
	public class JSONTextComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONTextComponent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJSONObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJSONArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJSONStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//JSONTextComponent:
		//	JSONObject | JSONArray | JSONString;
		@Override public ParserRule getRule() { return rule; }
		
		//JSONObject | JSONArray | JSONString
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JSONObject
		public RuleCall getJSONObjectParserRuleCall_0() { return cJSONObjectParserRuleCall_0; }
		
		//JSONArray
		public RuleCall getJSONArrayParserRuleCall_1() { return cJSONArrayParserRuleCall_1; }
		
		//JSONString
		public RuleCall getJSONStringParserRuleCall_2() { return cJSONStringParserRuleCall_2; }
	}
	public class JSONValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJSONObjectParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJSONArrayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJSONStringParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cJSONNumberParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cJSONBoolParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSelectorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//JSONValue:
		//	JSONObject
		//	| JSONArray
		//	| JSONString
		//	| JSONNumber
		//	| JSONBool
		//	| Selector;
		@Override public ParserRule getRule() { return rule; }
		
		//JSONObject | JSONArray | JSONString | JSONNumber | JSONBool | Selector
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JSONObject
		public RuleCall getJSONObjectParserRuleCall_0() { return cJSONObjectParserRuleCall_0; }
		
		//JSONArray
		public RuleCall getJSONArrayParserRuleCall_1() { return cJSONArrayParserRuleCall_1; }
		
		//JSONString
		public RuleCall getJSONStringParserRuleCall_2() { return cJSONStringParserRuleCall_2; }
		
		//JSONNumber
		public RuleCall getJSONNumberParserRuleCall_3() { return cJSONNumberParserRuleCall_3; }
		
		//JSONBool
		public RuleCall getJSONBoolParserRuleCall_4() { return cJSONBoolParserRuleCall_4; }
		
		//Selector
		public RuleCall getSelectorParserRuleCall_5() { return cSelectorParserRuleCall_5; }
	}
	public class JSONBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONBool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cJSONBoolAction_1_1 = (Action)cGroup_1.eContents().get(1);
		
		//JSONBool:
		//	value?="true" | "false" {JSONBool};
		@Override public ParserRule getRule() { return rule; }
		
		//value?="true" | "false" {JSONBool}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value?="true"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//"false" {JSONBool}
		public Group getGroup_1() { return cGroup_1; }
		
		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//{JSONBool}
		public Action getJSONBoolAction_1_1() { return cJSONBoolAction_1_1; }
	}
	public class JSONNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONNumber");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJSONDoubleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJSONLongParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JSONNumber:
		//	JSONDouble
		//	| JSONLong;
		@Override public ParserRule getRule() { return rule; }
		
		//JSONDouble | JSONLong
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//JSONDouble
		public RuleCall getJSONDoubleParserRuleCall_0() { return cJSONDoubleParserRuleCall_0; }
		
		//JSONLong
		public RuleCall getJSONLongParserRuleCall_1() { return cJSONLongParserRuleCall_1; }
	}
	public class JSONDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONDouble");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//JSONDouble:
		//	value=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	public class JSONLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONLong");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTAsLongParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//JSONLong:
		//	value=INTAsLong;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INTAsLong
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INTAsLong
		public RuleCall getValueINTAsLongParserRuleCall_0() { return cValueINTAsLongParserRuleCall_0; }
	}
	public class INTAsLongElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.INTAsLong");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTAsLong ecore::ELong:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class JSONObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cJSONObjectAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesJSONEntryParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesJSONEntryParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JSONObject:
		//	'{' {JSONObject} (entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' {JSONObject} (entries+=JSONEntry (',' entries+=JSONEntry)* ','?)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{JSONObject}
		public Action getJSONObjectAction_1() { return cJSONObjectAction_1; }
		
		//(entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=JSONEntry
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//JSONEntry
		public RuleCall getEntriesJSONEntryParserRuleCall_2_0_0() { return cEntriesJSONEntryParserRuleCall_2_0_0; }
		
		//(',' entries+=JSONEntry)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entries+=JSONEntry
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//JSONEntry
		public RuleCall getEntriesJSONEntryParserRuleCall_2_1_1_0() { return cEntriesJSONEntryParserRuleCall_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class JSONEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueJSONValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//JSONEntry:
		//	key=STRING ':' value=JSONValue;
		@Override public ParserRule getRule() { return rule; }
		
		//key=STRING ':' value=JSONValue
		public Group getGroup() { return cGroup; }
		
		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }
		
		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=JSONValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//JSONValue
		public RuleCall getValueJSONValueParserRuleCall_2_0() { return cValueJSONValueParserRuleCall_2_0; }
	}
	public class JSONArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cJSONArrayAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cEntriesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEntriesJSONValueParserRuleCall_2_0_0 = (RuleCall)cEntriesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cEntriesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cEntriesJSONValueParserRuleCall_2_1_1_0 = (RuleCall)cEntriesAssignment_2_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JSONArray:
		//	'[' {JSONArray} (entries+=JSONValue (',' entries+=JSONValue)* ','?)?
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' {JSONArray} (entries+=JSONValue (',' entries+=JSONValue)* ','?)? ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{JSONArray}
		public Action getJSONArrayAction_1() { return cJSONArrayAction_1; }
		
		//(entries+=JSONValue (',' entries+=JSONValue)* ','?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//entries+=JSONValue
		public Assignment getEntriesAssignment_2_0() { return cEntriesAssignment_2_0; }
		
		//JSONValue
		public RuleCall getEntriesJSONValueParserRuleCall_2_0_0() { return cEntriesJSONValueParserRuleCall_2_0_0; }
		
		//(',' entries+=JSONValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//entries+=JSONValue
		public Assignment getEntriesAssignment_2_1_1() { return cEntriesAssignment_2_1_1; }
		
		//JSONValue
		public RuleCall getEntriesJSONValueParserRuleCall_2_1_1_0() { return cEntriesJSONValueParserRuleCall_2_1_1_0; }
		
		//','?
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class JSONStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSONString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//JSONString:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.Selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSelectorTypeEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsSelectorArgumentsParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////JSONTextComponent:
		////	JSONArrayTextComponent
		////	| JSONStringTextComponent
		////	| JSONObjectTextComponent
		////;
		////
		////JSONStringTextComponent:
		////	text=STRING
		////;
		////
		////JSONArrayTextComponent:
		////	'[' {JSONArrayTextComponent}
		////		(values+=JSONTextComponent (',' values+=JSONTextComponent)* ','?)?
		////	']'
		////;
		////
		////JSONObjectTextComponent:
		////	'{' {JSONObjectTextComponent}
		////	(
		////		("text" ':' text=(STRING | SINGLE_STRING)
		////			| "translate" ':' translate=UnquotedString (',' "with" ':' ^with=JSONArrayTextComponent)?
		////			| "score" ':' score=JSONTextScore
		////			| "selector" selector?=':' (selectorString=STRING | selectorValue=Selector)
		////			| "keybind" ':' keybind=UnquotedString
		////			| "nbt" ':' nbt=STRING 
		////				((',' "interpret" ':' (interpret?="true" | "false"))?
		////				& (',' ("block" ':' block=STRING))
		////				)
		////		)
		////		& ()
		////	)
		////	'}'
		////;
		////JSONTextScore:
		////	'{' {JSONTextScore} (
		////		"name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector)
		////			(
		////				(',' "objective" ':' objective=(STRING|UnquotedString))
		////				& (',' "value" valuePresent?=':' value=INT)?
		////			)
		////		| "objective" ':' objective=(STRING|UnquotedString)
		////			(
		////				(',' "name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector))
		////				& (',' "value" valuePresent?=':' value=INT)?
		////			)
		////		| "value" valuePresent?=':' value=INT
		////			(
		////				(',' "name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector))
		////				& (',' "objective" ':' objective=(STRING|UnquotedString))
		////			)
		////	)
		////	'}'
		////;
		//Selector hidden():
		//	type=SelectorType ('[' arguments=SelectorArguments ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=SelectorType ('[' arguments=SelectorArguments ']')?
		public Group getGroup() { return cGroup; }
		
		//type=SelectorType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//SelectorType
		public RuleCall getTypeSelectorTypeEnumRuleCall_0_0() { return cTypeSelectorTypeEnumRuleCall_0_0; }
		
		//('[' arguments=SelectorArguments ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//arguments=SelectorArguments
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }
		
		//SelectorArguments
		public RuleCall getArgumentsSelectorArgumentsParserRuleCall_1_1_0() { return cArgumentsSelectorArgumentsParserRuleCall_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class SelectorArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SelectorArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFiltersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFiltersSelectorFilterParserRuleCall_0_0 = (RuleCall)cFiltersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFiltersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFiltersSelectorFilterParserRuleCall_1_1_0 = (RuleCall)cFiltersAssignment_1_1.eContents().get(0);
		
		//SelectorArguments hidden(WS, ML_COMMENT, SL_COMMENT):
		//	filters+=SelectorFilter (',' filters+=SelectorFilter)*;
		@Override public ParserRule getRule() { return rule; }
		
		//filters+=SelectorFilter (',' filters+=SelectorFilter)*
		public Group getGroup() { return cGroup; }
		
		//filters+=SelectorFilter
		public Assignment getFiltersAssignment_0() { return cFiltersAssignment_0; }
		
		//SelectorFilter
		public RuleCall getFiltersSelectorFilterParserRuleCall_0_0() { return cFiltersSelectorFilterParserRuleCall_0_0; }
		
		//(',' filters+=SelectorFilter)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//filters+=SelectorFilter
		public Assignment getFiltersAssignment_1_1() { return cFiltersAssignment_1_1; }
		
		//SelectorFilter
		public RuleCall getFiltersSelectorFilterParserRuleCall_1_1_0() { return cFiltersSelectorFilterParserRuleCall_1_1_0; }
	}
	public class SelectorFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SelectorFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInvertedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cInvertedExclamationMarkKeyword_2_0 = (Keyword)cInvertedAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueSelectorValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//SelectorFilter:
		//	name=ID '=' inverted?='!'? value=SelectorValue;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '=' inverted?='!'? value=SelectorValue
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//inverted?='!'?
		public Assignment getInvertedAssignment_2() { return cInvertedAssignment_2; }
		
		//'!'
		public Keyword getInvertedExclamationMarkKeyword_2_0() { return cInvertedExclamationMarkKeyword_2_0; }
		
		//value=SelectorValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//SelectorValue
		public RuleCall getValueSelectorValueParserRuleCall_3_0() { return cValueSelectorValueParserRuleCall_3_0; }
	}
	public class SelectorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SelectorValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNBTCompoundParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNamespacedKeyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntRangeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleRangeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIntSelectorValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDoubleSelectorValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cStringSelectorValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBoolSelectorValueParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//SelectorValue:
		//	NBTCompound
		//	| NamespacedKey
		//	| IntRange
		//	| DoubleRange
		//	| IntSelectorValue
		//	| DoubleSelectorValue
		//	| StringSelectorValue
		//	| BoolSelectorValue;
		@Override public ParserRule getRule() { return rule; }
		
		//NBTCompound | NamespacedKey | IntRange | DoubleRange | IntSelectorValue | DoubleSelectorValue | StringSelectorValue |
		//BoolSelectorValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NBTCompound
		public RuleCall getNBTCompoundParserRuleCall_0() { return cNBTCompoundParserRuleCall_0; }
		
		//NamespacedKey
		public RuleCall getNamespacedKeyParserRuleCall_1() { return cNamespacedKeyParserRuleCall_1; }
		
		//IntRange
		public RuleCall getIntRangeParserRuleCall_2() { return cIntRangeParserRuleCall_2; }
		
		//DoubleRange
		public RuleCall getDoubleRangeParserRuleCall_3() { return cDoubleRangeParserRuleCall_3; }
		
		//IntSelectorValue
		public RuleCall getIntSelectorValueParserRuleCall_4() { return cIntSelectorValueParserRuleCall_4; }
		
		//DoubleSelectorValue
		public RuleCall getDoubleSelectorValueParserRuleCall_5() { return cDoubleSelectorValueParserRuleCall_5; }
		
		//StringSelectorValue
		public RuleCall getStringSelectorValueParserRuleCall_6() { return cStringSelectorValueParserRuleCall_6; }
		
		//BoolSelectorValue
		public RuleCall getBoolSelectorValueParserRuleCall_7() { return cBoolSelectorValueParserRuleCall_7; }
	}
	public class IntRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.IntRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cClosedIntRangeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cBeginAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBeginINTTerminalRuleCall_0_1_0 = (RuleCall)cBeginAssignment_0_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEndAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEndINTTerminalRuleCall_0_3_0 = (RuleCall)cEndAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpenEndedIntRangeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBeginAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBeginINTTerminalRuleCall_1_1_0 = (RuleCall)cBeginAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOpenBeginningIntRangeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEndAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cEndINTTerminalRuleCall_2_2_0 = (RuleCall)cEndAssignment_2_2.eContents().get(0);
		
		//IntRange:
		//	{ClosedIntRange} begin=INT '..' end=INT
		//	| {OpenEndedIntRange} begin=INT '..'
		//	| {OpenBeginningIntRange} '..' end=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//{ClosedIntRange} begin=INT '..' end=INT | {OpenEndedIntRange} begin=INT '..' | {OpenBeginningIntRange} '..' end=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ClosedIntRange} begin=INT '..' end=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//{ClosedIntRange}
		public Action getClosedIntRangeAction_0_0() { return cClosedIntRangeAction_0_0; }
		
		//begin=INT
		public Assignment getBeginAssignment_0_1() { return cBeginAssignment_0_1; }
		
		//INT
		public RuleCall getBeginINTTerminalRuleCall_0_1_0() { return cBeginINTTerminalRuleCall_0_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_0_2() { return cFullStopFullStopKeyword_0_2; }
		
		//end=INT
		public Assignment getEndAssignment_0_3() { return cEndAssignment_0_3; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_0_3_0() { return cEndINTTerminalRuleCall_0_3_0; }
		
		//{OpenEndedIntRange} begin=INT '..'
		public Group getGroup_1() { return cGroup_1; }
		
		//{OpenEndedIntRange}
		public Action getOpenEndedIntRangeAction_1_0() { return cOpenEndedIntRangeAction_1_0; }
		
		//begin=INT
		public Assignment getBeginAssignment_1_1() { return cBeginAssignment_1_1; }
		
		//INT
		public RuleCall getBeginINTTerminalRuleCall_1_1_0() { return cBeginINTTerminalRuleCall_1_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_2() { return cFullStopFullStopKeyword_1_2; }
		
		//{OpenBeginningIntRange} '..' end=INT
		public Group getGroup_2() { return cGroup_2; }
		
		//{OpenBeginningIntRange}
		public Action getOpenBeginningIntRangeAction_2_0() { return cOpenBeginningIntRangeAction_2_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }
		
		//end=INT
		public Assignment getEndAssignment_2_2() { return cEndAssignment_2_2; }
		
		//INT
		public RuleCall getEndINTTerminalRuleCall_2_2_0() { return cEndINTTerminalRuleCall_2_2_0; }
	}
	public class DoubleRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.DoubleRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cClosedDoubleRangeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Assignment cBeginAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cBeginINTasDoubleParserRuleCall_0_1_0_0_0 = (RuleCall)cBeginAssignment_0_1_0_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_0_1_0_1 = (Keyword)cGroup_0_1_0.eContents().get(1);
		private final Assignment cEndAssignment_0_1_0_2 = (Assignment)cGroup_0_1_0.eContents().get(2);
		private final RuleCall cEndDOUBLETerminalRuleCall_0_1_0_2_0 = (RuleCall)cEndAssignment_0_1_0_2.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Assignment cBeginAssignment_0_1_1_0 = (Assignment)cGroup_0_1_1.eContents().get(0);
		private final RuleCall cBeginDOUBLETerminalRuleCall_0_1_1_0_0 = (RuleCall)cBeginAssignment_0_1_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_0_1_1_1 = (Keyword)cGroup_0_1_1.eContents().get(1);
		private final Assignment cEndAssignment_0_1_1_2 = (Assignment)cGroup_0_1_1.eContents().get(2);
		private final RuleCall cEndDOUBLEorINTParserRuleCall_0_1_1_2_0 = (RuleCall)cEndAssignment_0_1_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOpenEndedDoubleRangeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBeginAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBeginDOUBLETerminalRuleCall_1_1_0 = (RuleCall)cBeginAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOpenBeginningDoubleRangeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEndAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cEndDOUBLETerminalRuleCall_2_2_0 = (RuleCall)cEndAssignment_2_2.eContents().get(0);
		
		//DoubleRange:
		//	{ClosedDoubleRange} (begin=INTasDouble '..' end=DOUBLE | begin=DOUBLE '..' end=DOUBLEorINT) | {OpenEndedDoubleRange}
		//	begin=DOUBLE '..'
		//	| {OpenBeginningDoubleRange} '..' end=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//{ClosedDoubleRange} (begin=INTasDouble '..' end=DOUBLE | begin=DOUBLE '..' end=DOUBLEorINT) | {OpenEndedDoubleRange}
		//begin=DOUBLE '..' | {OpenBeginningDoubleRange} '..' end=DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ClosedDoubleRange} (begin=INTasDouble '..' end=DOUBLE | begin=DOUBLE '..' end=DOUBLEorINT)
		public Group getGroup_0() { return cGroup_0; }
		
		//{ClosedDoubleRange}
		public Action getClosedDoubleRangeAction_0_0() { return cClosedDoubleRangeAction_0_0; }
		
		//(begin=INTasDouble '..' end=DOUBLE | begin=DOUBLE '..' end=DOUBLEorINT)
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//begin=INTasDouble '..' end=DOUBLE
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }
		
		//begin=INTasDouble
		public Assignment getBeginAssignment_0_1_0_0() { return cBeginAssignment_0_1_0_0; }
		
		//INTasDouble
		public RuleCall getBeginINTasDoubleParserRuleCall_0_1_0_0_0() { return cBeginINTasDoubleParserRuleCall_0_1_0_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_0_1_0_1() { return cFullStopFullStopKeyword_0_1_0_1; }
		
		//end=DOUBLE
		public Assignment getEndAssignment_0_1_0_2() { return cEndAssignment_0_1_0_2; }
		
		//DOUBLE
		public RuleCall getEndDOUBLETerminalRuleCall_0_1_0_2_0() { return cEndDOUBLETerminalRuleCall_0_1_0_2_0; }
		
		//begin=DOUBLE '..' end=DOUBLEorINT
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//begin=DOUBLE
		public Assignment getBeginAssignment_0_1_1_0() { return cBeginAssignment_0_1_1_0; }
		
		//DOUBLE
		public RuleCall getBeginDOUBLETerminalRuleCall_0_1_1_0_0() { return cBeginDOUBLETerminalRuleCall_0_1_1_0_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_0_1_1_1() { return cFullStopFullStopKeyword_0_1_1_1; }
		
		//end=DOUBLEorINT
		public Assignment getEndAssignment_0_1_1_2() { return cEndAssignment_0_1_1_2; }
		
		//DOUBLEorINT
		public RuleCall getEndDOUBLEorINTParserRuleCall_0_1_1_2_0() { return cEndDOUBLEorINTParserRuleCall_0_1_1_2_0; }
		
		//{OpenEndedDoubleRange} begin=DOUBLE '..'
		public Group getGroup_1() { return cGroup_1; }
		
		//{OpenEndedDoubleRange}
		public Action getOpenEndedDoubleRangeAction_1_0() { return cOpenEndedDoubleRangeAction_1_0; }
		
		//begin=DOUBLE
		public Assignment getBeginAssignment_1_1() { return cBeginAssignment_1_1; }
		
		//DOUBLE
		public RuleCall getBeginDOUBLETerminalRuleCall_1_1_0() { return cBeginDOUBLETerminalRuleCall_1_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_2() { return cFullStopFullStopKeyword_1_2; }
		
		//{OpenBeginningDoubleRange} '..' end=DOUBLE
		public Group getGroup_2() { return cGroup_2; }
		
		//{OpenBeginningDoubleRange}
		public Action getOpenBeginningDoubleRangeAction_2_0() { return cOpenBeginningDoubleRangeAction_2_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }
		
		//end=DOUBLE
		public Assignment getEndAssignment_2_2() { return cEndAssignment_2_2; }
		
		//DOUBLE
		public RuleCall getEndDOUBLETerminalRuleCall_2_2_0() { return cEndDOUBLETerminalRuleCall_2_2_0; }
	}
	public class IntSelectorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.IntSelectorValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTAsLongParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntSelectorValue:
		//	value=INTAsLong;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INTAsLong
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INTAsLong
		public RuleCall getValueINTAsLongParserRuleCall_0() { return cValueINTAsLongParserRuleCall_0; }
	}
	public class DoubleSelectorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.DoubleSelectorValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleSelectorValue:
		//	value=DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}
	public class DOUBLEorINTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.DOUBLEorINT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOUBLETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DOUBLEorINT ecore::EDouble:
		//	DOUBLE | INT;
		@Override public ParserRule getRule() { return rule; }
		
		//DOUBLE | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_0() { return cDOUBLETerminalRuleCall_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class INTasDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.INTasDouble");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTasDouble ecore::EDouble:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class BoolSelectorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.BoolSelectorValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Action cBoolSelectorValueAction_1_1 = (Action)cGroup_1.eContents().get(1);
		
		//BoolSelectorValue:
		//	value?="true" | "false" {BoolSelectorValue};
		@Override public ParserRule getRule() { return rule; }
		
		//value?="true" | "false" {BoolSelectorValue}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value?="true"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//"false" {BoolSelectorValue}
		public Group getGroup_1() { return cGroup_1; }
		
		//"false"
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//{BoolSelectorValue}
		public Action getBoolSelectorValueAction_1_1() { return cBoolSelectorValueAction_1_1; }
	}
	public class StringSelectorValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.StringSelectorValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueUnquotedStringParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		
		//StringSelectorValue:
		//	value=(STRING | UnquotedString);
		@Override public ParserRule getRule() { return rule; }
		
		//value=(STRING | UnquotedString)
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//(STRING | UnquotedString)
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0_0() { return cValueSTRINGTerminalRuleCall_0_0; }
		
		//UnquotedString
		public RuleCall getValueUnquotedStringParserRuleCall_0_1() { return cValueUnquotedStringParserRuleCall_0_1; }
	}
	public class NamespacedKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NamespacedKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNamespaceUnquotedStringParserRuleCall_0_0 = (RuleCall)cNamespaceAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyNamespacedKeyKeyParserRuleCall_2_0 = (RuleCall)cKeyAssignment_2.eContents().get(0);
		
		////SelectorFilter:
		////	PositionFilter
		////	| DistanceFilter
		////;
		////
		////PositionFilter:
		////	"x" '=' x=DoubleAssumed ',' "y" '=' y=DoubleAssumed ',' "z" '=' z=DoubleAssumed
		////;
		////
		////DistanceFilter:
		////	"distance" '=' (min=DoubleAssumed (range?='..' max=DoubleAssumed?)?)
		////;
		//NamespacedKey hidden():
		//	namespace=UnquotedString ':' key=NamespacedKeyKey // | key=NamespacedKeyKey2) 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//namespace=UnquotedString ':' key=NamespacedKeyKey
		public Group getGroup() { return cGroup; }
		
		//namespace=UnquotedString
		public Assignment getNamespaceAssignment_0() { return cNamespaceAssignment_0; }
		
		//UnquotedString
		public RuleCall getNamespaceUnquotedStringParserRuleCall_0_0() { return cNamespaceUnquotedStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//key=NamespacedKeyKey
		public Assignment getKeyAssignment_2() { return cKeyAssignment_2; }
		
		//NamespacedKeyKey
		public RuleCall getKeyNamespacedKeyKeyParserRuleCall_2_0() { return cKeyNamespacedKeyKeyParserRuleCall_2_0; }
	}
	public class NamespacedKeyKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NamespacedKeyKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnquotedStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnquotedStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NamespacedKeyKey hidden():
		//	UnquotedString ('/' UnquotedString)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnquotedString ('/' UnquotedString)*
		public Group getGroup() { return cGroup; }
		
		//UnquotedString
		public RuleCall getUnquotedStringParserRuleCall_0() { return cUnquotedStringParserRuleCall_0; }
		
		//('/' UnquotedString)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//UnquotedString
		public RuleCall getUnquotedStringParserRuleCall_1_1() { return cUnquotedStringParserRuleCall_1_1; }
	}
	public class NamespacedKeyKey2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NamespacedKeyKey2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnquotedStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cUnquotedStringParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//NamespacedKeyKey2 hidden():
		//	UnquotedString ('/' UnquotedString)+;
		@Override public ParserRule getRule() { return rule; }
		
		//UnquotedString ('/' UnquotedString)+
		public Group getGroup() { return cGroup; }
		
		//UnquotedString
		public RuleCall getUnquotedStringParserRuleCall_0() { return cUnquotedStringParserRuleCall_0; }
		
		//('/' UnquotedString)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0() { return cSolidusKeyword_1_0; }
		
		//UnquotedString
		public RuleCall getUnquotedStringParserRuleCall_1_1() { return cUnquotedStringParserRuleCall_1_1; }
	}
	public class UnquotedStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.UnquotedString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cFullStopKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final Keyword cPlusSignKeyword_0_3 = (Keyword)cAlternatives_0.eContents().get(3);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cPlusSignKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final RuleCall cINTTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		private final RuleCall cFLOATTerminalRuleCall_1_5 = (RuleCall)cAlternatives_1.eContents().get(5);
		private final RuleCall cDOUBLETerminalRuleCall_1_6 = (RuleCall)cAlternatives_1.eContents().get(6);
		private final RuleCall cLONGTerminalRuleCall_1_7 = (RuleCall)cAlternatives_1.eContents().get(7);
		private final RuleCall cSHORTTerminalRuleCall_1_8 = (RuleCall)cAlternatives_1.eContents().get(8);
		private final RuleCall cBYTETerminalRuleCall_1_9 = (RuleCall)cAlternatives_1.eContents().get(9);
		
		////
		////Username hidden():
		////	(INT | LONG | SHORT | BYTE) ID
		////	| ID
		////;
		//UnquotedString hidden():
		//	(ID | '-' | '.' | '+') (ID | '-' | '.' | '+' | INT | FLOAT | DOUBLE | LONG | SHORT | BYTE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID | '-' | '.' | '+') (ID | '-' | '.' | '+' | INT | FLOAT | DOUBLE | LONG | SHORT | BYTE)*
		public Group getGroup() { return cGroup; }
		
		//(ID | '-' | '.' | '+')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_0_2() { return cFullStopKeyword_0_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_3() { return cPlusSignKeyword_0_3; }
		
		//(ID | '-' | '.' | '+' | INT | FLOAT | DOUBLE | LONG | SHORT | BYTE)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_3() { return cPlusSignKeyword_1_3; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_4() { return cINTTerminalRuleCall_1_4; }
		
		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1_5() { return cFLOATTerminalRuleCall_1_5; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1_6() { return cDOUBLETerminalRuleCall_1_6; }
		
		//LONG
		public RuleCall getLONGTerminalRuleCall_1_7() { return cLONGTerminalRuleCall_1_7; }
		
		//SHORT
		public RuleCall getSHORTTerminalRuleCall_1_8() { return cSHORTTerminalRuleCall_1_8; }
		
		//BYTE
		public RuleCall getBYTETerminalRuleCall_1_9() { return cBYTETerminalRuleCall_1_9; }
	}
	
	public class SelectorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SelectorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNEAREST_PLAYEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNEAREST_PLAYERPKeyword_0_0 = (Keyword)cNEAREST_PLAYEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cALL_PLAYERSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cALL_PLAYERSAKeyword_1_0 = (Keyword)cALL_PLAYERSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSELFEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSELFSKeyword_2_0 = (Keyword)cSELFEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cENTITIESEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cENTITIESEKeyword_3_0 = (Keyword)cENTITIESEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRANDOM_PLAYEREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRANDOM_PLAYERRKeyword_4_0 = (Keyword)cRANDOM_PLAYEREnumLiteralDeclaration_4.eContents().get(0);
		
		//enum SelectorType:
		//	NEAREST_PLAYER="@p"
		//	| ALL_PLAYERS="@a"
		//	| SELF="@s"
		//	| ENTITIES="@e"
		//	| RANDOM_PLAYER="@r";
		public EnumRule getRule() { return rule; }
		
		//NEAREST_PLAYER="@p" | ALL_PLAYERS="@a" | SELF="@s" | ENTITIES="@e" | RANDOM_PLAYER="@r"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NEAREST_PLAYER="@p"
		public EnumLiteralDeclaration getNEAREST_PLAYEREnumLiteralDeclaration_0() { return cNEAREST_PLAYEREnumLiteralDeclaration_0; }
		
		//"@p"
		public Keyword getNEAREST_PLAYERPKeyword_0_0() { return cNEAREST_PLAYERPKeyword_0_0; }
		
		//ALL_PLAYERS="@a"
		public EnumLiteralDeclaration getALL_PLAYERSEnumLiteralDeclaration_1() { return cALL_PLAYERSEnumLiteralDeclaration_1; }
		
		//"@a"
		public Keyword getALL_PLAYERSAKeyword_1_0() { return cALL_PLAYERSAKeyword_1_0; }
		
		//SELF="@s"
		public EnumLiteralDeclaration getSELFEnumLiteralDeclaration_2() { return cSELFEnumLiteralDeclaration_2; }
		
		//"@s"
		public Keyword getSELFSKeyword_2_0() { return cSELFSKeyword_2_0; }
		
		//ENTITIES="@e"
		public EnumLiteralDeclaration getENTITIESEnumLiteralDeclaration_3() { return cENTITIESEnumLiteralDeclaration_3; }
		
		//"@e"
		public Keyword getENTITIESEKeyword_3_0() { return cENTITIESEKeyword_3_0; }
		
		//RANDOM_PLAYER="@r"
		public EnumLiteralDeclaration getRANDOM_PLAYEREnumLiteralDeclaration_4() { return cRANDOM_PLAYEREnumLiteralDeclaration_4; }
		
		//"@r"
		public Keyword getRANDOM_PLAYERRKeyword_4_0() { return cRANDOM_PLAYERRKeyword_4_0; }
	}
	
	private final EntityDataElements pEntityData;
	private final NBTValueElements pNBTValue;
	private final NBTCompoundElements pNBTCompound;
	private final NBTEntryElements pNBTEntry;
	private final NBTByteArrayElements pNBTByteArray;
	private final NBTLongArrayElements pNBTLongArray;
	private final NBTIntArrayElements pNBTIntArray;
	private final NBTArrayElements pNBTArray;
	private final NBTBoolElements pNBTBool;
	private final NBTNumberElements pNBTNumber;
	private final NBTFloatElements pNBTFloat;
	private final NBTDoubleElements pNBTDouble;
	private final NBTLongElements pNBTLong;
	private final NBTShortElements pNBTShort;
	private final NBTByteElements pNBTByte;
	private final NBTIntElements pNBTInt;
	private final NBTStringElements pNBTString;
	private final NBTJSONTextComponentElements pNBTJSONTextComponent;
	private final NBTJSONTextComponentObjectElements pNBTJSONTextComponentObject;
	private final NBTJSONTextComponentStringElements pNBTJSONTextComponentString;
	private final NBTJSONTextComponentArrayElements pNBTJSONTextComponentArray;
	private final JSONTextComponentElements pJSONTextComponent;
	private final JSONValueElements pJSONValue;
	private final JSONBoolElements pJSONBool;
	private final JSONNumberElements pJSONNumber;
	private final JSONDoubleElements pJSONDouble;
	private final JSONLongElements pJSONLong;
	private final INTAsLongElements pINTAsLong;
	private final JSONObjectElements pJSONObject;
	private final JSONEntryElements pJSONEntry;
	private final JSONArrayElements pJSONArray;
	private final JSONStringElements pJSONString;
	private final SelectorElements pSelector;
	private final SelectorArgumentsElements pSelectorArguments;
	private final SelectorFilterElements pSelectorFilter;
	private final SelectorValueElements pSelectorValue;
	private final IntRangeElements pIntRange;
	private final DoubleRangeElements pDoubleRange;
	private final IntSelectorValueElements pIntSelectorValue;
	private final DoubleSelectorValueElements pDoubleSelectorValue;
	private final DOUBLEorINTElements pDOUBLEorINT;
	private final INTasDoubleElements pINTasDouble;
	private final BoolSelectorValueElements pBoolSelectorValue;
	private final StringSelectorValueElements pStringSelectorValue;
	private final NamespacedKeyElements pNamespacedKey;
	private final NamespacedKeyKeyElements pNamespacedKeyKey;
	private final NamespacedKeyKey2Elements pNamespacedKeyKey2;
	private final SelectorTypeElements eSelectorType;
	private final UnquotedStringElements pUnquotedString;
	private final TerminalRule tNBT_BYTE_ARRAY_START;
	private final TerminalRule tNBT_INT_ARRAY_START;
	private final TerminalRule tNBT_LONG_ARRAY_START;
	private final TerminalRule tSIGN;
	private final TerminalRule tEXP;
	private final TerminalRule tFLOAT;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tHEX_DIGIT;
	private final TerminalRule tINTBASE;
	private final TerminalRule tSIGNEDINTBASE;
	private final TerminalRule tLONG;
	private final TerminalRule tSHORT;
	private final TerminalRule tINT;
	private final TerminalRule tBYTE;
	private final TerminalRule tID;
	private final TerminalRule tJSON_TEXT_BEGIN_OBJ;
	private final TerminalRule tJSON_TEXT_END_OBJ;
	private final TerminalRule tJSON_TEXT_BEGIN_ARRAY;
	private final TerminalRule tJSON_TEXT_END_ARRAY;
	private final TerminalRule tJSON_TEXT_BEGIN_STR;
	private final TerminalRule tJSON_TEXT_END_STR;
	private final TerminalRule tSTRING;
	private final TerminalRule tSINGLE_STRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public MCEntityGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pEntityData = new EntityDataElements();
		this.pNBTValue = new NBTValueElements();
		this.pNBTCompound = new NBTCompoundElements();
		this.pNBTEntry = new NBTEntryElements();
		this.pNBTByteArray = new NBTByteArrayElements();
		this.pNBTLongArray = new NBTLongArrayElements();
		this.pNBTIntArray = new NBTIntArrayElements();
		this.pNBTArray = new NBTArrayElements();
		this.pNBTBool = new NBTBoolElements();
		this.pNBTNumber = new NBTNumberElements();
		this.pNBTFloat = new NBTFloatElements();
		this.pNBTDouble = new NBTDoubleElements();
		this.pNBTLong = new NBTLongElements();
		this.pNBTShort = new NBTShortElements();
		this.pNBTByte = new NBTByteElements();
		this.pNBTInt = new NBTIntElements();
		this.pNBTString = new NBTStringElements();
		this.pNBTJSONTextComponent = new NBTJSONTextComponentElements();
		this.pNBTJSONTextComponentObject = new NBTJSONTextComponentObjectElements();
		this.pNBTJSONTextComponentString = new NBTJSONTextComponentStringElements();
		this.pNBTJSONTextComponentArray = new NBTJSONTextComponentArrayElements();
		this.pJSONTextComponent = new JSONTextComponentElements();
		this.pJSONValue = new JSONValueElements();
		this.pJSONBool = new JSONBoolElements();
		this.pJSONNumber = new JSONNumberElements();
		this.pJSONDouble = new JSONDoubleElements();
		this.pJSONLong = new JSONLongElements();
		this.pINTAsLong = new INTAsLongElements();
		this.pJSONObject = new JSONObjectElements();
		this.pJSONEntry = new JSONEntryElements();
		this.pJSONArray = new JSONArrayElements();
		this.pJSONString = new JSONStringElements();
		this.pSelector = new SelectorElements();
		this.pSelectorArguments = new SelectorArgumentsElements();
		this.pSelectorFilter = new SelectorFilterElements();
		this.pSelectorValue = new SelectorValueElements();
		this.pIntRange = new IntRangeElements();
		this.pDoubleRange = new DoubleRangeElements();
		this.pIntSelectorValue = new IntSelectorValueElements();
		this.pDoubleSelectorValue = new DoubleSelectorValueElements();
		this.pDOUBLEorINT = new DOUBLEorINTElements();
		this.pINTasDouble = new INTasDoubleElements();
		this.pBoolSelectorValue = new BoolSelectorValueElements();
		this.pStringSelectorValue = new StringSelectorValueElements();
		this.pNamespacedKey = new NamespacedKeyElements();
		this.pNamespacedKeyKey = new NamespacedKeyKeyElements();
		this.pNamespacedKeyKey2 = new NamespacedKeyKey2Elements();
		this.eSelectorType = new SelectorTypeElements();
		this.pUnquotedString = new UnquotedStringElements();
		this.tNBT_BYTE_ARRAY_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBT_BYTE_ARRAY_START");
		this.tNBT_INT_ARRAY_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBT_INT_ARRAY_START");
		this.tNBT_LONG_ARRAY_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.NBT_LONG_ARRAY_START");
		this.tSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SIGN");
		this.tEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.EXP");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.FLOAT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.DOUBLE");
		this.tHEX_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.HEX_DIGIT");
		this.tINTBASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.INTBASE");
		this.tSIGNEDINTBASE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SIGNEDINTBASE");
		this.tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.LONG");
		this.tSHORT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SHORT");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.INT");
		this.tBYTE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.BYTE");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.ID");
		this.tJSON_TEXT_BEGIN_OBJ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSON_TEXT_BEGIN_OBJ");
		this.tJSON_TEXT_END_OBJ = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSON_TEXT_END_OBJ");
		this.tJSON_TEXT_BEGIN_ARRAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSON_TEXT_BEGIN_ARRAY");
		this.tJSON_TEXT_END_ARRAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSON_TEXT_END_ARRAY");
		this.tJSON_TEXT_BEGIN_STR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSON_TEXT_BEGIN_STR");
		this.tJSON_TEXT_END_STR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.JSON_TEXT_END_STR");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.STRING");
		this.tSINGLE_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SINGLE_STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.raptor.mcentity.MCEntity.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.raptor.mcentity.MCEntity".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//EntityData:
	//	nbt=NBTCompound;
	public EntityDataElements getEntityDataAccess() {
		return pEntityData;
	}
	
	public ParserRule getEntityDataRule() {
		return getEntityDataAccess().getRule();
	}
	
	////DefaultEntityDatum returns EntityDatum:
	////	"Pos" {PosDatum} ':' pos=Vec3D |
	////	"Motion" {MotionDatum} ':' motion=Vec3D |
	////	"Rotation" {RotationDatum} ':' rotation=Vec2F |
	////	"FallDistance" {FallDistanceDatum} ':' fallDistance=FloatAssumed |
	////	"Fire" {FireDatum} ':' fire=ShortAssumed |
	////	"Air" {AirDatum} ':' air=ShortAssumed |
	////	"OnGround" {OnGroundDatum} ':' (onGround?="true" | "false") |
	////	"NoGravity" {NoGravityDatum} ':' (noGravity?="true" | "false") |
	////	"Invulnerable" {InvulnerableDatum} ':' (invulnerable?="true" | "false") |
	////	"PortalCooldown" {PortalCooldownDatum} ':' portalCooldown=INT |
	////	"UUIDMost" {UUIDMostDatum} ':' uuidMost=LongAssumed |
	////	"UUIDLeast" {UUIDLeastDatum} ':' uuidLeast=LongAssumed |
	////	"CustomName" {CustomNameDatum} ':' customName=JSONTextComponent |
	////;
	////
	////Vec3D:
	////	'[' x=DoubleAssumed ',' y=DoubleAssumed ',' z=DoubleAssumed ','? ']'
	////;
	////
	////Vec2F:
	////	'[' first=FloatAssumed ',' second=FloatAssumed ','? ']'
	////;
	//NBTValue:
	//	NBTJSONTextComponent
	//	| NBTCompound
	//	| NBTByteArray
	//	| NBTLongArray
	//	| NBTIntArray
	//	| NBTArray
	//	| NBTBool
	//	| NBTNumber
	//	| NamespacedKey
	//	| NBTString;
	public NBTValueElements getNBTValueAccess() {
		return pNBTValue;
	}
	
	public ParserRule getNBTValueRule() {
		return getNBTValueAccess().getRule();
	}
	
	////DoNotUse_NBTValue returns NBTValue:
	////	Vec3D
	////;
	//NBTCompound:
	//	'{' {NBTCompound} (entries+=NBTEntry (',' entries+=NBTEntry)* ','?)?
	//	'}';
	public NBTCompoundElements getNBTCompoundAccess() {
		return pNBTCompound;
	}
	
	public ParserRule getNBTCompoundRule() {
		return getNBTCompoundAccess().getRule();
	}
	
	//NBTEntry:
	//	key=(STRING | UnquotedString) ':' value=NBTValue;
	public NBTEntryElements getNBTEntryAccess() {
		return pNBTEntry;
	}
	
	public ParserRule getNBTEntryRule() {
		return getNBTEntryAccess().getRule();
	}
	
	//NBTByteArray:
	//	NBT_BYTE_ARRAY_START {NBTByteArray} (elements+=BYTE (',' elements+=BYTE)* ','?)?
	//	']';
	public NBTByteArrayElements getNBTByteArrayAccess() {
		return pNBTByteArray;
	}
	
	public ParserRule getNBTByteArrayRule() {
		return getNBTByteArrayAccess().getRule();
	}
	
	//NBTLongArray:
	//	NBT_LONG_ARRAY_START {NBTLongArray} (elements+=LONG (',' elements+=LONG)* ','?)?
	//	']';
	public NBTLongArrayElements getNBTLongArrayAccess() {
		return pNBTLongArray;
	}
	
	public ParserRule getNBTLongArrayRule() {
		return getNBTLongArrayAccess().getRule();
	}
	
	//NBTIntArray:
	//	NBT_INT_ARRAY_START {NBTIntArray} (elements+=INT (',' elements+=INT)* ','?)?
	//	']';
	public NBTIntArrayElements getNBTIntArrayAccess() {
		return pNBTIntArray;
	}
	
	public ParserRule getNBTIntArrayRule() {
		return getNBTIntArrayAccess().getRule();
	}
	
	////ByteAssumed returns ecore::EByte: BYTE | INT;
	////
	////ShortAssumed returns ecore::EShort: SHORT | INT;
	////
	////FloatAssumed returns ecore::EFloat: FLOAT | INT;
	////
	////DoubleAssumed returns ecore::EDouble: DOUBLE | INT;
	////
	////LongAssumed returns ecore::ELong: LONG | INT;
	//NBTArray:
	//	'[' {NBTArray} ((elements+=NBTCompound (',' elements+=NBTCompound)*
	//	| elements+=NBTByteArray (',' elements+=NBTByteArray)*
	//	| elements+=NBTLongArray (',' elements+=NBTLongArray)*
	//	| elements+=NBTIntArray (',' elements+=NBTIntArray)*
	//	| elements+=NBTArray (',' elements+=NBTArray)*
	//	| elements+=(NBTBool | NBTNumber) (',' elements+=(NBTBool | NBTNumber))*
	//	| elements+=NBTString (',' elements+=NBTString)*
	//	| elements+=NBTJSONTextComponent (',' elements+=NBTJSONTextComponent)*) ','?)?
	//	']';
	public NBTArrayElements getNBTArrayAccess() {
		return pNBTArray;
	}
	
	public ParserRule getNBTArrayRule() {
		return getNBTArrayAccess().getRule();
	}
	
	//NBTBool:
	//	value?="true" | "false" {NBTBool};
	public NBTBoolElements getNBTBoolAccess() {
		return pNBTBool;
	}
	
	public ParserRule getNBTBoolRule() {
		return getNBTBoolAccess().getRule();
	}
	
	//NBTNumber:
	//	NBTFloat
	//	| NBTDouble
	//	| NBTLong
	//	| NBTShort
	//	| NBTByte
	//	| NBTInt;
	public NBTNumberElements getNBTNumberAccess() {
		return pNBTNumber;
	}
	
	public ParserRule getNBTNumberRule() {
		return getNBTNumberAccess().getRule();
	}
	
	//NBTFloat:
	//	value=FLOAT;
	public NBTFloatElements getNBTFloatAccess() {
		return pNBTFloat;
	}
	
	public ParserRule getNBTFloatRule() {
		return getNBTFloatAccess().getRule();
	}
	
	//NBTDouble:
	//	value=DOUBLE;
	public NBTDoubleElements getNBTDoubleAccess() {
		return pNBTDouble;
	}
	
	public ParserRule getNBTDoubleRule() {
		return getNBTDoubleAccess().getRule();
	}
	
	//NBTLong:
	//	value=LONG;
	public NBTLongElements getNBTLongAccess() {
		return pNBTLong;
	}
	
	public ParserRule getNBTLongRule() {
		return getNBTLongAccess().getRule();
	}
	
	//NBTShort:
	//	value=SHORT;
	public NBTShortElements getNBTShortAccess() {
		return pNBTShort;
	}
	
	public ParserRule getNBTShortRule() {
		return getNBTShortAccess().getRule();
	}
	
	//NBTByte:
	//	value=BYTE;
	public NBTByteElements getNBTByteAccess() {
		return pNBTByte;
	}
	
	public ParserRule getNBTByteRule() {
		return getNBTByteAccess().getRule();
	}
	
	//NBTInt:
	//	value=INT;
	public NBTIntElements getNBTIntAccess() {
		return pNBTInt;
	}
	
	public ParserRule getNBTIntRule() {
		return getNBTIntAccess().getRule();
	}
	
	//NBTString:
	//	value=(STRING | SINGLE_STRING | UnquotedString);
	public NBTStringElements getNBTStringAccess() {
		return pNBTString;
	}
	
	public ParserRule getNBTStringRule() {
		return getNBTStringAccess().getRule();
	}
	
	//NBTJSONTextComponent:
	//	JSON_TEXT_BEGIN_OBJ
	//	value=NBTJSONTextComponentObject
	//	JSON_TEXT_END_OBJ
	//	| JSON_TEXT_BEGIN_ARRAY
	//	value=NBTJSONTextComponentArray
	//	JSON_TEXT_END_ARRAY
	//	| JSON_TEXT_BEGIN_STR
	//	value=NBTJSONTextComponentString
	//	JSON_TEXT_END_STR;
	public NBTJSONTextComponentElements getNBTJSONTextComponentAccess() {
		return pNBTJSONTextComponent;
	}
	
	public ParserRule getNBTJSONTextComponentRule() {
		return getNBTJSONTextComponentAccess().getRule();
	}
	
	//NBTJSONTextComponentObject JSONTextComponent:
	//	{JSONObject} (entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?;
	public NBTJSONTextComponentObjectElements getNBTJSONTextComponentObjectAccess() {
		return pNBTJSONTextComponentObject;
	}
	
	public ParserRule getNBTJSONTextComponentObjectRule() {
		return getNBTJSONTextComponentObjectAccess().getRule();
	}
	
	//NBTJSONTextComponentString JSONTextComponent:
	//	{JSONString} value=STRING;
	public NBTJSONTextComponentStringElements getNBTJSONTextComponentStringAccess() {
		return pNBTJSONTextComponentString;
	}
	
	public ParserRule getNBTJSONTextComponentStringRule() {
		return getNBTJSONTextComponentStringAccess().getRule();
	}
	
	//NBTJSONTextComponentArray JSONTextComponent:
	//	{JSONArray} (entries+=JSONValue (',' entries+=JSONValue)* ','?)?;
	public NBTJSONTextComponentArrayElements getNBTJSONTextComponentArrayAccess() {
		return pNBTJSONTextComponentArray;
	}
	
	public ParserRule getNBTJSONTextComponentArrayRule() {
		return getNBTJSONTextComponentArrayAccess().getRule();
	}
	
	//JSONTextComponent:
	//	JSONObject | JSONArray | JSONString;
	public JSONTextComponentElements getJSONTextComponentAccess() {
		return pJSONTextComponent;
	}
	
	public ParserRule getJSONTextComponentRule() {
		return getJSONTextComponentAccess().getRule();
	}
	
	//JSONValue:
	//	JSONObject
	//	| JSONArray
	//	| JSONString
	//	| JSONNumber
	//	| JSONBool
	//	| Selector;
	public JSONValueElements getJSONValueAccess() {
		return pJSONValue;
	}
	
	public ParserRule getJSONValueRule() {
		return getJSONValueAccess().getRule();
	}
	
	//JSONBool:
	//	value?="true" | "false" {JSONBool};
	public JSONBoolElements getJSONBoolAccess() {
		return pJSONBool;
	}
	
	public ParserRule getJSONBoolRule() {
		return getJSONBoolAccess().getRule();
	}
	
	//JSONNumber:
	//	JSONDouble
	//	| JSONLong;
	public JSONNumberElements getJSONNumberAccess() {
		return pJSONNumber;
	}
	
	public ParserRule getJSONNumberRule() {
		return getJSONNumberAccess().getRule();
	}
	
	//JSONDouble:
	//	value=DOUBLE;
	public JSONDoubleElements getJSONDoubleAccess() {
		return pJSONDouble;
	}
	
	public ParserRule getJSONDoubleRule() {
		return getJSONDoubleAccess().getRule();
	}
	
	//JSONLong:
	//	value=INTAsLong;
	public JSONLongElements getJSONLongAccess() {
		return pJSONLong;
	}
	
	public ParserRule getJSONLongRule() {
		return getJSONLongAccess().getRule();
	}
	
	//INTAsLong ecore::ELong:
	//	INT;
	public INTAsLongElements getINTAsLongAccess() {
		return pINTAsLong;
	}
	
	public ParserRule getINTAsLongRule() {
		return getINTAsLongAccess().getRule();
	}
	
	//JSONObject:
	//	'{' {JSONObject} (entries+=JSONEntry (',' entries+=JSONEntry)* ','?)?
	//	'}';
	public JSONObjectElements getJSONObjectAccess() {
		return pJSONObject;
	}
	
	public ParserRule getJSONObjectRule() {
		return getJSONObjectAccess().getRule();
	}
	
	//JSONEntry:
	//	key=STRING ':' value=JSONValue;
	public JSONEntryElements getJSONEntryAccess() {
		return pJSONEntry;
	}
	
	public ParserRule getJSONEntryRule() {
		return getJSONEntryAccess().getRule();
	}
	
	//JSONArray:
	//	'[' {JSONArray} (entries+=JSONValue (',' entries+=JSONValue)* ','?)?
	//	']';
	public JSONArrayElements getJSONArrayAccess() {
		return pJSONArray;
	}
	
	public ParserRule getJSONArrayRule() {
		return getJSONArrayAccess().getRule();
	}
	
	//JSONString:
	//	value=STRING;
	public JSONStringElements getJSONStringAccess() {
		return pJSONString;
	}
	
	public ParserRule getJSONStringRule() {
		return getJSONStringAccess().getRule();
	}
	
	////JSONTextComponent:
	////	JSONArrayTextComponent
	////	| JSONStringTextComponent
	////	| JSONObjectTextComponent
	////;
	////
	////JSONStringTextComponent:
	////	text=STRING
	////;
	////
	////JSONArrayTextComponent:
	////	'[' {JSONArrayTextComponent}
	////		(values+=JSONTextComponent (',' values+=JSONTextComponent)* ','?)?
	////	']'
	////;
	////
	////JSONObjectTextComponent:
	////	'{' {JSONObjectTextComponent}
	////	(
	////		("text" ':' text=(STRING | SINGLE_STRING)
	////			| "translate" ':' translate=UnquotedString (',' "with" ':' ^with=JSONArrayTextComponent)?
	////			| "score" ':' score=JSONTextScore
	////			| "selector" selector?=':' (selectorString=STRING | selectorValue=Selector)
	////			| "keybind" ':' keybind=UnquotedString
	////			| "nbt" ':' nbt=STRING 
	////				((',' "interpret" ':' (interpret?="true" | "false"))?
	////				& (',' ("block" ':' block=STRING))
	////				)
	////		)
	////		& ()
	////	)
	////	'}'
	////;
	////JSONTextScore:
	////	'{' {JSONTextScore} (
	////		"name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector)
	////			(
	////				(',' "objective" ':' objective=(STRING|UnquotedString))
	////				& (',' "value" valuePresent?=':' value=INT)?
	////			)
	////		| "objective" ':' objective=(STRING|UnquotedString)
	////			(
	////				(',' "name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector))
	////				& (',' "value" valuePresent?=':' value=INT)?
	////			)
	////		| "value" valuePresent?=':' value=INT
	////			(
	////				(',' "name" ':' (name=(Username|STRING) | ownName?='*' | selector=Selector))
	////				& (',' "objective" ':' objective=(STRING|UnquotedString))
	////			)
	////	)
	////	'}'
	////;
	//Selector hidden():
	//	type=SelectorType ('[' arguments=SelectorArguments ']')?;
	public SelectorElements getSelectorAccess() {
		return pSelector;
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}
	
	//SelectorArguments hidden(WS, ML_COMMENT, SL_COMMENT):
	//	filters+=SelectorFilter (',' filters+=SelectorFilter)*;
	public SelectorArgumentsElements getSelectorArgumentsAccess() {
		return pSelectorArguments;
	}
	
	public ParserRule getSelectorArgumentsRule() {
		return getSelectorArgumentsAccess().getRule();
	}
	
	//SelectorFilter:
	//	name=ID '=' inverted?='!'? value=SelectorValue;
	public SelectorFilterElements getSelectorFilterAccess() {
		return pSelectorFilter;
	}
	
	public ParserRule getSelectorFilterRule() {
		return getSelectorFilterAccess().getRule();
	}
	
	//SelectorValue:
	//	NBTCompound
	//	| NamespacedKey
	//	| IntRange
	//	| DoubleRange
	//	| IntSelectorValue
	//	| DoubleSelectorValue
	//	| StringSelectorValue
	//	| BoolSelectorValue;
	public SelectorValueElements getSelectorValueAccess() {
		return pSelectorValue;
	}
	
	public ParserRule getSelectorValueRule() {
		return getSelectorValueAccess().getRule();
	}
	
	//IntRange:
	//	{ClosedIntRange} begin=INT '..' end=INT
	//	| {OpenEndedIntRange} begin=INT '..'
	//	| {OpenBeginningIntRange} '..' end=INT;
	public IntRangeElements getIntRangeAccess() {
		return pIntRange;
	}
	
	public ParserRule getIntRangeRule() {
		return getIntRangeAccess().getRule();
	}
	
	//DoubleRange:
	//	{ClosedDoubleRange} (begin=INTasDouble '..' end=DOUBLE | begin=DOUBLE '..' end=DOUBLEorINT) | {OpenEndedDoubleRange}
	//	begin=DOUBLE '..'
	//	| {OpenBeginningDoubleRange} '..' end=DOUBLE;
	public DoubleRangeElements getDoubleRangeAccess() {
		return pDoubleRange;
	}
	
	public ParserRule getDoubleRangeRule() {
		return getDoubleRangeAccess().getRule();
	}
	
	//IntSelectorValue:
	//	value=INTAsLong;
	public IntSelectorValueElements getIntSelectorValueAccess() {
		return pIntSelectorValue;
	}
	
	public ParserRule getIntSelectorValueRule() {
		return getIntSelectorValueAccess().getRule();
	}
	
	//DoubleSelectorValue:
	//	value=DOUBLE;
	public DoubleSelectorValueElements getDoubleSelectorValueAccess() {
		return pDoubleSelectorValue;
	}
	
	public ParserRule getDoubleSelectorValueRule() {
		return getDoubleSelectorValueAccess().getRule();
	}
	
	//DOUBLEorINT ecore::EDouble:
	//	DOUBLE | INT;
	public DOUBLEorINTElements getDOUBLEorINTAccess() {
		return pDOUBLEorINT;
	}
	
	public ParserRule getDOUBLEorINTRule() {
		return getDOUBLEorINTAccess().getRule();
	}
	
	//INTasDouble ecore::EDouble:
	//	INT;
	public INTasDoubleElements getINTasDoubleAccess() {
		return pINTasDouble;
	}
	
	public ParserRule getINTasDoubleRule() {
		return getINTasDoubleAccess().getRule();
	}
	
	//BoolSelectorValue:
	//	value?="true" | "false" {BoolSelectorValue};
	public BoolSelectorValueElements getBoolSelectorValueAccess() {
		return pBoolSelectorValue;
	}
	
	public ParserRule getBoolSelectorValueRule() {
		return getBoolSelectorValueAccess().getRule();
	}
	
	//StringSelectorValue:
	//	value=(STRING | UnquotedString);
	public StringSelectorValueElements getStringSelectorValueAccess() {
		return pStringSelectorValue;
	}
	
	public ParserRule getStringSelectorValueRule() {
		return getStringSelectorValueAccess().getRule();
	}
	
	////SelectorFilter:
	////	PositionFilter
	////	| DistanceFilter
	////;
	////
	////PositionFilter:
	////	"x" '=' x=DoubleAssumed ',' "y" '=' y=DoubleAssumed ',' "z" '=' z=DoubleAssumed
	////;
	////
	////DistanceFilter:
	////	"distance" '=' (min=DoubleAssumed (range?='..' max=DoubleAssumed?)?)
	////;
	//NamespacedKey hidden():
	//	namespace=UnquotedString ':' key=NamespacedKeyKey // | key=NamespacedKeyKey2) 
	//;
	public NamespacedKeyElements getNamespacedKeyAccess() {
		return pNamespacedKey;
	}
	
	public ParserRule getNamespacedKeyRule() {
		return getNamespacedKeyAccess().getRule();
	}
	
	//NamespacedKeyKey hidden():
	//	UnquotedString ('/' UnquotedString)*;
	public NamespacedKeyKeyElements getNamespacedKeyKeyAccess() {
		return pNamespacedKeyKey;
	}
	
	public ParserRule getNamespacedKeyKeyRule() {
		return getNamespacedKeyKeyAccess().getRule();
	}
	
	//NamespacedKeyKey2 hidden():
	//	UnquotedString ('/' UnquotedString)+;
	public NamespacedKeyKey2Elements getNamespacedKeyKey2Access() {
		return pNamespacedKeyKey2;
	}
	
	public ParserRule getNamespacedKeyKey2Rule() {
		return getNamespacedKeyKey2Access().getRule();
	}
	
	//enum SelectorType:
	//	NEAREST_PLAYER="@p"
	//	| ALL_PLAYERS="@a"
	//	| SELF="@s"
	//	| ENTITIES="@e"
	//	| RANDOM_PLAYER="@r";
	public SelectorTypeElements getSelectorTypeAccess() {
		return eSelectorType;
	}
	
	public EnumRule getSelectorTypeRule() {
		return getSelectorTypeAccess().getRule();
	}
	
	////
	////Username hidden():
	////	(INT | LONG | SHORT | BYTE) ID
	////	| ID
	////;
	//UnquotedString hidden():
	//	(ID | '-' | '.' | '+') (ID | '-' | '.' | '+' | INT | FLOAT | DOUBLE | LONG | SHORT | BYTE)*;
	public UnquotedStringElements getUnquotedStringAccess() {
		return pUnquotedString;
	}
	
	public ParserRule getUnquotedStringRule() {
		return getUnquotedStringAccess().getRule();
	}
	
	//terminal NBT_BYTE_ARRAY_START:
	//	'[B;';
	public TerminalRule getNBT_BYTE_ARRAY_STARTRule() {
		return tNBT_BYTE_ARRAY_START;
	}
	
	//terminal NBT_INT_ARRAY_START:
	//	'[I;';
	public TerminalRule getNBT_INT_ARRAY_STARTRule() {
		return tNBT_INT_ARRAY_START;
	}
	
	//terminal NBT_LONG_ARRAY_START:
	//	'[L;';
	public TerminalRule getNBT_LONG_ARRAY_STARTRule() {
		return tNBT_LONG_ARRAY_START;
	}
	
	//terminal fragment SIGN:
	//	'-' | '+'?;
	public TerminalRule getSIGNRule() {
		return tSIGN;
	}
	
	//terminal fragment EXP:
	//	('e' | 'E') SIGN '0'..'9'+;
	public TerminalRule getEXPRule() {
		return tEXP;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	SIGN ('0'..'9'+ ('.' '0'..'9'*)?
	//	| '.' '0'..'9'+) EXP? ('f' | 'F');
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	SIGN ('0'..'9'+ ('.' '0'..'9'* EXP? ('d' | 'D')?
	//	| EXP ('d' | 'D')?
	//	| ('d' | 'D')) | '.' '0'..'9'+ EXP? ('d' | 'D')?);
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//terminal fragment HEX_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getHEX_DIGITRule() {
		return tHEX_DIGIT;
	}
	
	//terminal fragment INTBASE:
	//	'0' ('x' | 'X') HEX_DIGIT HEX_DIGIT?
	//	|
	//	'0' ('b' | 'B') (('0' | '1') (('0' | '1') (('0' | '1') (('0' | '1') (('0' | '1') (('0' | '1') (('0' | '1') ('0' |
	//	'1')?)?)?)?)?)?)?)?
	//	|
	//	'0'
	//	|
	//	'1' ('0'..'9' '0'..'9'?)?
	//	|
	//	'2' ('5' '0'..'5'?
	//	| '0'..'4' '0'..'9'?
	//	| '6'..'9'?) | '3'..'9' '0'..'9'?;
	public TerminalRule getINTBASERule() {
		return tINTBASE;
	}
	
	//terminal fragment SIGNEDINTBASE:
	//	'0' ('x' | 'X') HEX_DIGIT+
	//	|
	//	'0' ('b' | 'B') ('0' | '1')+
	//	| SIGN ('0' | '1'..'9' '0'..'9'*);
	public TerminalRule getSIGNEDINTBASERule() {
		return tSIGNEDINTBASE;
	}
	
	//terminal LONG returns ecore::ELong:
	//	SIGNEDINTBASE ('l' | 'L');
	public TerminalRule getLONGRule() {
		return tLONG;
	}
	
	//terminal SHORT returns ecore::EShort:
	//	SIGNEDINTBASE ('s' | 'S');
	public TerminalRule getSHORTRule() {
		return tSHORT;
	}
	
	//terminal INT returns ecore::EInt:
	//	SIGNEDINTBASE
	//	| "rgb" WS? '(' WS? INTBASE WS? ',' WS? INTBASE WS? ',' WS? INTBASE WS? ')';
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal BYTE returns ecore::EByte:
	//	SIGN ('0' | '1'..'9' '0'..'9'*) ('b' | 'B');
	public TerminalRule getBYTERule() {
		return tBYTE;
	}
	
	//terminal ID:
	//	'a'..'z' | 'A'..'Z' | '_' | '0'..'9'+;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal JSON_TEXT_BEGIN_OBJ:
	//	"'{";
	public TerminalRule getJSON_TEXT_BEGIN_OBJRule() {
		return tJSON_TEXT_BEGIN_OBJ;
	}
	
	//terminal JSON_TEXT_END_OBJ:
	//	"}'";
	public TerminalRule getJSON_TEXT_END_OBJRule() {
		return tJSON_TEXT_END_OBJ;
	}
	
	//terminal JSON_TEXT_BEGIN_ARRAY:
	//	"'[";
	public TerminalRule getJSON_TEXT_BEGIN_ARRAYRule() {
		return tJSON_TEXT_BEGIN_ARRAY;
	}
	
	//terminal JSON_TEXT_END_ARRAY:
	//	"]'";
	public TerminalRule getJSON_TEXT_END_ARRAYRule() {
		return tJSON_TEXT_END_ARRAY;
	}
	
	//terminal JSON_TEXT_BEGIN_STR:
	//	"'\"";
	public TerminalRule getJSON_TEXT_BEGIN_STRRule() {
		return tJSON_TEXT_BEGIN_STR;
	}
	
	//terminal JSON_TEXT_END_STR:
	//	"\"'";
	public TerminalRule getJSON_TEXT_END_STRRule() {
		return tJSON_TEXT_END_STR;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal SINGLE_STRING:
	//	"'" ("'" | ('\\' . | !('\\' | "'" | '{' | '"' | '[')) ('\\' . | !('\\' | "'"))* "'");
	public TerminalRule getSINGLE_STRINGRule() {
		return tSINGLE_STRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
