/*
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.validation

import com.raptor.mcmodel.mcmodel.*
import java.util.HashMap
import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor
import org.eclipse.xtend.lib.annotations.ToString
import org.eclipse.xtext.validation.Check

import static com.raptor.mcmodel.mcmodel.McmodelPackage.Literals.*
import static extension com.raptor.mcmodel.util.McmodelUtils.*
import static java.lang.Math.*
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EStructuralFeature
import java.util.EnumMap

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class McmodelValidator extends AbstractMcmodelValidator {
	
	@Check
	def checkNoDuplicates(MCJsonObject it) {
		val seenEntries = <MCJsonEntry>newSeenMap()
		for (entry : entries) {
			val info = seenEntries.get(entry.name)
			if (info === null) {
				seenEntries.put(entry.name, seen(entry))
			} else {
				if (!info.errored) {
					info.errored = true
					error("Duplicate entry",
						info.value,
						MC_JSON_ENTRY__NAME
					)
				}
				error("Duplicate entry",
					entry,
					MC_JSON_ENTRY__NAME
				)
			}
		}
	}
	
	@Check
	def checkNoDuplicates(Model it) {
		val seen = <Texture>newSeenMap(textures.size)
		for (texture : textures) {
			val info = seen.get(texture.name)
			if (info === null) {
				seen.put(texture.name, seen(texture))
			} else {
				if (!info.errored) {
					info.errored = true
					error("Duplicate texture",
						info.value,
						TEXTURE__NAME
					)
				}
				error("Duplicate texture",
					texture,
					TEXTURE__NAME
				)
			}
		}
	}
	
	@Check
	def checkModel(Model it) {
		if (parent !== null) {
			switch (parent) {
				case "minecraft:item/generated", case "item/generated": {
					var foundLayer0 = false
					for (texture : textures) {
						if (texture.name == "layer0") {
							foundLayer0 = true
						}
					}
					if (!foundLayer0) {
						warning('Missing "layer0" texture',
							MODEL__TEXTURES_DEFINED
						)
					}
				}
				case "minecraft:builtin/entity", case "builtin/entity": {
					if (elementsDefined) {
						warning('"elements" and "parent":"builtin/entity" are not compatible',
							MODEL__ELEMENTS_DEFINED
						)
					}
					switch filename: (eResource.fileNameNoExt) {
						case "chest", case "ender_chest", case "player_head", case "creeper_head",
						case "dragon_head", case "skeleton_skull", case "wither_skeleton_skull",
						case "shield", case filename.endsWith("_banner"), case "trident": {}
						default: error('"parent":"builtin/entity" only allowed for chests, ender chests, mob heads, shields, banners, and tridents',
							MODEL__PARENT
						)
					}
				}
			}
		}
	}
	
	@Check
	def checkElement(Element it) {
		if (faces.isEmpty) {
			if (defaultFace === null) {
				error("No faces defined",
					ELEMENT__FACES
				)
			}
		} else {
			val seen = new EnumMap<EnumFace, SeenInfo<Pair<Faces,Integer>>>(EnumFace)
			for (face : faces) {
				val sides = face.sides
				for (var i = 0; i < sides.size; i++) {
					val enumFace = sides.get(i)
					val info = seen.get(enumFace)
					if (info === null) {
						seen.put(enumFace, seen(face -> i))
					} else {
						if (!info.errored) {
							info.errored = true
							error("Duplicate face definition",
								info.value.key,
								FACES__SIDES, info.value.value
							)
						}
						error("Duplicate face definition",
							face,
							FACES__SIDES, i
						)
					}
				}
			}
			if (seen.size == 6 && defaultFace !== null) {
				warning("Unused default face",
					ELEMENT__DEFAULT_FACE
				)
			}
		}
		checkPosition(from)
		checkPosition(to)
	}
	
	@Check
	def checkRotation(Rotation it) {
		if (abs(angle) > 45.0f || angle % 22.5f != 0.0f) {
			error("Value must be between -45 and 45 degrees in 22.5 degree increments",
				ROTATION__ANGLE
			)
		}
	}
	
	@Check
	def checkFace(Face it) {
		if (uv !== null) {
			for (feature : VEC4D$FEATURES) {
				val double value = uv.eGet(feature) as Double
				if (value < 0 || value > 16) {
					warning("Texture behavior inconsistent if UV is below 0 or above 16",
						uv,
						feature	
					)
				}	
			}
		}
		if (rotationDefined) {
			switch (rotation) {
				case 0L, case 90L, case 180, case 270L: {}
				default: error("Value must be either 0, 90, 180, or 270",
					FACE__ROTATION
				)
			}
		}
	}
	
	@Check
	def checkOverridePredicate(OverridePredicate it) {
		if (angleDefined) checkPercentage(OVERRIDE_PREDICATE__ANGLE)
		if (cooldownDefined) checkPercentage(OVERRIDE_PREDICATE__COOLDOWN)
		if (damageDefined) checkPercentage(OVERRIDE_PREDICATE__DAMAGE)
		if (pullDefined) checkPercentage(OVERRIDE_PREDICATE__PULL)
		if (timeDefined) checkPercentage(OVERRIDE_PREDICATE__TIME)
	}
	
	@Check
	def checkItemOverride(ItemOverride it) {
		if (predicate.isEmpty) {
			error("Empty predicate",
				ITEM_OVERRIDE__PREDICATE
			)
		}
	}
	
	@Check
	def checkMorph(Morph it) {
		if (translation !== null) {
			for (feature : VEC3D$FEATURES) {
				val double value = translation.eGet(feature) as Double
				if (abs(value) > 80) {
					warning("Value should be between -80 and 80",
						translation,
						feature
					)
				}
			}
		}
		if (scale !== null) {
			for (feature : VEC3D$FEATURES) {
				val double value = scale.eGet(feature) as Double
				if (abs(value) > 4) {
					warning("Value should be between -4 and 4",
						scale,
						feature
					)
				}
			}
		}
	}
	
	def checkPercentage(EObject object, EStructuralFeature feature) {
		val double value = object.eGet(feature) as Double
		if (value < 0 || value > 1) {
			error("Value must be between 0 and 1",
				object,
				feature
			)
		}
	}
	
	def checkPosition(Vec3d it) {
		for (feature : VEC3D$FEATURES) {
			val double value = it.eGet(feature) as Double
			if (value < -16 || value > 32) {
				error("Value must be between -16 and 32",
					it,
					feature
				)	
			}
		}
	}
	
	def private static <T> seen(T value) { new SeenInfo(value) }
	
	def private static <T> newSeenMap() { new HashMap<String,SeenInfo<T>> }
	def private static <T> newSeenMap(int capacity) { new HashMap<String,SeenInfo<T>>(capacity) }
	
}

@FinalFieldsConstructor
@ToString
class SeenInfo<T> {
	public final T value	
	public boolean errored = false
}
