/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.google.inject.Inject;
import com.raptor.mcmodel.mcmodel.Display;
import com.raptor.mcmodel.mcmodel.Element;
import com.raptor.mcmodel.mcmodel.EnumFace;
import com.raptor.mcmodel.mcmodel.EnumGuiLight;
import com.raptor.mcmodel.mcmodel.Face;
import com.raptor.mcmodel.mcmodel.Faces;
import com.raptor.mcmodel.mcmodel.ItemOverride;
import com.raptor.mcmodel.mcmodel.MCJsonArray;
import com.raptor.mcmodel.mcmodel.MCJsonBoolean;
import com.raptor.mcmodel.mcmodel.MCJsonEntry;
import com.raptor.mcmodel.mcmodel.MCJsonFloatingPoint;
import com.raptor.mcmodel.mcmodel.MCJsonIntegral;
import com.raptor.mcmodel.mcmodel.MCJsonNull;
import com.raptor.mcmodel.mcmodel.MCJsonObject;
import com.raptor.mcmodel.mcmodel.MCJsonString;
import com.raptor.mcmodel.mcmodel.MCJsonValue;
import com.raptor.mcmodel.mcmodel.Model;
import com.raptor.mcmodel.mcmodel.Morph;
import com.raptor.mcmodel.mcmodel.OverridePredicate;
import com.raptor.mcmodel.mcmodel.Rotation;
import com.raptor.mcmodel.mcmodel.Texture;
import com.raptor.mcmodel.mcmodel.Vec3d;
import com.raptor.mcmodel.mcmodel.Vec4d;
import com.raptor.mcmodel.util.McmodelUtils;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.conversion.impl.STRINGValueConverter;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Pair;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class McmodelGenerator extends AbstractGenerator {
  @Inject
  private STRINGValueConverter stringValueConverter;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _fileNameNoExt = McmodelUtils.getFileNameNoExt(resource);
    String _plus = (_fileNameNoExt + ".json");
    fsa.generateFile(_plus, this.compileModel(Iterators.<Model>filter(resource.getAllContents(), Model.class).next()));
  }
  
  public CharSequence compileModel(final Model it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      String _parent = it.getParent();
      boolean _tripleNotEquals = (_parent != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        _builder.append("\"parent\": ");
        String _asLiteral = this.asLiteral(it.getParent());
        _builder.append(_asLiteral, "\t");
        {
          if ((((((it.isDisplayDefined() || it.isAmbientocclusionDefined()) || it.isTexturesDefined()) || it.isGuiLightDefined()) || it.isElementsDefined()) || it.isOverridesDefined())) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isAmbientocclusionDefined = it.isAmbientocclusionDefined();
      if (_isAmbientocclusionDefined) {
        _builder.append("\t");
        _builder.append("\"ambientocclusion\": ");
        boolean _isAmbientocclusion = it.isAmbientocclusion();
        _builder.append(_isAmbientocclusion, "\t");
        {
          if (((((it.isDisplayDefined() || it.isTexturesDefined()) || it.isGuiLightDefined()) || it.isElementsDefined()) || it.isOverridesDefined())) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isGuiLightDefined = it.isGuiLightDefined();
      if (_isGuiLightDefined) {
        _builder.append("\t");
        _builder.append("\"gui_light\": ");
        EnumGuiLight _guiLight = it.getGuiLight();
        _builder.append(_guiLight, "\t");
        {
          if ((((it.isDisplayDefined() || it.isTexturesDefined()) || it.isElementsDefined()) || it.isOverridesDefined())) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isTexturesDefined = it.isTexturesDefined();
      if (_isTexturesDefined) {
        _builder.append("\t");
        _builder.append("\"textures\": {");
        _builder.newLine();
        {
          final Comparator<Texture> _function = (Texture $0, Texture $1) -> {
            return this.sortTextureNames($0.getName(), $1.getName());
          };
          List<Texture> _sortWith = IterableExtensions.<Texture>sortWith(it.getTextures(), _function);
          boolean _hasElements = false;
          for(final Texture texture : _sortWith) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(",", "\t\t");
            }
            _builder.append("\t");
            _builder.append("\t");
            String _asLiteral_1 = this.asLiteral(texture.getName());
            _builder.append(_asLiteral_1, "\t\t");
            _builder.append(": ");
            String _asLiteral_2 = this.asLiteral(texture.getValue());
            _builder.append(_asLiteral_2, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        {
          if (((it.isDisplayDefined() || it.isElementsDefined()) || it.isOverridesDefined())) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isElementsDefined = it.isElementsDefined();
      if (_isElementsDefined) {
        _builder.append("\t");
        _builder.append("\"elements\": [");
        _builder.newLine();
        {
          EList<Element> _elements = it.getElements();
          boolean _hasElements_1 = false;
          for(final Element element : _elements) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(",", "\t\t");
            }
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _compileElement = this.compileElement(element);
            _builder.append(_compileElement, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("]");
        {
          if ((it.isDisplayDefined() || it.isOverridesDefined())) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isDisplayDefined = it.isDisplayDefined();
      if (_isDisplayDefined) {
        _builder.append("\t");
        _builder.append("\"display\": {");
        _builder.newLine();
        {
          ArrayList<Pair<String, Morph>> _features = this.getFeatures(it.getDisplay());
          boolean _hasElements_2 = false;
          for(final Pair<String, Morph> feature : _features) {
            if (!_hasElements_2) {
              _hasElements_2 = true;
            } else {
              _builder.appendImmediate(",", "\t\t");
            }
            _builder.append("\t");
            _builder.append("\t");
            String _asLiteral_3 = this.asLiteral(feature.getKey());
            _builder.append(_asLiteral_3, "\t\t");
            _builder.append(": ");
            CharSequence _compileMorph = this.compileMorph(feature.getValue());
            _builder.append(_compileMorph, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        {
          boolean _isOverridesDefined = it.isOverridesDefined();
          if (_isOverridesDefined) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isOverridesDefined_1 = it.isOverridesDefined();
      if (_isOverridesDefined_1) {
        _builder.append("\t");
        _builder.append("\"overrides\": [");
        _builder.newLine();
        {
          EList<ItemOverride> _overrides = it.getOverrides();
          boolean _hasElements_3 = false;
          for(final ItemOverride override : _overrides) {
            if (!_hasElements_3) {
              _hasElements_3 = true;
            } else {
              _builder.appendImmediate(",", "\t\t");
            }
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _compileItemOverride = this.compileItemOverride(override);
            _builder.append(_compileItemOverride, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("]");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileElement(final Element it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"from\": ");
    CharSequence _compileVec3d = this.compileVec3d(it.getFrom());
    _builder.append(_compileVec3d, "\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("\"to\": ");
    CharSequence _compileVec3d_1 = this.compileVec3d(it.getTo());
    _builder.append(_compileVec3d_1, "\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    {
      Rotation _rotation = it.getRotation();
      boolean _tripleNotEquals = (_rotation != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        _builder.append("\"rotation\": {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("\"origin\": ");
        CharSequence _compileVec3d_2 = this.compileVec3d(it.getRotation().getOrigin());
        _builder.append(_compileVec3d_2, "\t\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("\"axis\": ");
        String _asLiteral = this.asLiteral(it.getRotation().getAxis().getLiteral());
        _builder.append(_asLiteral, "\t\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("\"angle\": ");
        double _angle = it.getRotation().getAngle();
        _builder.append(_angle, "\t\t");
        {
          boolean _isRescaleDefined = it.getRotation().isRescaleDefined();
          if (_isRescaleDefined) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          boolean _isRescaleDefined_1 = it.getRotation().isRescaleDefined();
          if (_isRescaleDefined_1) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("\"rescale\": ");
            boolean _isRescale = it.getRotation().isRescale();
            _builder.append(_isRescale, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("},");
        _builder.newLine();
      }
    }
    {
      boolean _isShadeDefined = it.isShadeDefined();
      if (_isShadeDefined) {
        _builder.append("\t");
        _builder.append("\"shade\": ");
        boolean _isShade = it.isShade();
        _builder.append(_isShade, "\t");
        _builder.append(",");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("\"faces\": {");
    _builder.newLine();
    {
      List<Map.Entry<EnumFace, Face>> _allFaces = this.getAllFaces(it);
      boolean _hasElements = false;
      for(final Map.Entry<EnumFace, Face> face : _allFaces) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t\t");
        }
        _builder.append("\t\t");
        String _asLiteral_1 = this.asLiteral(face.getKey().getLiteral());
        _builder.append(_asLiteral_1, "\t\t");
        _builder.append(": ");
        CharSequence _compileFace = this.compileFace(face.getValue());
        _builder.append(_compileFace, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileMorph(final Morph it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    {
      Vec3d _rotation = it.getRotation();
      boolean _tripleNotEquals = (_rotation != null);
      if (_tripleNotEquals) {
        _builder.append("\t");
        _builder.append("\"rotation\": ");
        CharSequence _compileVec3d = this.compileVec3d(it.getRotation());
        _builder.append(_compileVec3d, "\t");
        {
          if (((it.getTranslation() != null) || (it.getScale() != null))) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Vec3d _translation = it.getTranslation();
      boolean _tripleNotEquals_1 = (_translation != null);
      if (_tripleNotEquals_1) {
        _builder.append("\t");
        _builder.append("\"translation\": ");
        CharSequence _compileVec3d_1 = this.compileVec3d(it.getTranslation());
        _builder.append(_compileVec3d_1, "\t");
        {
          Vec3d _scale = it.getScale();
          boolean _tripleNotEquals_2 = (_scale != null);
          if (_tripleNotEquals_2) {
            _builder.append(",");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Vec3d _scale_1 = it.getScale();
      boolean _tripleNotEquals_3 = (_scale_1 != null);
      if (_tripleNotEquals_3) {
        _builder.append("\t");
        _builder.append("\"scale\": ");
        CharSequence _compileVec3d_2 = this.compileVec3d(it.getScale());
        _builder.append(_compileVec3d_2, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileItemOverride(final ItemOverride it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\"predicate\": ");
    String _trim = this.compileOverridePredicate(it.getPredicate()).trim();
    _builder.append(_trim, "\t");
    _builder.append(",");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("\"model\": ");
    String _asLiteral = this.asLiteral(it.getModel());
    _builder.append(_asLiteral, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String compileOverridePredicate(final OverridePredicate it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isSmall = McmodelUtils.isSmall(it);
      if (_isSmall) {
        _builder.append("{ ");
        {
          boolean _isAngleDefined = it.isAngleDefined();
          if (_isAngleDefined) {
            _builder.append("\"angle\": ");
            double _angle = it.getAngle();
            _builder.append(_angle);
          } else {
            boolean _isBlockingDefined = it.isBlockingDefined();
            if (_isBlockingDefined) {
              _builder.append("\"blocking\": ");
              String _xifexpression = null;
              boolean _isBlocking = it.isBlocking();
              if (_isBlocking) {
                _xifexpression = "1";
              } else {
                _xifexpression = "0";
              }
              _builder.append(_xifexpression);
            } else {
              boolean _isBrokenDefined = it.isBrokenDefined();
              if (_isBrokenDefined) {
                _builder.append("\"broken\": ");
                String _xifexpression_1 = null;
                boolean _isBroken = it.isBroken();
                if (_isBroken) {
                  _xifexpression_1 = "1";
                } else {
                  _xifexpression_1 = "0";
                }
                _builder.append(_xifexpression_1);
              } else {
                boolean _isCastDefined = it.isCastDefined();
                if (_isCastDefined) {
                  _builder.append("\"cast\": ");
                  String _xifexpression_2 = null;
                  boolean _isCast = it.isCast();
                  if (_isCast) {
                    _xifexpression_2 = "1";
                  } else {
                    _xifexpression_2 = "0";
                  }
                  _builder.append(_xifexpression_2);
                } else {
                  boolean _isCooldownDefined = it.isCooldownDefined();
                  if (_isCooldownDefined) {
                    _builder.append("\"cooldown\": ");
                    double _cooldown = it.getCooldown();
                    _builder.append(_cooldown);
                  } else {
                    boolean _isDamageDefined = it.isDamageDefined();
                    if (_isDamageDefined) {
                      _builder.append("\"damage\": ");
                      double _damage = it.getDamage();
                      _builder.append(_damage);
                    } else {
                      boolean _isDamagedDefined = it.isDamagedDefined();
                      if (_isDamagedDefined) {
                        _builder.append("\"damaged\": ");
                        String _xifexpression_3 = null;
                        boolean _isDamaged = it.isDamaged();
                        if (_isDamaged) {
                          _xifexpression_3 = "1";
                        } else {
                          _xifexpression_3 = "0";
                        }
                        _builder.append(_xifexpression_3);
                      } else {
                        boolean _isLefthandedDefined = it.isLefthandedDefined();
                        if (_isLefthandedDefined) {
                          _builder.append("\"lefthanded\": ");
                          String _xifexpression_4 = null;
                          boolean _isLefthanded = it.isLefthanded();
                          if (_isLefthanded) {
                            _xifexpression_4 = "1";
                          } else {
                            _xifexpression_4 = "0";
                          }
                          _builder.append(_xifexpression_4);
                        } else {
                          boolean _isPullDefined = it.isPullDefined();
                          if (_isPullDefined) {
                            _builder.append("\"pull\": ");
                            double _pull = it.getPull();
                            _builder.append(_pull);
                          } else {
                            boolean _isPullingDefined = it.isPullingDefined();
                            if (_isPullingDefined) {
                              _builder.append("\"pulling\": ");
                              String _xifexpression_5 = null;
                              boolean _isPulling = it.isPulling();
                              if (_isPulling) {
                                _xifexpression_5 = "1";
                              } else {
                                _xifexpression_5 = "0";
                              }
                              _builder.append(_xifexpression_5);
                            } else {
                              boolean _isThrowingDefined = it.isThrowingDefined();
                              if (_isThrowingDefined) {
                                _builder.append("\"throwing\": ");
                                String _xifexpression_6 = null;
                                boolean _isThrowing = it.isThrowing();
                                if (_isThrowing) {
                                  _xifexpression_6 = "1";
                                } else {
                                  _xifexpression_6 = "0";
                                }
                                _builder.append(_xifexpression_6);
                              } else {
                                boolean _isTimeDefined = it.isTimeDefined();
                                if (_isTimeDefined) {
                                  _builder.append("\"time\": ");
                                  double _time = it.getTime();
                                  _builder.append(_time);
                                } else {
                                  boolean _isCustomModelDataDefined = it.isCustomModelDataDefined();
                                  if (_isCustomModelDataDefined) {
                                    _builder.append("\"custom_model_data\": ");
                                    long _customModelData = it.getCustomModelData();
                                    _builder.append(_customModelData);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append(" }");
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("{");
        _builder.newLine();
        {
          boolean _isAngleDefined_1 = it.isAngleDefined();
          if (_isAngleDefined_1) {
            _builder.append("\t");
            _builder.append("\"angle\": ");
            double _angle_1 = it.getAngle();
            _builder.append(_angle_1, "\t");
            {
              if ((((((((((((it.isBlockingDefined() || it.isBrokenDefined()) || it.isCastDefined()) || it.isCooldownDefined()) || it.isDamageDefined()) || it.isDamagedDefined()) || it.isLefthandedDefined()) || it.isPullDefined()) || it.isPullingDefined()) || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isBlockingDefined_1 = it.isBlockingDefined();
          if (_isBlockingDefined_1) {
            _builder.append("\t");
            _builder.append("\"blocking\": ");
            String _xifexpression_7 = null;
            boolean _isBlocking_1 = it.isBlocking();
            if (_isBlocking_1) {
              _xifexpression_7 = "1";
            } else {
              _xifexpression_7 = "0";
            }
            _builder.append(_xifexpression_7, "\t");
            {
              if (((((((((((it.isBrokenDefined() || it.isCastDefined()) || it.isCooldownDefined()) || it.isDamageDefined()) || it.isDamagedDefined()) || it.isLefthandedDefined()) || it.isPullDefined()) || it.isPullingDefined()) || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isBrokenDefined_1 = it.isBrokenDefined();
          if (_isBrokenDefined_1) {
            _builder.append("\t");
            _builder.append("\"broken\": ");
            String _xifexpression_8 = null;
            boolean _isBroken_1 = it.isBroken();
            if (_isBroken_1) {
              _xifexpression_8 = "1";
            } else {
              _xifexpression_8 = "0";
            }
            _builder.append(_xifexpression_8, "\t");
            {
              if ((((((((((it.isCastDefined() || it.isCooldownDefined()) || it.isDamageDefined()) || it.isDamagedDefined()) || it.isLefthandedDefined()) || it.isPullDefined()) || it.isPullingDefined()) || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isCastDefined_1 = it.isCastDefined();
          if (_isCastDefined_1) {
            _builder.append("\t");
            _builder.append("\"cast\": ");
            String _xifexpression_9 = null;
            boolean _isCast_1 = it.isCast();
            if (_isCast_1) {
              _xifexpression_9 = "1";
            } else {
              _xifexpression_9 = "0";
            }
            _builder.append(_xifexpression_9, "\t");
            {
              if (((((((((it.isCooldownDefined() || it.isDamageDefined()) || it.isDamagedDefined()) || it.isLefthandedDefined()) || it.isPullDefined()) || it.isPullingDefined()) || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isCooldownDefined_1 = it.isCooldownDefined();
          if (_isCooldownDefined_1) {
            _builder.append("\t");
            _builder.append("\"cooldown\": ");
            double _cooldown_1 = it.getCooldown();
            _builder.append(_cooldown_1, "\t");
            {
              if ((((((((it.isDamageDefined() || it.isDamagedDefined()) || it.isLefthandedDefined()) || it.isPullDefined()) || it.isPullingDefined()) || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isDamageDefined_1 = it.isDamageDefined();
          if (_isDamageDefined_1) {
            _builder.append("\t");
            _builder.append("\"damage\": ");
            double _damage_1 = it.getDamage();
            _builder.append(_damage_1, "\t");
            {
              if (((((((it.isDamagedDefined() || it.isLefthandedDefined()) || it.isPullDefined()) || it.isPullingDefined()) || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isDamagedDefined_1 = it.isDamagedDefined();
          if (_isDamagedDefined_1) {
            _builder.append("\t");
            _builder.append("\"damaged\": ");
            String _xifexpression_10 = null;
            boolean _isDamaged_1 = it.isDamaged();
            if (_isDamaged_1) {
              _xifexpression_10 = "1";
            } else {
              _xifexpression_10 = "0";
            }
            _builder.append(_xifexpression_10, "\t");
            {
              if ((((((it.isLefthandedDefined() || it.isPullDefined()) || it.isPullingDefined()) || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isLefthandedDefined_1 = it.isLefthandedDefined();
          if (_isLefthandedDefined_1) {
            _builder.append("\t");
            _builder.append("\"lefthanded\": ");
            String _xifexpression_11 = null;
            boolean _isLefthanded_1 = it.isLefthanded();
            if (_isLefthanded_1) {
              _xifexpression_11 = "1";
            } else {
              _xifexpression_11 = "0";
            }
            _builder.append(_xifexpression_11, "\t");
            {
              if (((((it.isPullDefined() || it.isPullingDefined()) || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isPullDefined_1 = it.isPullDefined();
          if (_isPullDefined_1) {
            _builder.append("\t");
            _builder.append("\"pull\": ");
            double _pull_1 = it.getPull();
            _builder.append(_pull_1, "\t");
            {
              if ((((it.isPullingDefined() || it.isThrowingDefined()) || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isPullingDefined_1 = it.isPullingDefined();
          if (_isPullingDefined_1) {
            _builder.append("\t");
            _builder.append("\"pulling\": ");
            String _xifexpression_12 = null;
            boolean _isPulling_1 = it.isPulling();
            if (_isPulling_1) {
              _xifexpression_12 = "1";
            } else {
              _xifexpression_12 = "0";
            }
            _builder.append(_xifexpression_12, "\t");
            {
              if (((it.isThrowingDefined() || it.isTimeDefined()) || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isThrowingDefined_1 = it.isThrowingDefined();
          if (_isThrowingDefined_1) {
            _builder.append("\t");
            _builder.append("\"throwing\": ");
            String _xifexpression_13 = null;
            boolean _isThrowing_1 = it.isThrowing();
            if (_isThrowing_1) {
              _xifexpression_13 = "1";
            } else {
              _xifexpression_13 = "0";
            }
            _builder.append(_xifexpression_13, "\t");
            {
              if ((it.isTimeDefined() || it.isCustomModelDataDefined())) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isTimeDefined_1 = it.isTimeDefined();
          if (_isTimeDefined_1) {
            _builder.append("\t");
            _builder.append("\"time\": ");
            double _time_1 = it.getTime();
            _builder.append(_time_1, "\t");
            {
              boolean _isCustomModelDataDefined_1 = it.isCustomModelDataDefined();
              if (_isCustomModelDataDefined_1) {
                _builder.append(",");
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
        {
          boolean _isCustomModelDataDefined_2 = it.isCustomModelDataDefined();
          if (_isCustomModelDataDefined_2) {
            _builder.append("\t");
            _builder.append("\"custom_model_data\": ");
            long _customModelData_1 = it.getCustomModelData();
            _builder.append(_customModelData_1, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("}");
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public CharSequence compileFace(final Face it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("{ \"texture\": ");
    String _asLiteral = this.asLiteral(it.getTexture());
    _builder.append(_asLiteral);
    {
      Vec4d _uv = it.getUv();
      boolean _tripleNotEquals = (_uv != null);
      if (_tripleNotEquals) {
        _builder.append(", \"uv\": ");
        CharSequence _compileVec4d = this.compileVec4d(it.getUv());
        _builder.append(_compileVec4d);
      }
    }
    {
      boolean _isCullfaceDefined = it.isCullfaceDefined();
      if (_isCullfaceDefined) {
        _builder.append(", \"cullface\": ");
        String _asLiteral_1 = this.asLiteral(it.getCullface().getLiteral());
        _builder.append(_asLiteral_1);
      }
    }
    {
      boolean _isRotationDefined = it.isRotationDefined();
      if (_isRotationDefined) {
        _builder.append(", \"rotation\": ");
        long _rotation = it.getRotation();
        _builder.append(_rotation);
      }
    }
    {
      boolean _isTintindexDefined = it.isTintindexDefined();
      if (_isTintindexDefined) {
        _builder.append(", \"tintindex\": ");
        long _tintindex = it.getTintindex();
        _builder.append(_tintindex);
      }
    }
    _builder.append(" }");
    return _builder;
  }
  
  public CharSequence compileVec3d(final Vec3d it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    double _x = it.getX();
    _builder.append(_x);
    _builder.append(", ");
    double _y = it.getY();
    _builder.append(_y);
    _builder.append(", ");
    double _z = it.getZ();
    _builder.append(_z);
    _builder.append("]");
    return _builder;
  }
  
  public CharSequence compileVec4d(final Vec4d it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("[");
    double _x1 = it.getX1();
    _builder.append(_x1);
    _builder.append(", ");
    double _y1 = it.getY1();
    _builder.append(_y1);
    _builder.append(", ");
    double _x2 = it.getX2();
    _builder.append(_x2);
    _builder.append(", ");
    double _y2 = it.getY2();
    _builder.append(_y2);
    _builder.append("]");
    return _builder;
  }
  
  protected CharSequence _formatJson(final MCJsonString it) {
    StringConcatenation _builder = new StringConcatenation();
    String _asLiteral = this.asLiteral(it.getValue());
    _builder.append(_asLiteral);
    return _builder;
  }
  
  protected CharSequence _formatJson(final MCJsonBoolean it) {
    StringConcatenation _builder = new StringConcatenation();
    boolean _isValue = it.isValue();
    _builder.append(_isValue);
    return _builder;
  }
  
  protected CharSequence _formatJson(final MCJsonIntegral it) {
    StringConcatenation _builder = new StringConcatenation();
    long _value = it.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  protected CharSequence _formatJson(final MCJsonFloatingPoint it) {
    StringConcatenation _builder = new StringConcatenation();
    double _value = it.getValue();
    _builder.append(_value);
    return _builder;
  }
  
  protected CharSequence _formatJson(final MCJsonNull it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("null");
    return _builder;
  }
  
  protected CharSequence _formatJson(final MCJsonArray it) {
    CharSequence _xifexpression = null;
    boolean _isEmpty = it.getElements().isEmpty();
    if (_isEmpty) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("[]");
      _xifexpression = _builder;
    } else {
      CharSequence _xifexpression_1 = null;
      final Predicate<MCJsonValue> _function = (MCJsonValue it_1) -> {
        return this.isComplicated(it_1);
      };
      boolean _anyMatch = it.getElements().stream().anyMatch(_function);
      if (_anyMatch) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("[");
        _builder_1.newLine();
        {
          EList<MCJsonValue> _elements = it.getElements();
          boolean _hasElements = false;
          for(final MCJsonValue element : _elements) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder_1.appendImmediate(",", "\t");
            }
            _builder_1.append("\t");
            Object _formatJson = this.formatJson(element);
            _builder_1.append(_formatJson, "\t");
            _builder_1.newLineIfNotEmpty();
          }
        }
        _builder_1.append("]");
        _builder_1.newLine();
        _xifexpression_1 = _builder_1;
      } else {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("[");
        {
          EList<MCJsonValue> _elements_1 = it.getElements();
          boolean _hasElements_1 = false;
          for(final MCJsonValue element_1 : _elements_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder_2.appendImmediate(", ", "");
            }
            Object _formatJson_1 = this.formatJson(element_1);
            _builder_2.append(_formatJson_1);
          }
        }
        _builder_2.append("]");
        _xifexpression_1 = _builder_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  protected CharSequence _formatJson(final MCJsonObject it) {
    CharSequence _xifexpression = null;
    boolean _isEmpty = it.getEntries().isEmpty();
    if (_isEmpty) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("{}");
      _xifexpression = _builder;
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("{");
      _builder_1.newLine();
      {
        EList<MCJsonEntry> _entries = it.getEntries();
        boolean _hasElements = false;
        for(final MCJsonEntry entry : _entries) {
          if (!_hasElements) {
            _hasElements = true;
          } else {
            _builder_1.appendImmediate(",", "\t");
          }
          _builder_1.append("\t");
          String _asLiteral = this.asLiteral(entry.getName());
          _builder_1.append(_asLiteral, "\t");
          _builder_1.append(": ");
          Object _formatJson = this.formatJson(entry.getValue());
          _builder_1.append(_formatJson, "\t");
          _builder_1.newLineIfNotEmpty();
        }
      }
      _builder_1.append("}");
      _builder_1.newLine();
      _xifexpression = _builder_1;
    }
    return _xifexpression;
  }
  
  protected boolean _isComplicated(final MCJsonObject it) {
    int _size = it.getEntries().size();
    return (_size > 0);
  }
  
  protected boolean _isComplicated(final MCJsonArray it) {
    int _size = it.getElements().size();
    return (_size > 0);
  }
  
  protected boolean _isComplicated(final MCJsonValue it) {
    return false;
  }
  
  public String asLiteral(final String str) {
    return this.stringValueConverter.toString(str);
  }
  
  public int sortTextureNames(final String str1, final String str2) {
    int _xifexpression = (int) 0;
    boolean _equals = Objects.equal(str1, "particle");
    if (_equals) {
      _xifexpression = (-1);
    } else {
      int _xifexpression_1 = (int) 0;
      boolean _equals_1 = Objects.equal(str2, "particle");
      if (_equals_1) {
        _xifexpression_1 = 1;
      } else {
        int _xifexpression_2 = (int) 0;
        boolean _isLayerTextureName = McmodelGenerator.isLayerTextureName(str1);
        if (_isLayerTextureName) {
          int _xifexpression_3 = (int) 0;
          boolean _isLayerTextureName_1 = McmodelGenerator.isLayerTextureName(str2);
          if (_isLayerTextureName_1) {
            _xifexpression_3 = (str1.compareTo(str2));
          } else {
            _xifexpression_3 = (-1);
          }
          _xifexpression_2 = _xifexpression_3;
        } else {
          int _xifexpression_4 = (int) 0;
          boolean _isLayerTextureName_2 = McmodelGenerator.isLayerTextureName(str2);
          if (_isLayerTextureName_2) {
            _xifexpression_4 = 1;
          } else {
            _xifexpression_4 = (str1.compareTo(str2));
          }
          _xifexpression_2 = _xifexpression_4;
        }
        _xifexpression_1 = _xifexpression_2;
      }
      _xifexpression = _xifexpression_1;
    }
    return _xifexpression;
  }
  
  private static final Pattern LAYER_TEXTURE_REGEX = new Function0<Pattern>() {
    @Override
    public Pattern apply() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("layer[0-9]+");
      Pattern _compile = Pattern.compile(_builder.toString());
      return _compile;
    }
  }.apply();
  
  public static boolean isLayerTextureName(final String str) {
    return McmodelGenerator.LAYER_TEXTURE_REGEX.matcher(str).matches();
  }
  
  public ArrayList<Pair<String, Morph>> getFeatures(final Display it) {
    final ArrayList<Pair<String, Morph>> results = new ArrayList<Pair<String, Morph>>(8);
    for (final EStructuralFeature feature : McmodelUtils.DISPLAY$FEATURES) {
      {
        Object _eGet = it.eGet(feature);
        final Morph value = ((Morph) _eGet);
        if ((value != null)) {
          String _name = feature.getName();
          Pair<String, Morph> _mappedTo = Pair.<String, Morph>of(_name, value);
          results.add(_mappedTo);
        }
      }
    }
    return results;
  }
  
  public List<Map.Entry<EnumFace, Face>> getAllFaces(final Element it) {
    final EnumMap<EnumFace, Face> map = new EnumMap<EnumFace, Face>(EnumFace.class);
    Face _defaultFace = it.getDefaultFace();
    boolean _tripleNotEquals = (_defaultFace != null);
    if (_tripleNotEquals) {
      for (final EnumFace side : EnumFace.VALUES) {
        map.put(side, it.getDefaultFace());
      }
    }
    EList<Faces> _faces = it.getFaces();
    for (final Faces face : _faces) {
      EList<EnumFace> _sides = face.getSides();
      for (final EnumFace side_1 : _sides) {
        map.put(side_1, face.getFace());
      }
    }
    final Function1<Map.Entry<EnumFace, Face>, EnumFace> _function = (Map.Entry<EnumFace, Face> it_1) -> {
      return it_1.getKey();
    };
    return IterableExtensions.<Map.Entry<EnumFace, Face>, EnumFace>sortBy(map.entrySet(), _function);
  }
  
  public CharSequence formatJson(final MCJsonValue it) {
    if (it instanceof MCJsonFloatingPoint) {
      return _formatJson((MCJsonFloatingPoint)it);
    } else if (it instanceof MCJsonIntegral) {
      return _formatJson((MCJsonIntegral)it);
    } else if (it instanceof MCJsonArray) {
      return _formatJson((MCJsonArray)it);
    } else if (it instanceof MCJsonBoolean) {
      return _formatJson((MCJsonBoolean)it);
    } else if (it instanceof MCJsonNull) {
      return _formatJson((MCJsonNull)it);
    } else if (it instanceof MCJsonObject) {
      return _formatJson((MCJsonObject)it);
    } else if (it instanceof MCJsonString) {
      return _formatJson((MCJsonString)it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
  
  public boolean isComplicated(final MCJsonValue it) {
    if (it instanceof MCJsonArray) {
      return _isComplicated((MCJsonArray)it);
    } else if (it instanceof MCJsonObject) {
      return _isComplicated((MCJsonObject)it);
    } else if (it != null) {
      return _isComplicated(it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
}
