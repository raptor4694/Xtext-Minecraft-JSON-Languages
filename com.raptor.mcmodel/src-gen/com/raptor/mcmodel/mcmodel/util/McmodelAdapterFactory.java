/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.mcmodel.util;

import com.raptor.mcmodel.mcmodel.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.raptor.mcmodel.mcmodel.McmodelPackage
 * @generated
 */
public class McmodelAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static McmodelPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public McmodelAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = McmodelPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected McmodelSwitch<Adapter> modelSwitch =
    new McmodelSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseTexture(Texture object)
      {
        return createTextureAdapter();
      }
      @Override
      public Adapter caseElement(Element object)
      {
        return createElementAdapter();
      }
      @Override
      public Adapter caseRotation(Rotation object)
      {
        return createRotationAdapter();
      }
      @Override
      public Adapter caseFaces(Faces object)
      {
        return createFacesAdapter();
      }
      @Override
      public Adapter caseFace(Face object)
      {
        return createFaceAdapter();
      }
      @Override
      public Adapter caseDisplay(Display object)
      {
        return createDisplayAdapter();
      }
      @Override
      public Adapter caseMorph(Morph object)
      {
        return createMorphAdapter();
      }
      @Override
      public Adapter caseItemOverride(ItemOverride object)
      {
        return createItemOverrideAdapter();
      }
      @Override
      public Adapter caseOverridePredicate(OverridePredicate object)
      {
        return createOverridePredicateAdapter();
      }
      @Override
      public Adapter caseMCJsonValue(MCJsonValue object)
      {
        return createMCJsonValueAdapter();
      }
      @Override
      public Adapter caseMCJsonObject(MCJsonObject object)
      {
        return createMCJsonObjectAdapter();
      }
      @Override
      public Adapter caseMCJsonEntry(MCJsonEntry object)
      {
        return createMCJsonEntryAdapter();
      }
      @Override
      public Adapter caseMCJsonArray(MCJsonArray object)
      {
        return createMCJsonArrayAdapter();
      }
      @Override
      public Adapter caseMCJsonString(MCJsonString object)
      {
        return createMCJsonStringAdapter();
      }
      @Override
      public Adapter caseMCJsonNumber(MCJsonNumber object)
      {
        return createMCJsonNumberAdapter();
      }
      @Override
      public Adapter caseMCJsonIntegral(MCJsonIntegral object)
      {
        return createMCJsonIntegralAdapter();
      }
      @Override
      public Adapter caseMCJsonFloatingPoint(MCJsonFloatingPoint object)
      {
        return createMCJsonFloatingPointAdapter();
      }
      @Override
      public Adapter caseMCJsonBoolean(MCJsonBoolean object)
      {
        return createMCJsonBooleanAdapter();
      }
      @Override
      public Adapter caseMCJsonNull(MCJsonNull object)
      {
        return createMCJsonNullAdapter();
      }
      @Override
      public Adapter caseVec3d(Vec3d object)
      {
        return createVec3dAdapter();
      }
      @Override
      public Adapter caseVec4d(Vec4d object)
      {
        return createVec4dAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Texture <em>Texture</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Texture
   * @generated
   */
  public Adapter createTextureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Element <em>Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Element
   * @generated
   */
  public Adapter createElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Rotation <em>Rotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Rotation
   * @generated
   */
  public Adapter createRotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Faces <em>Faces</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Faces
   * @generated
   */
  public Adapter createFacesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Face <em>Face</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Face
   * @generated
   */
  public Adapter createFaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Display <em>Display</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Display
   * @generated
   */
  public Adapter createDisplayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Morph <em>Morph</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Morph
   * @generated
   */
  public Adapter createMorphAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.ItemOverride <em>Item Override</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.ItemOverride
   * @generated
   */
  public Adapter createItemOverrideAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.OverridePredicate <em>Override Predicate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.OverridePredicate
   * @generated
   */
  public Adapter createOverridePredicateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonValue <em>MC Json Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonValue
   * @generated
   */
  public Adapter createMCJsonValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonObject <em>MC Json Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonObject
   * @generated
   */
  public Adapter createMCJsonObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonEntry <em>MC Json Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonEntry
   * @generated
   */
  public Adapter createMCJsonEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonArray <em>MC Json Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonArray
   * @generated
   */
  public Adapter createMCJsonArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonString <em>MC Json String</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonString
   * @generated
   */
  public Adapter createMCJsonStringAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonNumber <em>MC Json Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonNumber
   * @generated
   */
  public Adapter createMCJsonNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonIntegral <em>MC Json Integral</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonIntegral
   * @generated
   */
  public Adapter createMCJsonIntegralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonFloatingPoint <em>MC Json Floating Point</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonFloatingPoint
   * @generated
   */
  public Adapter createMCJsonFloatingPointAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonBoolean <em>MC Json Boolean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonBoolean
   * @generated
   */
  public Adapter createMCJsonBooleanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.MCJsonNull <em>MC Json Null</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.MCJsonNull
   * @generated
   */
  public Adapter createMCJsonNullAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Vec3d <em>Vec3d</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Vec3d
   * @generated
   */
  public Adapter createVec3dAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.raptor.mcmodel.mcmodel.Vec4d <em>Vec4d</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.raptor.mcmodel.mcmodel.Vec4d
   * @generated
   */
  public Adapter createVec4dAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //McmodelAdapterFactory
