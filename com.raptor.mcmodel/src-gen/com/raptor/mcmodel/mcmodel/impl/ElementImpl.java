/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.mcmodel.impl;

import com.raptor.mcmodel.mcmodel.Element;
import com.raptor.mcmodel.mcmodel.Face;
import com.raptor.mcmodel.mcmodel.Faces;
import com.raptor.mcmodel.mcmodel.McmodelPackage;
import com.raptor.mcmodel.mcmodel.Rotation;
import com.raptor.mcmodel.mcmodel.Vec3d;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ElementImpl#getFrom <em>From</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ElementImpl#getTo <em>To</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ElementImpl#getRotation <em>Rotation</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ElementImpl#getFaces <em>Faces</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ElementImpl#getDefaultFace <em>Default Face</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ElementImpl#isShadeDefined <em>Shade Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ElementImpl#isShade <em>Shade</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ElementImpl extends MinimalEObjectImpl.Container implements Element
{
  /**
   * The cached value of the '{@link #getFrom() <em>From</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFrom()
   * @generated
   * @ordered
   */
  protected Vec3d from;

  /**
   * The cached value of the '{@link #getTo() <em>To</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTo()
   * @generated
   * @ordered
   */
  protected Vec3d to;

  /**
   * The cached value of the '{@link #getRotation() <em>Rotation</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRotation()
   * @generated
   * @ordered
   */
  protected Rotation rotation;

  /**
   * The cached value of the '{@link #getFaces() <em>Faces</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFaces()
   * @generated
   * @ordered
   */
  protected EList<Faces> faces;

  /**
   * The cached value of the '{@link #getDefaultFace() <em>Default Face</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDefaultFace()
   * @generated
   * @ordered
   */
  protected Face defaultFace;

  /**
   * The default value of the '{@link #isShadeDefined() <em>Shade Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isShadeDefined()
   * @generated
   * @ordered
   */
  protected static final boolean SHADE_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isShadeDefined() <em>Shade Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isShadeDefined()
   * @generated
   * @ordered
   */
  protected boolean shadeDefined = SHADE_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isShade() <em>Shade</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isShade()
   * @generated
   * @ordered
   */
  protected static final boolean SHADE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isShade() <em>Shade</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isShade()
   * @generated
   * @ordered
   */
  protected boolean shade = SHADE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return McmodelPackage.Literals.ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vec3d getFrom()
  {
    return from;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFrom(Vec3d newFrom, NotificationChain msgs)
  {
    Vec3d oldFrom = from;
    from = newFrom;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__FROM, oldFrom, newFrom);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setFrom(Vec3d newFrom)
  {
    if (newFrom != from)
    {
      NotificationChain msgs = null;
      if (from != null)
        msgs = ((InternalEObject)from).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ELEMENT__FROM, null, msgs);
      if (newFrom != null)
        msgs = ((InternalEObject)newFrom).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ELEMENT__FROM, null, msgs);
      msgs = basicSetFrom(newFrom, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__FROM, newFrom, newFrom));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vec3d getTo()
  {
    return to;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTo(Vec3d newTo, NotificationChain msgs)
  {
    Vec3d oldTo = to;
    to = newTo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__TO, oldTo, newTo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTo(Vec3d newTo)
  {
    if (newTo != to)
    {
      NotificationChain msgs = null;
      if (to != null)
        msgs = ((InternalEObject)to).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ELEMENT__TO, null, msgs);
      if (newTo != null)
        msgs = ((InternalEObject)newTo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ELEMENT__TO, null, msgs);
      msgs = basicSetTo(newTo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__TO, newTo, newTo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rotation getRotation()
  {
    return rotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRotation(Rotation newRotation, NotificationChain msgs)
  {
    Rotation oldRotation = rotation;
    rotation = newRotation;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__ROTATION, oldRotation, newRotation);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRotation(Rotation newRotation)
  {
    if (newRotation != rotation)
    {
      NotificationChain msgs = null;
      if (rotation != null)
        msgs = ((InternalEObject)rotation).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ELEMENT__ROTATION, null, msgs);
      if (newRotation != null)
        msgs = ((InternalEObject)newRotation).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ELEMENT__ROTATION, null, msgs);
      msgs = basicSetRotation(newRotation, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__ROTATION, newRotation, newRotation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Faces> getFaces()
  {
    if (faces == null)
    {
      faces = new EObjectContainmentEList<Faces>(Faces.class, this, McmodelPackage.ELEMENT__FACES);
    }
    return faces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Face getDefaultFace()
  {
    return defaultFace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDefaultFace(Face newDefaultFace, NotificationChain msgs)
  {
    Face oldDefaultFace = defaultFace;
    defaultFace = newDefaultFace;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__DEFAULT_FACE, oldDefaultFace, newDefaultFace);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDefaultFace(Face newDefaultFace)
  {
    if (newDefaultFace != defaultFace)
    {
      NotificationChain msgs = null;
      if (defaultFace != null)
        msgs = ((InternalEObject)defaultFace).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ELEMENT__DEFAULT_FACE, null, msgs);
      if (newDefaultFace != null)
        msgs = ((InternalEObject)newDefaultFace).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ELEMENT__DEFAULT_FACE, null, msgs);
      msgs = basicSetDefaultFace(newDefaultFace, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__DEFAULT_FACE, newDefaultFace, newDefaultFace));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isShadeDefined()
  {
    return shadeDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShadeDefined(boolean newShadeDefined)
  {
    boolean oldShadeDefined = shadeDefined;
    shadeDefined = newShadeDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__SHADE_DEFINED, oldShadeDefined, shadeDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isShade()
  {
    return shade;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setShade(boolean newShade)
  {
    boolean oldShade = shade;
    shade = newShade;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ELEMENT__SHADE, oldShade, shade));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case McmodelPackage.ELEMENT__FROM:
        return basicSetFrom(null, msgs);
      case McmodelPackage.ELEMENT__TO:
        return basicSetTo(null, msgs);
      case McmodelPackage.ELEMENT__ROTATION:
        return basicSetRotation(null, msgs);
      case McmodelPackage.ELEMENT__FACES:
        return ((InternalEList<?>)getFaces()).basicRemove(otherEnd, msgs);
      case McmodelPackage.ELEMENT__DEFAULT_FACE:
        return basicSetDefaultFace(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case McmodelPackage.ELEMENT__FROM:
        return getFrom();
      case McmodelPackage.ELEMENT__TO:
        return getTo();
      case McmodelPackage.ELEMENT__ROTATION:
        return getRotation();
      case McmodelPackage.ELEMENT__FACES:
        return getFaces();
      case McmodelPackage.ELEMENT__DEFAULT_FACE:
        return getDefaultFace();
      case McmodelPackage.ELEMENT__SHADE_DEFINED:
        return isShadeDefined();
      case McmodelPackage.ELEMENT__SHADE:
        return isShade();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case McmodelPackage.ELEMENT__FROM:
        setFrom((Vec3d)newValue);
        return;
      case McmodelPackage.ELEMENT__TO:
        setTo((Vec3d)newValue);
        return;
      case McmodelPackage.ELEMENT__ROTATION:
        setRotation((Rotation)newValue);
        return;
      case McmodelPackage.ELEMENT__FACES:
        getFaces().clear();
        getFaces().addAll((Collection<? extends Faces>)newValue);
        return;
      case McmodelPackage.ELEMENT__DEFAULT_FACE:
        setDefaultFace((Face)newValue);
        return;
      case McmodelPackage.ELEMENT__SHADE_DEFINED:
        setShadeDefined((Boolean)newValue);
        return;
      case McmodelPackage.ELEMENT__SHADE:
        setShade((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case McmodelPackage.ELEMENT__FROM:
        setFrom((Vec3d)null);
        return;
      case McmodelPackage.ELEMENT__TO:
        setTo((Vec3d)null);
        return;
      case McmodelPackage.ELEMENT__ROTATION:
        setRotation((Rotation)null);
        return;
      case McmodelPackage.ELEMENT__FACES:
        getFaces().clear();
        return;
      case McmodelPackage.ELEMENT__DEFAULT_FACE:
        setDefaultFace((Face)null);
        return;
      case McmodelPackage.ELEMENT__SHADE_DEFINED:
        setShadeDefined(SHADE_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.ELEMENT__SHADE:
        setShade(SHADE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case McmodelPackage.ELEMENT__FROM:
        return from != null;
      case McmodelPackage.ELEMENT__TO:
        return to != null;
      case McmodelPackage.ELEMENT__ROTATION:
        return rotation != null;
      case McmodelPackage.ELEMENT__FACES:
        return faces != null && !faces.isEmpty();
      case McmodelPackage.ELEMENT__DEFAULT_FACE:
        return defaultFace != null;
      case McmodelPackage.ELEMENT__SHADE_DEFINED:
        return shadeDefined != SHADE_DEFINED_EDEFAULT;
      case McmodelPackage.ELEMENT__SHADE:
        return shade != SHADE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (shadeDefined: ");
    result.append(shadeDefined);
    result.append(", shade: ");
    result.append(shade);
    result.append(')');
    return result.toString();
  }

} //ElementImpl
