/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.mcmodel.impl;

import com.raptor.mcmodel.mcmodel.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class McmodelFactoryImpl extends EFactoryImpl implements McmodelFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static McmodelFactory init()
  {
    try
    {
      McmodelFactory theMcmodelFactory = (McmodelFactory)EPackage.Registry.INSTANCE.getEFactory(McmodelPackage.eNS_URI);
      if (theMcmodelFactory != null)
      {
        return theMcmodelFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new McmodelFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public McmodelFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case McmodelPackage.MODEL: return createModel();
      case McmodelPackage.TEXTURE: return createTexture();
      case McmodelPackage.ELEMENT: return createElement();
      case McmodelPackage.ROTATION: return createRotation();
      case McmodelPackage.FACES: return createFaces();
      case McmodelPackage.FACE: return createFace();
      case McmodelPackage.DISPLAY: return createDisplay();
      case McmodelPackage.MORPH: return createMorph();
      case McmodelPackage.ITEM_OVERRIDE: return createItemOverride();
      case McmodelPackage.OVERRIDE_PREDICATE: return createOverridePredicate();
      case McmodelPackage.MC_JSON_VALUE: return createMCJsonValue();
      case McmodelPackage.MC_JSON_OBJECT: return createMCJsonObject();
      case McmodelPackage.MC_JSON_ENTRY: return createMCJsonEntry();
      case McmodelPackage.MC_JSON_ARRAY: return createMCJsonArray();
      case McmodelPackage.MC_JSON_STRING: return createMCJsonString();
      case McmodelPackage.MC_JSON_NUMBER: return createMCJsonNumber();
      case McmodelPackage.MC_JSON_INTEGRAL: return createMCJsonIntegral();
      case McmodelPackage.MC_JSON_FLOATING_POINT: return createMCJsonFloatingPoint();
      case McmodelPackage.MC_JSON_BOOLEAN: return createMCJsonBoolean();
      case McmodelPackage.MC_JSON_NULL: return createMCJsonNull();
      case McmodelPackage.VEC3D: return createVec3d();
      case McmodelPackage.VEC4D: return createVec4d();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case McmodelPackage.ENUM_GUI_LIGHT:
        return createEnumGuiLightFromString(eDataType, initialValue);
      case McmodelPackage.ENUM_AXIS:
        return createEnumAxisFromString(eDataType, initialValue);
      case McmodelPackage.ENUM_FACE:
        return createEnumFaceFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case McmodelPackage.ENUM_GUI_LIGHT:
        return convertEnumGuiLightToString(eDataType, instanceValue);
      case McmodelPackage.ENUM_AXIS:
        return convertEnumAxisToString(eDataType, instanceValue);
      case McmodelPackage.ENUM_FACE:
        return convertEnumFaceToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Texture createTexture()
  {
    TextureImpl texture = new TextureImpl();
    return texture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rotation createRotation()
  {
    RotationImpl rotation = new RotationImpl();
    return rotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Faces createFaces()
  {
    FacesImpl faces = new FacesImpl();
    return faces;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Face createFace()
  {
    FaceImpl face = new FaceImpl();
    return face;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Display createDisplay()
  {
    DisplayImpl display = new DisplayImpl();
    return display;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Morph createMorph()
  {
    MorphImpl morph = new MorphImpl();
    return morph;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ItemOverride createItemOverride()
  {
    ItemOverrideImpl itemOverride = new ItemOverrideImpl();
    return itemOverride;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OverridePredicate createOverridePredicate()
  {
    OverridePredicateImpl overridePredicate = new OverridePredicateImpl();
    return overridePredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonValue createMCJsonValue()
  {
    MCJsonValueImpl mcJsonValue = new MCJsonValueImpl();
    return mcJsonValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonObject createMCJsonObject()
  {
    MCJsonObjectImpl mcJsonObject = new MCJsonObjectImpl();
    return mcJsonObject;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonEntry createMCJsonEntry()
  {
    MCJsonEntryImpl mcJsonEntry = new MCJsonEntryImpl();
    return mcJsonEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonArray createMCJsonArray()
  {
    MCJsonArrayImpl mcJsonArray = new MCJsonArrayImpl();
    return mcJsonArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonString createMCJsonString()
  {
    MCJsonStringImpl mcJsonString = new MCJsonStringImpl();
    return mcJsonString;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonNumber createMCJsonNumber()
  {
    MCJsonNumberImpl mcJsonNumber = new MCJsonNumberImpl();
    return mcJsonNumber;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonIntegral createMCJsonIntegral()
  {
    MCJsonIntegralImpl mcJsonIntegral = new MCJsonIntegralImpl();
    return mcJsonIntegral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonFloatingPoint createMCJsonFloatingPoint()
  {
    MCJsonFloatingPointImpl mcJsonFloatingPoint = new MCJsonFloatingPointImpl();
    return mcJsonFloatingPoint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonBoolean createMCJsonBoolean()
  {
    MCJsonBooleanImpl mcJsonBoolean = new MCJsonBooleanImpl();
    return mcJsonBoolean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MCJsonNull createMCJsonNull()
  {
    MCJsonNullImpl mcJsonNull = new MCJsonNullImpl();
    return mcJsonNull;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vec3d createVec3d()
  {
    Vec3dImpl vec3d = new Vec3dImpl();
    return vec3d;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vec4d createVec4d()
  {
    Vec4dImpl vec4d = new Vec4dImpl();
    return vec4d;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumGuiLight createEnumGuiLightFromString(EDataType eDataType, String initialValue)
  {
    EnumGuiLight result = EnumGuiLight.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumGuiLightToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumAxis createEnumAxisFromString(EDataType eDataType, String initialValue)
  {
    EnumAxis result = EnumAxis.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumAxisToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EnumFace createEnumFaceFromString(EDataType eDataType, String initialValue)
  {
    EnumFace result = EnumFace.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEnumFaceToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public McmodelPackage getMcmodelPackage()
  {
    return (McmodelPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static McmodelPackage getPackage()
  {
    return McmodelPackage.eINSTANCE;
  }

} //McmodelFactoryImpl
