/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.mcmodel.impl;

import com.raptor.mcmodel.mcmodel.EnumFace;
import com.raptor.mcmodel.mcmodel.Face;
import com.raptor.mcmodel.mcmodel.McmodelPackage;
import com.raptor.mcmodel.mcmodel.Vec4d;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Face</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.FaceImpl#getTexture <em>Texture</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.FaceImpl#getUv <em>Uv</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.FaceImpl#isCullfaceDefined <em>Cullface Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.FaceImpl#getCullface <em>Cullface</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.FaceImpl#isRotationDefined <em>Rotation Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.FaceImpl#getRotation <em>Rotation</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.FaceImpl#isTintindexDefined <em>Tintindex Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.FaceImpl#getTintindex <em>Tintindex</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FaceImpl extends MinimalEObjectImpl.Container implements Face
{
  /**
   * The default value of the '{@link #getTexture() <em>Texture</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTexture()
   * @generated
   * @ordered
   */
  protected static final String TEXTURE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTexture() <em>Texture</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTexture()
   * @generated
   * @ordered
   */
  protected String texture = TEXTURE_EDEFAULT;

  /**
   * The cached value of the '{@link #getUv() <em>Uv</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUv()
   * @generated
   * @ordered
   */
  protected Vec4d uv;

  /**
   * The default value of the '{@link #isCullfaceDefined() <em>Cullface Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCullfaceDefined()
   * @generated
   * @ordered
   */
  protected static final boolean CULLFACE_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isCullfaceDefined() <em>Cullface Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isCullfaceDefined()
   * @generated
   * @ordered
   */
  protected boolean cullfaceDefined = CULLFACE_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #getCullface() <em>Cullface</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCullface()
   * @generated
   * @ordered
   */
  protected static final EnumFace CULLFACE_EDEFAULT = EnumFace.NORTH;

  /**
   * The cached value of the '{@link #getCullface() <em>Cullface</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCullface()
   * @generated
   * @ordered
   */
  protected EnumFace cullface = CULLFACE_EDEFAULT;

  /**
   * The default value of the '{@link #isRotationDefined() <em>Rotation Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRotationDefined()
   * @generated
   * @ordered
   */
  protected static final boolean ROTATION_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRotationDefined() <em>Rotation Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRotationDefined()
   * @generated
   * @ordered
   */
  protected boolean rotationDefined = ROTATION_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #getRotation() <em>Rotation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRotation()
   * @generated
   * @ordered
   */
  protected static final long ROTATION_EDEFAULT = 0L;

  /**
   * The cached value of the '{@link #getRotation() <em>Rotation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRotation()
   * @generated
   * @ordered
   */
  protected long rotation = ROTATION_EDEFAULT;

  /**
   * The default value of the '{@link #isTintindexDefined() <em>Tintindex Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTintindexDefined()
   * @generated
   * @ordered
   */
  protected static final boolean TINTINDEX_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTintindexDefined() <em>Tintindex Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTintindexDefined()
   * @generated
   * @ordered
   */
  protected boolean tintindexDefined = TINTINDEX_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #getTintindex() <em>Tintindex</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTintindex()
   * @generated
   * @ordered
   */
  protected static final long TINTINDEX_EDEFAULT = 0L;

  /**
   * The cached value of the '{@link #getTintindex() <em>Tintindex</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTintindex()
   * @generated
   * @ordered
   */
  protected long tintindex = TINTINDEX_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FaceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return McmodelPackage.Literals.FACE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTexture()
  {
    return texture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTexture(String newTexture)
  {
    String oldTexture = texture;
    texture = newTexture;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__TEXTURE, oldTexture, texture));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vec4d getUv()
  {
    return uv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUv(Vec4d newUv, NotificationChain msgs)
  {
    Vec4d oldUv = uv;
    uv = newUv;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__UV, oldUv, newUv);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUv(Vec4d newUv)
  {
    if (newUv != uv)
    {
      NotificationChain msgs = null;
      if (uv != null)
        msgs = ((InternalEObject)uv).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.FACE__UV, null, msgs);
      if (newUv != null)
        msgs = ((InternalEObject)newUv).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.FACE__UV, null, msgs);
      msgs = basicSetUv(newUv, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__UV, newUv, newUv));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isCullfaceDefined()
  {
    return cullfaceDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCullfaceDefined(boolean newCullfaceDefined)
  {
    boolean oldCullfaceDefined = cullfaceDefined;
    cullfaceDefined = newCullfaceDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__CULLFACE_DEFINED, oldCullfaceDefined, cullfaceDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumFace getCullface()
  {
    return cullface;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setCullface(EnumFace newCullface)
  {
    EnumFace oldCullface = cullface;
    cullface = newCullface == null ? CULLFACE_EDEFAULT : newCullface;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__CULLFACE, oldCullface, cullface));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRotationDefined()
  {
    return rotationDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRotationDefined(boolean newRotationDefined)
  {
    boolean oldRotationDefined = rotationDefined;
    rotationDefined = newRotationDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__ROTATION_DEFINED, oldRotationDefined, rotationDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public long getRotation()
  {
    return rotation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRotation(long newRotation)
  {
    long oldRotation = rotation;
    rotation = newRotation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__ROTATION, oldRotation, rotation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTintindexDefined()
  {
    return tintindexDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTintindexDefined(boolean newTintindexDefined)
  {
    boolean oldTintindexDefined = tintindexDefined;
    tintindexDefined = newTintindexDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__TINTINDEX_DEFINED, oldTintindexDefined, tintindexDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public long getTintindex()
  {
    return tintindex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTintindex(long newTintindex)
  {
    long oldTintindex = tintindex;
    tintindex = newTintindex;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.FACE__TINTINDEX, oldTintindex, tintindex));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case McmodelPackage.FACE__UV:
        return basicSetUv(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case McmodelPackage.FACE__TEXTURE:
        return getTexture();
      case McmodelPackage.FACE__UV:
        return getUv();
      case McmodelPackage.FACE__CULLFACE_DEFINED:
        return isCullfaceDefined();
      case McmodelPackage.FACE__CULLFACE:
        return getCullface();
      case McmodelPackage.FACE__ROTATION_DEFINED:
        return isRotationDefined();
      case McmodelPackage.FACE__ROTATION:
        return getRotation();
      case McmodelPackage.FACE__TINTINDEX_DEFINED:
        return isTintindexDefined();
      case McmodelPackage.FACE__TINTINDEX:
        return getTintindex();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case McmodelPackage.FACE__TEXTURE:
        setTexture((String)newValue);
        return;
      case McmodelPackage.FACE__UV:
        setUv((Vec4d)newValue);
        return;
      case McmodelPackage.FACE__CULLFACE_DEFINED:
        setCullfaceDefined((Boolean)newValue);
        return;
      case McmodelPackage.FACE__CULLFACE:
        setCullface((EnumFace)newValue);
        return;
      case McmodelPackage.FACE__ROTATION_DEFINED:
        setRotationDefined((Boolean)newValue);
        return;
      case McmodelPackage.FACE__ROTATION:
        setRotation((Long)newValue);
        return;
      case McmodelPackage.FACE__TINTINDEX_DEFINED:
        setTintindexDefined((Boolean)newValue);
        return;
      case McmodelPackage.FACE__TINTINDEX:
        setTintindex((Long)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case McmodelPackage.FACE__TEXTURE:
        setTexture(TEXTURE_EDEFAULT);
        return;
      case McmodelPackage.FACE__UV:
        setUv((Vec4d)null);
        return;
      case McmodelPackage.FACE__CULLFACE_DEFINED:
        setCullfaceDefined(CULLFACE_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.FACE__CULLFACE:
        setCullface(CULLFACE_EDEFAULT);
        return;
      case McmodelPackage.FACE__ROTATION_DEFINED:
        setRotationDefined(ROTATION_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.FACE__ROTATION:
        setRotation(ROTATION_EDEFAULT);
        return;
      case McmodelPackage.FACE__TINTINDEX_DEFINED:
        setTintindexDefined(TINTINDEX_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.FACE__TINTINDEX:
        setTintindex(TINTINDEX_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case McmodelPackage.FACE__TEXTURE:
        return TEXTURE_EDEFAULT == null ? texture != null : !TEXTURE_EDEFAULT.equals(texture);
      case McmodelPackage.FACE__UV:
        return uv != null;
      case McmodelPackage.FACE__CULLFACE_DEFINED:
        return cullfaceDefined != CULLFACE_DEFINED_EDEFAULT;
      case McmodelPackage.FACE__CULLFACE:
        return cullface != CULLFACE_EDEFAULT;
      case McmodelPackage.FACE__ROTATION_DEFINED:
        return rotationDefined != ROTATION_DEFINED_EDEFAULT;
      case McmodelPackage.FACE__ROTATION:
        return rotation != ROTATION_EDEFAULT;
      case McmodelPackage.FACE__TINTINDEX_DEFINED:
        return tintindexDefined != TINTINDEX_DEFINED_EDEFAULT;
      case McmodelPackage.FACE__TINTINDEX:
        return tintindex != TINTINDEX_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (texture: ");
    result.append(texture);
    result.append(", cullfaceDefined: ");
    result.append(cullfaceDefined);
    result.append(", cullface: ");
    result.append(cullface);
    result.append(", rotationDefined: ");
    result.append(rotationDefined);
    result.append(", rotation: ");
    result.append(rotation);
    result.append(", tintindexDefined: ");
    result.append(tintindexDefined);
    result.append(", tintindex: ");
    result.append(tintindex);
    result.append(')');
    return result.toString();
  }

} //FaceImpl
