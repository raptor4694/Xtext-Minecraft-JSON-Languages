/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.mcmodel.impl;

import com.raptor.mcmodel.mcmodel.EnumAxis;
import com.raptor.mcmodel.mcmodel.McmodelPackage;
import com.raptor.mcmodel.mcmodel.Rotation;
import com.raptor.mcmodel.mcmodel.Vec3d;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rotation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.RotationImpl#getOrigin <em>Origin</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.RotationImpl#getAxis <em>Axis</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.RotationImpl#getAngle <em>Angle</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.RotationImpl#isRescaleDefined <em>Rescale Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.RotationImpl#isRescale <em>Rescale</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RotationImpl extends MinimalEObjectImpl.Container implements Rotation
{
  /**
   * The cached value of the '{@link #getOrigin() <em>Origin</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrigin()
   * @generated
   * @ordered
   */
  protected Vec3d origin;

  /**
   * The default value of the '{@link #getAxis() <em>Axis</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAxis()
   * @generated
   * @ordered
   */
  protected static final EnumAxis AXIS_EDEFAULT = EnumAxis.X;

  /**
   * The cached value of the '{@link #getAxis() <em>Axis</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAxis()
   * @generated
   * @ordered
   */
  protected EnumAxis axis = AXIS_EDEFAULT;

  /**
   * The default value of the '{@link #getAngle() <em>Angle</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAngle()
   * @generated
   * @ordered
   */
  protected static final double ANGLE_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getAngle() <em>Angle</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAngle()
   * @generated
   * @ordered
   */
  protected double angle = ANGLE_EDEFAULT;

  /**
   * The default value of the '{@link #isRescaleDefined() <em>Rescale Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRescaleDefined()
   * @generated
   * @ordered
   */
  protected static final boolean RESCALE_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRescaleDefined() <em>Rescale Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRescaleDefined()
   * @generated
   * @ordered
   */
  protected boolean rescaleDefined = RESCALE_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isRescale() <em>Rescale</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRescale()
   * @generated
   * @ordered
   */
  protected static final boolean RESCALE_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isRescale() <em>Rescale</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isRescale()
   * @generated
   * @ordered
   */
  protected boolean rescale = RESCALE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RotationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return McmodelPackage.Literals.ROTATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vec3d getOrigin()
  {
    return origin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOrigin(Vec3d newOrigin, NotificationChain msgs)
  {
    Vec3d oldOrigin = origin;
    origin = newOrigin;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McmodelPackage.ROTATION__ORIGIN, oldOrigin, newOrigin);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrigin(Vec3d newOrigin)
  {
    if (newOrigin != origin)
    {
      NotificationChain msgs = null;
      if (origin != null)
        msgs = ((InternalEObject)origin).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ROTATION__ORIGIN, null, msgs);
      if (newOrigin != null)
        msgs = ((InternalEObject)newOrigin).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.ROTATION__ORIGIN, null, msgs);
      msgs = basicSetOrigin(newOrigin, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ROTATION__ORIGIN, newOrigin, newOrigin));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumAxis getAxis()
  {
    return axis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAxis(EnumAxis newAxis)
  {
    EnumAxis oldAxis = axis;
    axis = newAxis == null ? AXIS_EDEFAULT : newAxis;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ROTATION__AXIS, oldAxis, axis));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getAngle()
  {
    return angle;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAngle(double newAngle)
  {
    double oldAngle = angle;
    angle = newAngle;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ROTATION__ANGLE, oldAngle, angle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRescaleDefined()
  {
    return rescaleDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRescaleDefined(boolean newRescaleDefined)
  {
    boolean oldRescaleDefined = rescaleDefined;
    rescaleDefined = newRescaleDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ROTATION__RESCALE_DEFINED, oldRescaleDefined, rescaleDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isRescale()
  {
    return rescale;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRescale(boolean newRescale)
  {
    boolean oldRescale = rescale;
    rescale = newRescale;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.ROTATION__RESCALE, oldRescale, rescale));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case McmodelPackage.ROTATION__ORIGIN:
        return basicSetOrigin(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case McmodelPackage.ROTATION__ORIGIN:
        return getOrigin();
      case McmodelPackage.ROTATION__AXIS:
        return getAxis();
      case McmodelPackage.ROTATION__ANGLE:
        return getAngle();
      case McmodelPackage.ROTATION__RESCALE_DEFINED:
        return isRescaleDefined();
      case McmodelPackage.ROTATION__RESCALE:
        return isRescale();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case McmodelPackage.ROTATION__ORIGIN:
        setOrigin((Vec3d)newValue);
        return;
      case McmodelPackage.ROTATION__AXIS:
        setAxis((EnumAxis)newValue);
        return;
      case McmodelPackage.ROTATION__ANGLE:
        setAngle((Double)newValue);
        return;
      case McmodelPackage.ROTATION__RESCALE_DEFINED:
        setRescaleDefined((Boolean)newValue);
        return;
      case McmodelPackage.ROTATION__RESCALE:
        setRescale((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case McmodelPackage.ROTATION__ORIGIN:
        setOrigin((Vec3d)null);
        return;
      case McmodelPackage.ROTATION__AXIS:
        setAxis(AXIS_EDEFAULT);
        return;
      case McmodelPackage.ROTATION__ANGLE:
        setAngle(ANGLE_EDEFAULT);
        return;
      case McmodelPackage.ROTATION__RESCALE_DEFINED:
        setRescaleDefined(RESCALE_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.ROTATION__RESCALE:
        setRescale(RESCALE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case McmodelPackage.ROTATION__ORIGIN:
        return origin != null;
      case McmodelPackage.ROTATION__AXIS:
        return axis != AXIS_EDEFAULT;
      case McmodelPackage.ROTATION__ANGLE:
        return angle != ANGLE_EDEFAULT;
      case McmodelPackage.ROTATION__RESCALE_DEFINED:
        return rescaleDefined != RESCALE_DEFINED_EDEFAULT;
      case McmodelPackage.ROTATION__RESCALE:
        return rescale != RESCALE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (axis: ");
    result.append(axis);
    result.append(", angle: ");
    result.append(angle);
    result.append(", rescaleDefined: ");
    result.append(rescaleDefined);
    result.append(", rescale: ");
    result.append(rescale);
    result.append(')');
    return result.toString();
  }

} //RotationImpl
