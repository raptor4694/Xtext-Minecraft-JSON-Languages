/**
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.mcmodel.impl;

import com.raptor.mcmodel.mcmodel.Display;
import com.raptor.mcmodel.mcmodel.Element;
import com.raptor.mcmodel.mcmodel.EnumGuiLight;
import com.raptor.mcmodel.mcmodel.ItemOverride;
import com.raptor.mcmodel.mcmodel.McmodelPackage;
import com.raptor.mcmodel.mcmodel.Model;
import com.raptor.mcmodel.mcmodel.Texture;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#getParent <em>Parent</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#isAmbientocclusionDefined <em>Ambientocclusion Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#isAmbientocclusion <em>Ambientocclusion</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#isDisplayDefined <em>Display Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#getDisplay <em>Display</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#isTexturesDefined <em>Textures Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#getTextures <em>Textures</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#isElementsDefined <em>Elements Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#getElements <em>Elements</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#isGuiLightDefined <em>Gui Light Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#getGuiLight <em>Gui Light</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#isOverridesDefined <em>Overrides Defined</em>}</li>
 *   <li>{@link com.raptor.mcmodel.mcmodel.impl.ModelImpl#getOverrides <em>Overrides</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ModelImpl extends MinimalEObjectImpl.Container implements Model
{
  /**
   * The default value of the '{@link #getParent() <em>Parent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected static final String PARENT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getParent() <em>Parent</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParent()
   * @generated
   * @ordered
   */
  protected String parent = PARENT_EDEFAULT;

  /**
   * The default value of the '{@link #isAmbientocclusionDefined() <em>Ambientocclusion Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAmbientocclusionDefined()
   * @generated
   * @ordered
   */
  protected static final boolean AMBIENTOCCLUSION_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAmbientocclusionDefined() <em>Ambientocclusion Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAmbientocclusionDefined()
   * @generated
   * @ordered
   */
  protected boolean ambientocclusionDefined = AMBIENTOCCLUSION_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #isAmbientocclusion() <em>Ambientocclusion</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAmbientocclusion()
   * @generated
   * @ordered
   */
  protected static final boolean AMBIENTOCCLUSION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAmbientocclusion() <em>Ambientocclusion</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAmbientocclusion()
   * @generated
   * @ordered
   */
  protected boolean ambientocclusion = AMBIENTOCCLUSION_EDEFAULT;

  /**
   * The default value of the '{@link #isDisplayDefined() <em>Display Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDisplayDefined()
   * @generated
   * @ordered
   */
  protected static final boolean DISPLAY_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDisplayDefined() <em>Display Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDisplayDefined()
   * @generated
   * @ordered
   */
  protected boolean displayDefined = DISPLAY_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getDisplay() <em>Display</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDisplay()
   * @generated
   * @ordered
   */
  protected Display display;

  /**
   * The default value of the '{@link #isTexturesDefined() <em>Textures Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTexturesDefined()
   * @generated
   * @ordered
   */
  protected static final boolean TEXTURES_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTexturesDefined() <em>Textures Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTexturesDefined()
   * @generated
   * @ordered
   */
  protected boolean texturesDefined = TEXTURES_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getTextures() <em>Textures</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTextures()
   * @generated
   * @ordered
   */
  protected EList<Texture> textures;

  /**
   * The default value of the '{@link #isElementsDefined() <em>Elements Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isElementsDefined()
   * @generated
   * @ordered
   */
  protected static final boolean ELEMENTS_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isElementsDefined() <em>Elements Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isElementsDefined()
   * @generated
   * @ordered
   */
  protected boolean elementsDefined = ELEMENTS_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getElements() <em>Elements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElements()
   * @generated
   * @ordered
   */
  protected EList<Element> elements;

  /**
   * The default value of the '{@link #isGuiLightDefined() <em>Gui Light Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isGuiLightDefined()
   * @generated
   * @ordered
   */
  protected static final boolean GUI_LIGHT_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isGuiLightDefined() <em>Gui Light Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isGuiLightDefined()
   * @generated
   * @ordered
   */
  protected boolean guiLightDefined = GUI_LIGHT_DEFINED_EDEFAULT;

  /**
   * The default value of the '{@link #getGuiLight() <em>Gui Light</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuiLight()
   * @generated
   * @ordered
   */
  protected static final EnumGuiLight GUI_LIGHT_EDEFAULT = EnumGuiLight.FRONT;

  /**
   * The cached value of the '{@link #getGuiLight() <em>Gui Light</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGuiLight()
   * @generated
   * @ordered
   */
  protected EnumGuiLight guiLight = GUI_LIGHT_EDEFAULT;

  /**
   * The default value of the '{@link #isOverridesDefined() <em>Overrides Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOverridesDefined()
   * @generated
   * @ordered
   */
  protected static final boolean OVERRIDES_DEFINED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOverridesDefined() <em>Overrides Defined</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOverridesDefined()
   * @generated
   * @ordered
   */
  protected boolean overridesDefined = OVERRIDES_DEFINED_EDEFAULT;

  /**
   * The cached value of the '{@link #getOverrides() <em>Overrides</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOverrides()
   * @generated
   * @ordered
   */
  protected EList<ItemOverride> overrides;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return McmodelPackage.Literals.MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getParent()
  {
    return parent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParent(String newParent)
  {
    String oldParent = parent;
    parent = newParent;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__PARENT, oldParent, parent));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAmbientocclusionDefined()
  {
    return ambientocclusionDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAmbientocclusionDefined(boolean newAmbientocclusionDefined)
  {
    boolean oldAmbientocclusionDefined = ambientocclusionDefined;
    ambientocclusionDefined = newAmbientocclusionDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__AMBIENTOCCLUSION_DEFINED, oldAmbientocclusionDefined, ambientocclusionDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isAmbientocclusion()
  {
    return ambientocclusion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setAmbientocclusion(boolean newAmbientocclusion)
  {
    boolean oldAmbientocclusion = ambientocclusion;
    ambientocclusion = newAmbientocclusion;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__AMBIENTOCCLUSION, oldAmbientocclusion, ambientocclusion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDisplayDefined()
  {
    return displayDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisplayDefined(boolean newDisplayDefined)
  {
    boolean oldDisplayDefined = displayDefined;
    displayDefined = newDisplayDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__DISPLAY_DEFINED, oldDisplayDefined, displayDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Display getDisplay()
  {
    return display;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDisplay(Display newDisplay, NotificationChain msgs)
  {
    Display oldDisplay = display;
    display = newDisplay;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__DISPLAY, oldDisplay, newDisplay);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDisplay(Display newDisplay)
  {
    if (newDisplay != display)
    {
      NotificationChain msgs = null;
      if (display != null)
        msgs = ((InternalEObject)display).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.MODEL__DISPLAY, null, msgs);
      if (newDisplay != null)
        msgs = ((InternalEObject)newDisplay).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - McmodelPackage.MODEL__DISPLAY, null, msgs);
      msgs = basicSetDisplay(newDisplay, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__DISPLAY, newDisplay, newDisplay));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTexturesDefined()
  {
    return texturesDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTexturesDefined(boolean newTexturesDefined)
  {
    boolean oldTexturesDefined = texturesDefined;
    texturesDefined = newTexturesDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__TEXTURES_DEFINED, oldTexturesDefined, texturesDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Texture> getTextures()
  {
    if (textures == null)
    {
      textures = new EObjectContainmentEList<Texture>(Texture.class, this, McmodelPackage.MODEL__TEXTURES);
    }
    return textures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isElementsDefined()
  {
    return elementsDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElementsDefined(boolean newElementsDefined)
  {
    boolean oldElementsDefined = elementsDefined;
    elementsDefined = newElementsDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__ELEMENTS_DEFINED, oldElementsDefined, elementsDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Element> getElements()
  {
    if (elements == null)
    {
      elements = new EObjectContainmentEList<Element>(Element.class, this, McmodelPackage.MODEL__ELEMENTS);
    }
    return elements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isGuiLightDefined()
  {
    return guiLightDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuiLightDefined(boolean newGuiLightDefined)
  {
    boolean oldGuiLightDefined = guiLightDefined;
    guiLightDefined = newGuiLightDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__GUI_LIGHT_DEFINED, oldGuiLightDefined, guiLightDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumGuiLight getGuiLight()
  {
    return guiLight;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGuiLight(EnumGuiLight newGuiLight)
  {
    EnumGuiLight oldGuiLight = guiLight;
    guiLight = newGuiLight == null ? GUI_LIGHT_EDEFAULT : newGuiLight;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__GUI_LIGHT, oldGuiLight, guiLight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isOverridesDefined()
  {
    return overridesDefined;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOverridesDefined(boolean newOverridesDefined)
  {
    boolean oldOverridesDefined = overridesDefined;
    overridesDefined = newOverridesDefined;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, McmodelPackage.MODEL__OVERRIDES_DEFINED, oldOverridesDefined, overridesDefined));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ItemOverride> getOverrides()
  {
    if (overrides == null)
    {
      overrides = new EObjectContainmentEList<ItemOverride>(ItemOverride.class, this, McmodelPackage.MODEL__OVERRIDES);
    }
    return overrides;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case McmodelPackage.MODEL__DISPLAY:
        return basicSetDisplay(null, msgs);
      case McmodelPackage.MODEL__TEXTURES:
        return ((InternalEList<?>)getTextures()).basicRemove(otherEnd, msgs);
      case McmodelPackage.MODEL__ELEMENTS:
        return ((InternalEList<?>)getElements()).basicRemove(otherEnd, msgs);
      case McmodelPackage.MODEL__OVERRIDES:
        return ((InternalEList<?>)getOverrides()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case McmodelPackage.MODEL__PARENT:
        return getParent();
      case McmodelPackage.MODEL__AMBIENTOCCLUSION_DEFINED:
        return isAmbientocclusionDefined();
      case McmodelPackage.MODEL__AMBIENTOCCLUSION:
        return isAmbientocclusion();
      case McmodelPackage.MODEL__DISPLAY_DEFINED:
        return isDisplayDefined();
      case McmodelPackage.MODEL__DISPLAY:
        return getDisplay();
      case McmodelPackage.MODEL__TEXTURES_DEFINED:
        return isTexturesDefined();
      case McmodelPackage.MODEL__TEXTURES:
        return getTextures();
      case McmodelPackage.MODEL__ELEMENTS_DEFINED:
        return isElementsDefined();
      case McmodelPackage.MODEL__ELEMENTS:
        return getElements();
      case McmodelPackage.MODEL__GUI_LIGHT_DEFINED:
        return isGuiLightDefined();
      case McmodelPackage.MODEL__GUI_LIGHT:
        return getGuiLight();
      case McmodelPackage.MODEL__OVERRIDES_DEFINED:
        return isOverridesDefined();
      case McmodelPackage.MODEL__OVERRIDES:
        return getOverrides();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case McmodelPackage.MODEL__PARENT:
        setParent((String)newValue);
        return;
      case McmodelPackage.MODEL__AMBIENTOCCLUSION_DEFINED:
        setAmbientocclusionDefined((Boolean)newValue);
        return;
      case McmodelPackage.MODEL__AMBIENTOCCLUSION:
        setAmbientocclusion((Boolean)newValue);
        return;
      case McmodelPackage.MODEL__DISPLAY_DEFINED:
        setDisplayDefined((Boolean)newValue);
        return;
      case McmodelPackage.MODEL__DISPLAY:
        setDisplay((Display)newValue);
        return;
      case McmodelPackage.MODEL__TEXTURES_DEFINED:
        setTexturesDefined((Boolean)newValue);
        return;
      case McmodelPackage.MODEL__TEXTURES:
        getTextures().clear();
        getTextures().addAll((Collection<? extends Texture>)newValue);
        return;
      case McmodelPackage.MODEL__ELEMENTS_DEFINED:
        setElementsDefined((Boolean)newValue);
        return;
      case McmodelPackage.MODEL__ELEMENTS:
        getElements().clear();
        getElements().addAll((Collection<? extends Element>)newValue);
        return;
      case McmodelPackage.MODEL__GUI_LIGHT_DEFINED:
        setGuiLightDefined((Boolean)newValue);
        return;
      case McmodelPackage.MODEL__GUI_LIGHT:
        setGuiLight((EnumGuiLight)newValue);
        return;
      case McmodelPackage.MODEL__OVERRIDES_DEFINED:
        setOverridesDefined((Boolean)newValue);
        return;
      case McmodelPackage.MODEL__OVERRIDES:
        getOverrides().clear();
        getOverrides().addAll((Collection<? extends ItemOverride>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case McmodelPackage.MODEL__PARENT:
        setParent(PARENT_EDEFAULT);
        return;
      case McmodelPackage.MODEL__AMBIENTOCCLUSION_DEFINED:
        setAmbientocclusionDefined(AMBIENTOCCLUSION_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.MODEL__AMBIENTOCCLUSION:
        setAmbientocclusion(AMBIENTOCCLUSION_EDEFAULT);
        return;
      case McmodelPackage.MODEL__DISPLAY_DEFINED:
        setDisplayDefined(DISPLAY_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.MODEL__DISPLAY:
        setDisplay((Display)null);
        return;
      case McmodelPackage.MODEL__TEXTURES_DEFINED:
        setTexturesDefined(TEXTURES_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.MODEL__TEXTURES:
        getTextures().clear();
        return;
      case McmodelPackage.MODEL__ELEMENTS_DEFINED:
        setElementsDefined(ELEMENTS_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.MODEL__ELEMENTS:
        getElements().clear();
        return;
      case McmodelPackage.MODEL__GUI_LIGHT_DEFINED:
        setGuiLightDefined(GUI_LIGHT_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.MODEL__GUI_LIGHT:
        setGuiLight(GUI_LIGHT_EDEFAULT);
        return;
      case McmodelPackage.MODEL__OVERRIDES_DEFINED:
        setOverridesDefined(OVERRIDES_DEFINED_EDEFAULT);
        return;
      case McmodelPackage.MODEL__OVERRIDES:
        getOverrides().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case McmodelPackage.MODEL__PARENT:
        return PARENT_EDEFAULT == null ? parent != null : !PARENT_EDEFAULT.equals(parent);
      case McmodelPackage.MODEL__AMBIENTOCCLUSION_DEFINED:
        return ambientocclusionDefined != AMBIENTOCCLUSION_DEFINED_EDEFAULT;
      case McmodelPackage.MODEL__AMBIENTOCCLUSION:
        return ambientocclusion != AMBIENTOCCLUSION_EDEFAULT;
      case McmodelPackage.MODEL__DISPLAY_DEFINED:
        return displayDefined != DISPLAY_DEFINED_EDEFAULT;
      case McmodelPackage.MODEL__DISPLAY:
        return display != null;
      case McmodelPackage.MODEL__TEXTURES_DEFINED:
        return texturesDefined != TEXTURES_DEFINED_EDEFAULT;
      case McmodelPackage.MODEL__TEXTURES:
        return textures != null && !textures.isEmpty();
      case McmodelPackage.MODEL__ELEMENTS_DEFINED:
        return elementsDefined != ELEMENTS_DEFINED_EDEFAULT;
      case McmodelPackage.MODEL__ELEMENTS:
        return elements != null && !elements.isEmpty();
      case McmodelPackage.MODEL__GUI_LIGHT_DEFINED:
        return guiLightDefined != GUI_LIGHT_DEFINED_EDEFAULT;
      case McmodelPackage.MODEL__GUI_LIGHT:
        return guiLight != GUI_LIGHT_EDEFAULT;
      case McmodelPackage.MODEL__OVERRIDES_DEFINED:
        return overridesDefined != OVERRIDES_DEFINED_EDEFAULT;
      case McmodelPackage.MODEL__OVERRIDES:
        return overrides != null && !overrides.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (parent: ");
    result.append(parent);
    result.append(", ambientocclusionDefined: ");
    result.append(ambientocclusionDefined);
    result.append(", ambientocclusion: ");
    result.append(ambientocclusion);
    result.append(", displayDefined: ");
    result.append(displayDefined);
    result.append(", texturesDefined: ");
    result.append(texturesDefined);
    result.append(", elementsDefined: ");
    result.append(elementsDefined);
    result.append(", guiLightDefined: ");
    result.append(guiLightDefined);
    result.append(", guiLight: ");
    result.append(guiLight);
    result.append(", overridesDefined: ");
    result.append(overridesDefined);
    result.append(')');
    return result.toString();
  }

} //ModelImpl
