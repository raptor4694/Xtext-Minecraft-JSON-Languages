/*
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.serializer;

import com.google.inject.Inject;
import com.raptor.mcmodel.mcmodel.Display;
import com.raptor.mcmodel.mcmodel.Element;
import com.raptor.mcmodel.mcmodel.Face;
import com.raptor.mcmodel.mcmodel.Faces;
import com.raptor.mcmodel.mcmodel.ItemOverride;
import com.raptor.mcmodel.mcmodel.MCJsonArray;
import com.raptor.mcmodel.mcmodel.MCJsonBoolean;
import com.raptor.mcmodel.mcmodel.MCJsonEntry;
import com.raptor.mcmodel.mcmodel.MCJsonFloatingPoint;
import com.raptor.mcmodel.mcmodel.MCJsonIntegral;
import com.raptor.mcmodel.mcmodel.MCJsonNull;
import com.raptor.mcmodel.mcmodel.MCJsonObject;
import com.raptor.mcmodel.mcmodel.MCJsonString;
import com.raptor.mcmodel.mcmodel.McmodelPackage;
import com.raptor.mcmodel.mcmodel.Model;
import com.raptor.mcmodel.mcmodel.Morph;
import com.raptor.mcmodel.mcmodel.OverridePredicate;
import com.raptor.mcmodel.mcmodel.Rotation;
import com.raptor.mcmodel.mcmodel.Texture;
import com.raptor.mcmodel.mcmodel.Vec3d;
import com.raptor.mcmodel.mcmodel.Vec4d;
import com.raptor.mcmodel.services.McmodelGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class McmodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private McmodelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == McmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case McmodelPackage.DISPLAY:
				sequence_Display(context, (Display) semanticObject); 
				return; 
			case McmodelPackage.ELEMENT:
				sequence_Element(context, (Element) semanticObject); 
				return; 
			case McmodelPackage.FACE:
				sequence_Face(context, (Face) semanticObject); 
				return; 
			case McmodelPackage.FACES:
				sequence_Faces(context, (Faces) semanticObject); 
				return; 
			case McmodelPackage.ITEM_OVERRIDE:
				sequence_ItemOverride(context, (ItemOverride) semanticObject); 
				return; 
			case McmodelPackage.MC_JSON_ARRAY:
				sequence_MCJsonArray(context, (MCJsonArray) semanticObject); 
				return; 
			case McmodelPackage.MC_JSON_BOOLEAN:
				sequence_MCJsonBoolean(context, (MCJsonBoolean) semanticObject); 
				return; 
			case McmodelPackage.MC_JSON_ENTRY:
				sequence_MCJsonEntry(context, (MCJsonEntry) semanticObject); 
				return; 
			case McmodelPackage.MC_JSON_FLOATING_POINT:
				sequence_MCJsonFloatingPoint(context, (MCJsonFloatingPoint) semanticObject); 
				return; 
			case McmodelPackage.MC_JSON_INTEGRAL:
				sequence_MCJsonIntegral(context, (MCJsonIntegral) semanticObject); 
				return; 
			case McmodelPackage.MC_JSON_NULL:
				sequence_MCJsonNull(context, (MCJsonNull) semanticObject); 
				return; 
			case McmodelPackage.MC_JSON_OBJECT:
				sequence_MCJsonObject(context, (MCJsonObject) semanticObject); 
				return; 
			case McmodelPackage.MC_JSON_STRING:
				sequence_MCJsonString(context, (MCJsonString) semanticObject); 
				return; 
			case McmodelPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case McmodelPackage.MORPH:
				sequence_Morph(context, (Morph) semanticObject); 
				return; 
			case McmodelPackage.OVERRIDE_PREDICATE:
				if (rule == grammarAccess.getOverridePredicate_10Rule()) {
					sequence_OverridePredicate_10(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_11Rule()) {
					sequence_OverridePredicate_11(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_12Rule()) {
					sequence_OverridePredicate_12(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_13Rule()) {
					sequence_OverridePredicate_13(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_1Rule()) {
					sequence_OverridePredicate_1(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicateRule()) {
					sequence_OverridePredicate_1_OverridePredicate_10_OverridePredicate_11_OverridePredicate_12_OverridePredicate_13_OverridePredicate_2_OverridePredicate_3_OverridePredicate_4_OverridePredicate_5_OverridePredicate_6_OverridePredicate_7_OverridePredicate_8_OverridePredicate_9(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_2Rule()) {
					sequence_OverridePredicate_2(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_3Rule()) {
					sequence_OverridePredicate_3(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_4Rule()) {
					sequence_OverridePredicate_4(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_5Rule()) {
					sequence_OverridePredicate_5(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_6Rule()) {
					sequence_OverridePredicate_6(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_7Rule()) {
					sequence_OverridePredicate_7(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_8Rule()) {
					sequence_OverridePredicate_8(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOverridePredicate_9Rule()) {
					sequence_OverridePredicate_9(context, (OverridePredicate) semanticObject); 
					return; 
				}
				else break;
			case McmodelPackage.ROTATION:
				sequence_Rotation(context, (Rotation) semanticObject); 
				return; 
			case McmodelPackage.TEXTURE:
				sequence_Texture(context, (Texture) semanticObject); 
				return; 
			case McmodelPackage.VEC3D:
				if (rule == grammarAccess.getVec3dPercentageRule()) {
					sequence_Vec3dPercentage(context, (Vec3d) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVec3dRule()) {
					sequence_Vec3d(context, (Vec3d) semanticObject); 
					return; 
				}
				else break;
			case McmodelPackage.VEC4D:
				sequence_Vec4d(context, (Vec4d) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Display returns Display
	 *
	 * Constraint:
	 *     (
	 *         thirdperson_righthand=Morph | 
	 *         thirdperson_lefthand=Morph | 
	 *         firstperson_righthand=Morph | 
	 *         firstperson_lefthand=Morph | 
	 *         gui=Morph | 
	 *         head=Morph | 
	 *         ground=Morph | 
	 *         fixed=Morph
	 *     )*
	 */
	protected void sequence_Display(ISerializationContext context, Display semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Element returns Element
	 *
	 * Constraint:
	 *     (from=Vec3d to=Vec3d ((rotation=Rotation | faces+=Faces | defaultFace=Face)? (shadeDefined?='shade' shade?='true'?)?)+)
	 */
	protected void sequence_Element(ISerializationContext context, Element semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Face returns Face
	 *
	 * Constraint:
	 *     (
	 *         texture=TextureValue 
	 *         uv=Vec4d? 
	 *         ((cullfaceDefined?='cullface' cullface=EnumFace) | (rotationDefined?='rotation' rotation=LONG) | (tintindexDefined?='tintindex' tintindex=LONG))*
	 *     )
	 */
	protected void sequence_Face(ISerializationContext context, Face semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Faces returns Faces
	 *
	 * Constraint:
	 *     (sides+=EnumFace sides+=EnumFace* face=Face)
	 */
	protected void sequence_Faces(ISerializationContext context, Faces semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ItemOverride returns ItemOverride
	 *
	 * Constraint:
	 *     (predicate=OverridePredicate model=NamespacedLocation)
	 */
	protected void sequence_ItemOverride(ISerializationContext context, ItemOverride semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.ITEM_OVERRIDE__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.ITEM_OVERRIDE__PREDICATE));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.ITEM_OVERRIDE__MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.ITEM_OVERRIDE__MODEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getItemOverrideAccess().getPredicateOverridePredicateParserRuleCall_0_0(), semanticObject.getPredicate());
		feeder.accept(grammarAccess.getItemOverrideAccess().getModelNamespacedLocationParserRuleCall_2_0(), semanticObject.getModel());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MCJsonValue returns MCJsonArray
	 *     MCJsonArray returns MCJsonArray
	 *
	 * Constraint:
	 *     (elements+=MCJsonValue elements+=MCJsonValue*)?
	 */
	protected void sequence_MCJsonArray(ISerializationContext context, MCJsonArray semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCJsonValue returns MCJsonBoolean
	 *     MCJsonBoolean returns MCJsonBoolean
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_MCJsonBoolean(ISerializationContext context, MCJsonBoolean semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCJsonEntry returns MCJsonEntry
	 *
	 * Constraint:
	 *     (name=STRING value=MCJsonValue)
	 */
	protected void sequence_MCJsonEntry(ISerializationContext context, MCJsonEntry semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.MC_JSON_ENTRY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.MC_JSON_ENTRY__NAME));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.MC_JSON_ENTRY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.MC_JSON_ENTRY__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMCJsonEntryAccess().getNameSTRINGTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMCJsonEntryAccess().getValueMCJsonValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MCJsonValue returns MCJsonFloatingPoint
	 *     MCJsonNumber returns MCJsonFloatingPoint
	 *     MCJsonFloatingPoint returns MCJsonFloatingPoint
	 *
	 * Constraint:
	 *     value=DOUBLE
	 */
	protected void sequence_MCJsonFloatingPoint(ISerializationContext context, MCJsonFloatingPoint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.MC_JSON_FLOATING_POINT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.MC_JSON_FLOATING_POINT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMCJsonFloatingPointAccess().getValueDOUBLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MCJsonValue returns MCJsonIntegral
	 *     MCJsonNumber returns MCJsonIntegral
	 *     MCJsonIntegral returns MCJsonIntegral
	 *
	 * Constraint:
	 *     value=LONG
	 */
	protected void sequence_MCJsonIntegral(ISerializationContext context, MCJsonIntegral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.MC_JSON_INTEGRAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.MC_JSON_INTEGRAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMCJsonIntegralAccess().getValueLONGParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MCJsonValue returns MCJsonNull
	 *     MCJsonNull returns MCJsonNull
	 *
	 * Constraint:
	 *     {MCJsonNull}
	 */
	protected void sequence_MCJsonNull(ISerializationContext context, MCJsonNull semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCJsonValue returns MCJsonObject
	 *     MCJsonObject returns MCJsonObject
	 *
	 * Constraint:
	 *     (entries+=MCJsonEntry entries+=MCJsonEntry*)?
	 */
	protected void sequence_MCJsonObject(ISerializationContext context, MCJsonObject semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MCJsonValue returns MCJsonString
	 *     MCJsonString returns MCJsonString
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_MCJsonString(ISerializationContext context, MCJsonString semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.MC_JSON_STRING__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.MC_JSON_STRING__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMCJsonStringAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (
	 *         parent=NamespacedLocation? 
	 *         (ambientocclusionDefined?='ambientocclusion' ambientocclusion?='true'?)? 
	 *         (texturesDefined?='textures' textures+=Texture*)? 
	 *         (elementsDefined?='elements' elements+=Element*)? 
	 *         (overridesDefined?='overrides' overrides+=ItemOverride*)? 
	 *         (displayDefined?='display' display=Display)? 
	 *         (guiLightDefined?='gui_light' guiLight=EnumGuiLight)?
	 *     )+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Morph returns Morph
	 *
	 * Constraint:
	 *     (rotation=Vec3d | translation=Vec3d | scale=Vec3d | scale=Vec3dPercentage)*
	 */
	protected void sequence_Morph(ISerializationContext context, Morph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_10 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         (pullingDefined?='!' | (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)) 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_10(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_11 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         (throwingDefined?='!' | (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)) 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_11(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_12 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         timeDefined?='time' 
	 *         time=PERCENTAGE 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_12(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_13 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         customModelDataDefined?='custom_model_data' 
	 *         customModelData=LONG 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_13(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_1 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         angleDefined?='angle' 
	 *         angle=PERCENTAGE 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_1(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             angleDefined?='angle' 
	 *             angle=PERCENTAGE 
	 *             (
	 *                 (
	 *                     blockingDefined?='!' | 
	 *                     brokenDefined?='!' | 
	 *                     castDefined?='!' | 
	 *                     damagedDefined?='!' | 
	 *                     lefthandedDefined?='!' | 
	 *                     pullingDefined?='!' | 
	 *                     throwingDefined?='!'
	 *                 )? 
	 *                 (timeDefined?='time' time=PERCENTAGE)? 
	 *                 (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *                 (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *                 (pullDefined?='pull' pull=PERCENTAGE)? 
	 *                 (damageDefined?='damage' damage=PERCENTAGE)? 
	 *                 (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *                 (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *                 (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *                 (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *                 (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *                 (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *                 (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *             )+
	 *         ) | 
	 *         (
	 *             (blockingDefined?='!' | (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)) 
	 *             (
	 *                 (
	 *                     brokenDefined?='!' | 
	 *                     castDefined?='!' | 
	 *                     damagedDefined?='!' | 
	 *                     lefthandedDefined?='!' | 
	 *                     pullingDefined?='!' | 
	 *                     throwingDefined?='!'
	 *                 )? 
	 *                 (timeDefined?='time' time=PERCENTAGE)? 
	 *                 (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *                 (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *                 (pullDefined?='pull' pull=PERCENTAGE)? 
	 *                 (damageDefined?='damage' damage=PERCENTAGE)? 
	 *                 (angleDefined?='angle' angle=PERCENTAGE)? 
	 *                 (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *                 (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *                 (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)? 
	 *                 (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *                 (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *                 (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)?
	 *             )+
	 *         ) | 
	 *         (
	 *             (brokenDefined?='!' | (brokenDefined?='broken' (broken?='false' | broken?='true')?)) 
	 *             (
	 *                 (
	 *                     blockingDefined?='!' | 
	 *                     castDefined?='!' | 
	 *                     damagedDefined?='!' | 
	 *                     lefthandedDefined?='!' | 
	 *                     pullingDefined?='!' | 
	 *                     throwingDefined?='!'
	 *                 )? 
	 *                 (damageDefined?='damage' damage=PERCENTAGE)? 
	 *                 (pullDefined?='pull' pull=PERCENTAGE)? 
	 *                 (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *                 (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *                 (angleDefined?='angle' angle=PERCENTAGE)? 
	 *                 (timeDefined?='time' time=PERCENTAGE)? 
	 *                 (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *                 (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *                 (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)? 
	 *                 (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *                 (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *                 (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)?
	 *             )+
	 *         ) | 
	 *         (
	 *             (castDefined?='!' | (castDefined?='cast' (cast?='false' | cast?='true')?)) 
	 *             pullingDefined?='!'? 
	 *             (
	 *                 (
	 *                     (angleDefined?='angle' angle=PERCENTAGE) | 
	 *                     blockingDefined?='!' | 
	 *                     (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?) | 
	 *                     brokenDefined?='!' | 
	 *                     (brokenDefined?='broken' (broken?='false' | broken?='true')?) | 
	 *                     (cooldownDefined?='cooldown' cooldown=PERCENTAGE) | 
	 *                     (damageDefined?='damage' damage=PERCENTAGE) | 
	 *                     damagedDefined?='!' | 
	 *                     (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?) | 
	 *                     lefthandedDefined?='!' | 
	 *                     (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?) | 
	 *                     (pullDefined?='pull' pull=PERCENTAGE) | 
	 *                     (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?) | 
	 *                     throwingDefined?='!' | 
	 *                     (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?) | 
	 *                     (timeDefined?='time' time=PERCENTAGE) | 
	 *                     (customModelDataDefined?='custom_model_data' customModelData=LONG)
	 *                 )? 
	 *                 pullingDefined?='!'?
	 *             )*
	 *         ) | 
	 *         (
	 *             cooldownDefined?='cooldown' 
	 *             cooldown=PERCENTAGE 
	 *             lefthandedDefined?='!'? 
	 *             (
	 *                 (
	 *                     (angleDefined?='angle' angle=PERCENTAGE) | 
	 *                     blockingDefined?='!' | 
	 *                     (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?) | 
	 *                     brokenDefined?='!' | 
	 *                     (brokenDefined?='broken' (broken?='false' | broken?='true')?) | 
	 *                     castDefined?='!' | 
	 *                     (castDefined?='cast' (cast?='false' | cast?='true')?) | 
	 *                     (damageDefined?='damage' damage=PERCENTAGE) | 
	 *                     damagedDefined?='!' | 
	 *                     (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?) | 
	 *                     (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?) | 
	 *                     (pullDefined?='pull' pull=PERCENTAGE) | 
	 *                     pullingDefined?='!' | 
	 *                     (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?) | 
	 *                     throwingDefined?='!' | 
	 *                     (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?) | 
	 *                     (timeDefined?='time' time=PERCENTAGE) | 
	 *                     (customModelDataDefined?='custom_model_data' customModelData=LONG)
	 *                 )? 
	 *                 lefthandedDefined?='!'?
	 *             )*
	 *         ) | 
	 *         (
	 *             damageDefined?='damage' 
	 *             damage=PERCENTAGE 
	 *             blockingDefined?='!'? 
	 *             (
	 *                 (
	 *                     (angleDefined?='angle' angle=PERCENTAGE) | 
	 *                     (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?) | 
	 *                     brokenDefined?='!' | 
	 *                     (brokenDefined?='broken' (broken?='false' | broken?='true')?) | 
	 *                     castDefined?='!' | 
	 *                     (castDefined?='cast' (cast?='false' | cast?='true')?) | 
	 *                     (cooldownDefined?='cooldown' cooldown=PERCENTAGE) | 
	 *                     damagedDefined?='!' | 
	 *                     (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?) | 
	 *                     lefthandedDefined?='!' | 
	 *                     (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?) | 
	 *                     (pullDefined?='pull' pull=PERCENTAGE) | 
	 *                     pullingDefined?='!' | 
	 *                     (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?) | 
	 *                     throwingDefined?='!' | 
	 *                     (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?) | 
	 *                     (timeDefined?='time' time=PERCENTAGE) | 
	 *                     (customModelDataDefined?='custom_model_data' customModelData=LONG)
	 *                 )? 
	 *                 blockingDefined?='!'?
	 *             )*
	 *         ) | 
	 *         (
	 *             (damagedDefined?='!' | (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)) 
	 *             lefthandedDefined?='!'? 
	 *             (
	 *                 (
	 *                     (angleDefined?='angle' angle=PERCENTAGE) | 
	 *                     blockingDefined?='!' | 
	 *                     (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?) | 
	 *                     brokenDefined?='!' | 
	 *                     (brokenDefined?='broken' (broken?='false' | broken?='true')?) | 
	 *                     castDefined?='!' | 
	 *                     (castDefined?='cast' (cast?='false' | cast?='true')?) | 
	 *                     (cooldownDefined?='cooldown' cooldown=PERCENTAGE) | 
	 *                     (damageDefined?='damage' damage=PERCENTAGE) | 
	 *                     (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?) | 
	 *                     (pullDefined?='pull' pull=PERCENTAGE) | 
	 *                     pullingDefined?='!' | 
	 *                     (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?) | 
	 *                     throwingDefined?='!' | 
	 *                     (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?) | 
	 *                     (timeDefined?='time' time=PERCENTAGE) | 
	 *                     (customModelDataDefined?='custom_model_data' customModelData=LONG)
	 *                 )? 
	 *                 lefthandedDefined?='!'?
	 *             )*
	 *         ) | 
	 *         (
	 *             (lefthandedDefined?='!' | (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)) 
	 *             blockingDefined?='!'? 
	 *             (
	 *                 (
	 *                     (angleDefined?='angle' angle=PERCENTAGE) | 
	 *                     (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?) | 
	 *                     brokenDefined?='!' | 
	 *                     (brokenDefined?='broken' (broken?='false' | broken?='true')?) | 
	 *                     castDefined?='!' | 
	 *                     (castDefined?='cast' (cast?='false' | cast?='true')?) | 
	 *                     (cooldownDefined?='cooldown' cooldown=PERCENTAGE) | 
	 *                     (damageDefined?='damage' damage=PERCENTAGE) | 
	 *                     damagedDefined?='!' | 
	 *                     (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?) | 
	 *                     (pullDefined?='pull' pull=PERCENTAGE) | 
	 *                     pullingDefined?='!' | 
	 *                     (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?) | 
	 *                     throwingDefined?='!' | 
	 *                     (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?) | 
	 *                     (timeDefined?='time' time=PERCENTAGE) | 
	 *                     (customModelDataDefined?='custom_model_data' customModelData=LONG)
	 *                 )? 
	 *                 blockingDefined?='!'?
	 *             )*
	 *         ) | 
	 *         (
	 *             pullDefined?='pull' 
	 *             pull=PERCENTAGE 
	 *             (
	 *                 (
	 *                     blockingDefined?='!' | 
	 *                     brokenDefined?='!' | 
	 *                     castDefined?='!' | 
	 *                     damagedDefined?='!' | 
	 *                     lefthandedDefined?='!' | 
	 *                     pullingDefined?='!' | 
	 *                     throwingDefined?='!'
	 *                 )? 
	 *                 (timeDefined?='time' time=PERCENTAGE)? 
	 *                 (angleDefined?='angle' angle=PERCENTAGE)? 
	 *                 (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *                 (damageDefined?='damage' damage=PERCENTAGE)? 
	 *                 (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *                 (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *                 (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *                 (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *                 (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *                 (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)? 
	 *                 (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *                 (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)?
	 *             )+
	 *         ) | 
	 *         (
	 *             (pullingDefined?='!' | (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)) 
	 *             castDefined?='!'? 
	 *             (
	 *                 (
	 *                     (angleDefined?='angle' angle=PERCENTAGE) | 
	 *                     blockingDefined?='!' | 
	 *                     (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?) | 
	 *                     brokenDefined?='!' | 
	 *                     (brokenDefined?='broken' (broken?='false' | broken?='true')?) | 
	 *                     (castDefined?='cast' (cast?='false' | cast?='true')?) | 
	 *                     (cooldownDefined?='cooldown' cooldown=PERCENTAGE) | 
	 *                     (damageDefined?='damage' damage=PERCENTAGE) | 
	 *                     damagedDefined?='!' | 
	 *                     (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?) | 
	 *                     lefthandedDefined?='!' | 
	 *                     (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?) | 
	 *                     (pullDefined?='pull' pull=PERCENTAGE) | 
	 *                     throwingDefined?='!' | 
	 *                     (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?) | 
	 *                     (timeDefined?='time' time=PERCENTAGE) | 
	 *                     (customModelDataDefined?='custom_model_data' customModelData=LONG)
	 *                 )? 
	 *                 castDefined?='!'?
	 *             )*
	 *         ) | 
	 *         (
	 *             (throwingDefined?='!' | (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)) 
	 *             (
	 *                 (
	 *                     blockingDefined?='!' | 
	 *                     brokenDefined?='!' | 
	 *                     castDefined?='!' | 
	 *                     damagedDefined?='!' | 
	 *                     lefthandedDefined?='!' | 
	 *                     pullingDefined?='!'
	 *                 )? 
	 *                 (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *                 (damageDefined?='damage' damage=PERCENTAGE)? 
	 *                 (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *                 (angleDefined?='angle' angle=PERCENTAGE)? 
	 *                 (pullDefined?='pull' pull=PERCENTAGE)? 
	 *                 (timeDefined?='time' time=PERCENTAGE)? 
	 *                 (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *                 (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *                 (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *                 (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *                 (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *                 (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)?
	 *             )+
	 *         ) | 
	 *         (
	 *             timeDefined?='time' 
	 *             time=PERCENTAGE 
	 *             (
	 *                 (
	 *                     blockingDefined?='!' | 
	 *                     brokenDefined?='!' | 
	 *                     castDefined?='!' | 
	 *                     damagedDefined?='!' | 
	 *                     lefthandedDefined?='!' | 
	 *                     pullingDefined?='!' | 
	 *                     throwingDefined?='!'
	 *                 )? 
	 *                 (angleDefined?='angle' angle=PERCENTAGE)? 
	 *                 (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *                 (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *                 (pullDefined?='pull' pull=PERCENTAGE)? 
	 *                 (damageDefined?='damage' damage=PERCENTAGE)? 
	 *                 (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *                 (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *                 (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)? 
	 *                 (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *                 (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *                 (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *                 (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)?
	 *             )+
	 *         ) | 
	 *         (
	 *             customModelDataDefined?='custom_model_data' 
	 *             customModelData=LONG 
	 *             (
	 *                 (
	 *                     blockingDefined?='!' | 
	 *                     brokenDefined?='!' | 
	 *                     castDefined?='!' | 
	 *                     damagedDefined?='!' | 
	 *                     lefthandedDefined?='!' | 
	 *                     pullingDefined?='!' | 
	 *                     throwingDefined?='!'
	 *                 )? 
	 *                 (angleDefined?='angle' angle=PERCENTAGE)? 
	 *                 (pullDefined?='pull' pull=PERCENTAGE)? 
	 *                 (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *                 (timeDefined?='time' time=PERCENTAGE)? 
	 *                 (damageDefined?='damage' damage=PERCENTAGE)? 
	 *                 (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *                 (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *                 (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *                 (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *                 (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *                 (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *                 (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *             )+
	 *         )
	 *     )
	 */
	protected void sequence_OverridePredicate_1_OverridePredicate_10_OverridePredicate_11_OverridePredicate_12_OverridePredicate_13_OverridePredicate_2_OverridePredicate_3_OverridePredicate_4_OverridePredicate_5_OverridePredicate_6_OverridePredicate_7_OverridePredicate_8_OverridePredicate_9(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_2 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         (blockingDefined?='!' | (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)) 
	 *         (
	 *             (
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_2(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_3 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         (brokenDefined?='!' | (brokenDefined?='broken' (broken?='false' | broken?='true')?)) 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_3(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_4 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         (castDefined?='!' | (castDefined?='cast' (cast?='false' | cast?='true')?)) 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_4(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_5 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         cooldownDefined?='cooldown' 
	 *         cooldown=PERCENTAGE 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_5(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_6 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         damageDefined?='damage' 
	 *         damage=PERCENTAGE 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_6(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_7 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         (damagedDefined?='!' | (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)) 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_7(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_8 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         (lefthandedDefined?='!' | (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)) 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (pullDefined?='pull' pull=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_8(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OverridePredicate_9 returns OverridePredicate
	 *
	 * Constraint:
	 *     (
	 *         pullDefined?='pull' 
	 *         pull=PERCENTAGE 
	 *         (
	 *             (
	 *                 blockingDefined?='!' | 
	 *                 brokenDefined?='!' | 
	 *                 castDefined?='!' | 
	 *                 damagedDefined?='!' | 
	 *                 lefthandedDefined?='!' | 
	 *                 pullingDefined?='!' | 
	 *                 throwingDefined?='!'
	 *             )? 
	 *             (angleDefined?='angle' angle=PERCENTAGE)? 
	 *             (cooldownDefined?='cooldown' cooldown=PERCENTAGE)? 
	 *             (damageDefined?='damage' damage=PERCENTAGE)? 
	 *             (timeDefined?='time' time=PERCENTAGE)? 
	 *             (customModelDataDefined?='custom_model_data' customModelData=LONG)? 
	 *             (blockingDefined?='blocking' (blocking?='false' | blocking?='true')?)? 
	 *             (brokenDefined?='broken' (broken?='false' | broken?='true')?)? 
	 *             (castDefined?='cast' (cast?='false' | cast?='true')?)? 
	 *             (damagedDefined?='damaged' (damaged?='false' | damaged?='true')?)? 
	 *             (lefthandedDefined?='lefthanded' (lefthanded?='false' | lefthanded?='true')?)? 
	 *             (pullingDefined?='pulling' (pulling?='false' | pulling?='true')?)? 
	 *             (throwingDefined?='throwing' (throwing?='false' | throwing?='true')?)?
	 *         )+
	 *     )
	 */
	protected void sequence_OverridePredicate_9(ISerializationContext context, OverridePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rotation returns Rotation
	 *
	 * Constraint:
	 *     ((origin=Vec3d | axis=EnumAxis | angle=NUMBER)? (rescaleDefined?='rescale' rescale?='true'?)?)+
	 */
	protected void sequence_Rotation(ISerializationContext context, Rotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Texture returns Texture
	 *
	 * Constraint:
	 *     (name=Identifier value=TextureValue)
	 */
	protected void sequence_Texture(ISerializationContext context, Texture semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.TEXTURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.TEXTURE__NAME));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.TEXTURE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.TEXTURE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextureAccess().getNameIdentifierParserRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTextureAccess().getValueTextureValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vec3dPercentage returns Vec3d
	 *
	 * Constraint:
	 *     (x=PERCENTAGE y=PERCENTAGE z=PERCENTAGE)
	 */
	protected void sequence_Vec3dPercentage(ISerializationContext context, Vec3d semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC3D__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC3D__X));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC3D__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC3D__Y));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC3D__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC3D__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVec3dPercentageAccess().getXPERCENTAGETerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getVec3dPercentageAccess().getYPERCENTAGETerminalRuleCall_3_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getVec3dPercentageAccess().getZPERCENTAGETerminalRuleCall_5_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vec3d returns Vec3d
	 *
	 * Constraint:
	 *     (x=NUMBER y=NUMBER z=NUMBER)
	 */
	protected void sequence_Vec3d(ISerializationContext context, Vec3d semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC3D__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC3D__X));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC3D__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC3D__Y));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC3D__Z) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC3D__Z));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVec3dAccess().getXNUMBERParserRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getVec3dAccess().getYNUMBERParserRuleCall_3_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getVec3dAccess().getZNUMBERParserRuleCall_5_0(), semanticObject.getZ());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Vec4d returns Vec4d
	 *
	 * Constraint:
	 *     (x1=NUMBER y1=NUMBER x2=NUMBER y2=NUMBER)
	 */
	protected void sequence_Vec4d(ISerializationContext context, Vec4d semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC4D__X1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC4D__X1));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC4D__Y1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC4D__Y1));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC4D__X2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC4D__X2));
			if (transientValues.isValueTransient(semanticObject, McmodelPackage.Literals.VEC4D__Y2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, McmodelPackage.Literals.VEC4D__Y2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVec4dAccess().getX1NUMBERParserRuleCall_1_0(), semanticObject.getX1());
		feeder.accept(grammarAccess.getVec4dAccess().getY1NUMBERParserRuleCall_3_0(), semanticObject.getY1());
		feeder.accept(grammarAccess.getVec4dAccess().getX2NUMBERParserRuleCall_5_0(), semanticObject.getX2());
		feeder.accept(grammarAccess.getVec4dAccess().getY2NUMBERParserRuleCall_7_0(), semanticObject.getY2());
		feeder.finish();
	}
	
	
}
