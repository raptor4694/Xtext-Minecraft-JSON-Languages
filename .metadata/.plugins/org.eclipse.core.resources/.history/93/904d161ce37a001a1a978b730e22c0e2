package com.raptor.mcloottable.ui.editor.syntaxcoloring

import org.eclipse.xtext.ui.editor.syntaxcoloring.DefaultAntlrTokenToAttributeIdMapper
import java.util.regex.Pattern

import static com.raptor.mcloottable.ui.editor.syntaxcoloring.MclootHighlightingConfiguration.*

class MclootAntlrTokenToAttributeIdMapper extends DefaultAntlrTokenToAttributeIdMapper {
	
	static val QUOTED = Pattern.compile("(?:^\'([^\']*)\'$)|(?:^\"([^\"]*)\")$", Pattern.MULTILINE)
	
	override protected calculateId(String tokenName, int tokenType) {
		switch (tokenName) {
		    // function names
		    case "'apply_bonus'",
		    case "'copy_name'",
		    case "'copy_nbt'",
		    case "'copy_state'",
		    case "'enchant_randomly'",
		    case "'enchant_with_levels'",
		    case "'exploration_map'",
		    case "'explosion_decay'",
		    case "'furnace_smelt'",
		    case "'fill_player_head'",
		    case "'limit'",
		    case "'looting_enchant'",
		    case "'set_attributes'",
		    case "'set_contents'",
		    case "'set_count'",
		    case "'set_damage'",
		    case "'set_lore'",
		    case "'set_name'",
		    case "'set_nbt'",
		    case "'set_stew_effect'": FUNCTION_ID
		    // condition names
//		    case "'block'",
		    case "'damage_source'",
		    case "'entity'",
		    case "'entity_scores'",
		    case "'killed_by_player'",
		    case "'location'",
		    case "'tool'",
		    case "'random_chance'",
//		    case "'ref'",
		    case "'survives_explosion'",
		    case "'table_bonus'",
		    case "'time'",
		    case "'enchantments'",
		    case "'weather'": CONDITION_ID
		    // function param names
		    case "'min'", case "'max'",
		    case "'operation'", case "'amount'",
		    case "'name'", case "'enchantment'", case "'formula'", case "'extra'",
		    case "'probability'", case "'bonusMultiplier'",
		    case "'n'", case "'p'": DEFAULT_ID
		    case 'RULE_PERCENTAGE', case 'RULE_DOUBLE', case 'RULE_ULONG', case 'RULE_SLONG',
		    case '".."', case 'RULE_ULONG_RANGE_START', case 'RULE_SLONG_RANGE_START': NUMBER_ID
			default: super.calculateId(tokenName, tokenType)
		}
	}
	
}