package com.raptor.mcloottable.tests

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
import java.util.Map
import java.util.Set
import com.raptor.mcloottable.util.Property
import com.raptor.mcloottable.util.IntProperty
import com.raptor.mcloottable.util.BooleanProperty
import com.raptor.mcloottable.util.EnumProperty
import com.raptor.mcloottable.util.MinecraftData.Properties

import static com.raptor.mcloottable.util.MinecraftData.*

class GenerateMinecraftDataFiles {
    
    static val DIR = Paths.get('''C:\Users\flyin\Documents\Xtext\com.raptor.mcloot\src\com\raptor\mcloottable\util\mcdata''')
    
    def static void main(String[] args) {
        
        generate(VANILLA_LOOT_TABLES, "loot_tables.txt")
        
        generate(VANILLA_BLOCK_TAG_STATES, "block_tag_states.txt")
        
        generate(VANILLA_ENTITY_TYPE_TAGS, "entity_type_tags.txt")
        
        generate(VANILLA_ITEM_TAGS, "item_tags.txt")
        
        generate(VANILLA_BLOCK_STATES, "block_states.txt")
        
        generate(VANILLA_BLOCKS, "blocks.txt")
        
        generate(VANILLA_ITEMS, "items.txt")
        
        generate(VANILLA_FLUIDS, "fluids.txt")
        
        generate(VANILLA_MOB_EFFECTS, "mob_effects.txt")
        
        generate(VANILLA_ENCHANTMENTS, "enchantments.txt")
        
        generate(VANILLA_ENTITY_TYPES, "entity_types.txt")
        
        generate(VANILLA_POTIONS, "potions.txt")
        
        generate(VANILLA_BIOMES, "biomes.txt")
        
        generate(VANILLA_STRUCTURE_FEATURES, "structure_features.txt")
        
        generate(VANILLA_DIMENSION_TYPES, "dimension_types.txt")
        
        generate(VANILLA_ATTRIBUTES, "attributes.txt")
        
        generate(VANILLA_MAP_ICONS, "map_icons.txt")
        
        
        
    }
    
    def static generate(Set<String> strings, String fileName) {
        write(fileName, '''
        «FOR element : strings»
            «element»
        «ENDFOR»
        ''')
    }
    
    def static generate(Map<String, Map<String, ? extends Property>> data, String fileName) {
        
    }
    
    def static write(String fileName, String text) {
        Files.write(DIR.resolve(fileName), text.bytes)
    }
    
}
