/*
 * generated by Xtext 2.21.0
 */
package com.raptor.mcmodel.tests

import com.google.inject.Inject
import com.raptor.mcmodel.mcmodel.Model
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import java.util.List
import java.util.ArrayList

@ExtendWith(InjectionExtension)
@InjectWith(McmodelInjectorProvider)
class McmodelParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void loadModel() {
		
//		val cases = #[
//			formatDoubleCase('angle'),
//			formatBooleanCase('blocking'),
//			formatBooleanCase('broken'),
//			formatBooleanCase('cast'),
//			formatDoubleCase('cooldown'),
//			formatDoubleCase('damage'),
//			formatBooleanCase('damaged'),
//			formatBooleanCase('lefthanded'),
//			formatDoubleCase('pull'),
//			formatBooleanCase('pulling'),
//			formatBooleanCase('throwing'),
//			formatDoubleCase('time'),
//			'''customModelDataDefined?="custom_model_data" '=' customModelData=LONG'''
//		]
//		
//		println('''
//			OverridePredicate:
//				"when" '(' (
//					«FOR num : 1..cases.size SEPARATOR '\n| '»OverridePredicate_«num»«ENDFOR»
//				) ')'
//			;
//			
//			«FOR num : 0..<cases.size»
//			OverridePredicate_«num+1» returns OverridePredicate:
//				«cases.get(num)»
//				(
//					«FOR i : (0..<cases.size).filter[it != num] SEPARATOR '\n& '»('&' «cases.get(i)»)?«ENDFOR»
//				)
//			;
//			
//			«ENDFOR»
//		''')

		val cases = #[
			formatBooleanCase('bypassesArmor', 'bypasses_armor'),
			formatBooleanCase('bypassesInvulnerability', 'bypasses_invulnerability'),
			formatBooleanCase('bypassesMagic', 'bypasses_magic'),
			'''"direct_entity" directEntity=EntityPredicate''',
			formatBooleanCase('explosion', 'is_explosion'),
			formatBooleanCase('fire', 'is_fire'),
			formatBooleanCase('magic', 'is_magic'),
			formatBooleanCase('projectile', 'is_projectile'),
			formatBooleanCase('lightning', 'is_lightning'),
			'''"source_entity" sourceEntity=EntityPredicate'''
		]
		
		println('''
			DamageSourcePropertiesLootCondition:
				"damage_source" '(' (
					«FOR num : 1..cases.size SEPARATOR '\n| '»DamageSourcePropertiesLootCondition_«num»«ENDFOR»
				) ')'
			;
			
			«FOR num : 0..<cases.size»
			fragment DamageSourcePropertiesLootCondition_«num+1» returns DamageSourcePropertiesLootCondition:
				«cases.get(num)»
				(
					«FOR i : (0..<cases.size).filter[it != num] SEPARATOR '\n& '»('&' «cases.get(i)»)?«ENDFOR»
				)
			;
			
			«ENDFOR»
		''')

//		val cases = #[
//			formatBooleanCase('onFire', 'is_on_fire'),
//			formatBooleanCase('sneaking', 'is_sneaking'),
//			formatBooleanCase('sprinting', 'is_sprinting'),
//			formatBooleanCase('swimming', 'is_swimming'),
//			formatBooleanCase('baby', 'is_baby')
//		]
//		
//		println('''
//			EntityFlags:
//				«FOR num : 1..cases.size SEPARATOR '\n| '»EntityFlags_«num»«ENDFOR»
//			;
//			
//			«FOR num : 0..<cases.size»
//			EntityFlags_«num+1» returns EntityFlags:
//				«cases.get(num)»
//				(
//					«FOR i : (0..<cases.size).filter[it != num] SEPARATOR '\n& '»('&' «cases.get(i)»)?«ENDFOR»
//				)
//			;
//			
//			«ENDFOR»
//		''')
		
//		val result = parseHelper.parse('''
//			Hello Xtext!
//		''')
//		Assertions.assertNotNull(result)
//		val errors = result.eResource.errors
//		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')
	}
	
	def String formatDoubleCase(String name) { formatDoubleCase(name, name) }
	
	def String formatDoubleCase(String name, String kw) '''«name»Defined?="«kw»" ('='|'==') «name»=PERCENTAGE'''
	
	def String formatBooleanCase(String name) { formatBooleanCase(name, name) }
	
	def String formatBooleanCase(String name, String kw) '''(«name»Defined?='!' "«kw»" | «name»Defined?="«kw»" ('!=' («name»?="false" | "true") | ('='|'==') («name»?="true" | "false")) | «name»?="«kw»")'''
	
}
