/*
 * generated by Xtext 2.21.0
 */
package com.raptor.mcblockstate.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.raptor.mcblockstate.ide.contentassist.antlr.internal.InternalMcblockstateParser;
import com.raptor.mcblockstate.services.McblockstateGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class McblockstateParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(McblockstateGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, McblockstateGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBlockstateAccess().getAlternatives(), "rule__Blockstate__Alternatives");
			builder.put(grammarAccess.getBlockstateAccess().getAlternatives_0_0(), "rule__Blockstate__Alternatives_0_0");
			builder.put(grammarAccess.getBaseCaseConditionAccess().getAlternatives(), "rule__BaseCaseCondition__Alternatives");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getAlternatives(), "rule__BlockstatePropertyPredicate__Alternatives");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getAlternatives_0_2_0(), "rule__BlockstatePropertyPredicate__Alternatives_0_2_0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getAlternatives_0_2_0_0_0(), "rule__BlockstatePropertyPredicate__Alternatives_0_2_0_0_0");
			builder.put(grammarAccess.getBlockstatePropertyValueAccess().getAlternatives(), "rule__BlockstatePropertyValue__Alternatives");
			builder.put(grammarAccess.getModelListAccess().getAlternatives(), "rule__ModelList__Alternatives");
			builder.put(grammarAccess.getModelAccess().getAlternatives_2_0_1_2_2(), "rule__Model__Alternatives_2_0_1_2_2");
			builder.put(grammarAccess.getMCJsonValueAccess().getAlternatives(), "rule__MCJsonValue__Alternatives");
			builder.put(grammarAccess.getMCJsonNumberAccess().getAlternatives(), "rule__MCJsonNumber__Alternatives");
			builder.put(grammarAccess.getMCJsonBooleanAccess().getAlternatives(), "rule__MCJsonBoolean__Alternatives");
			builder.put(grammarAccess.getIdentifierAccess().getAlternatives(), "rule__Identifier__Alternatives");
			builder.put(grammarAccess.getKeywordAccess().getAlternatives(), "rule__Keyword__Alternatives");
			builder.put(grammarAccess.getLONGAccess().getAlternatives(), "rule__LONG__Alternatives");
			builder.put(grammarAccess.getBlockstateAccess().getGroup_0(), "rule__Blockstate__Group_0__0");
			builder.put(grammarAccess.getVariantsBlockstateAccess().getGroup(), "rule__VariantsBlockstate__Group__0");
			builder.put(grammarAccess.getVariantAccess().getGroup(), "rule__Variant__Group__0");
			builder.put(grammarAccess.getVariantAccess().getGroup_1(), "rule__Variant__Group_1__0");
			builder.put(grammarAccess.getVariantAccess().getGroup_1_1(), "rule__Variant__Group_1_1__0");
			builder.put(grammarAccess.getVariantAccess().getGroup_1_1_0(), "rule__Variant__Group_1_1_0__0");
			builder.put(grammarAccess.getBlockstatePropertyAccess().getGroup(), "rule__BlockstateProperty__Group__0");
			builder.put(grammarAccess.getCaseAccess().getGroup(), "rule__Case__Group__0");
			builder.put(grammarAccess.getCaseAccess().getGroup_0(), "rule__Case__Group_0__0");
			builder.put(grammarAccess.getCaseConditionAccess().getGroup(), "rule__CaseCondition__Group__0");
			builder.put(grammarAccess.getCaseConditionAccess().getGroup_1(), "rule__CaseCondition__Group_1__0");
			builder.put(grammarAccess.getCaseConditionAccess().getGroup_1_0(), "rule__CaseCondition__Group_1_0__0");
			builder.put(grammarAccess.getCaseConditionAccess().getGroup_1_0_3(), "rule__CaseCondition__Group_1_0_3__0");
			builder.put(grammarAccess.getBaseCaseConditionAccess().getGroup_0(), "rule__BaseCaseCondition__Group_0__0");
			builder.put(grammarAccess.getBaseCaseConditionAccess().getGroup_1(), "rule__BaseCaseCondition__Group_1__0");
			builder.put(grammarAccess.getBaseCaseConditionAccess().getGroup_1_2(), "rule__BaseCaseCondition__Group_1_2__0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getGroup_0(), "rule__BlockstatePropertyPredicate__Group_0__0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getGroup_0_2(), "rule__BlockstatePropertyPredicate__Group_0_2__0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getGroup_0_2_0_0(), "rule__BlockstatePropertyPredicate__Group_0_2_0_0__0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getGroup_0_2_0_1(), "rule__BlockstatePropertyPredicate__Group_0_2_0_1__0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getGroup_0_2_0_1_2(), "rule__BlockstatePropertyPredicate__Group_0_2_0_1_2__0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getGroup_0_2_0_1_2_1(), "rule__BlockstatePropertyPredicate__Group_0_2_0_1_2_1__0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getGroup_1(), "rule__BlockstatePropertyPredicate__Group_1__0");
			builder.put(grammarAccess.getModelListAccess().getGroup_0(), "rule__ModelList__Group_0__0");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getModelAccess().getGroup_1(), "rule__Model__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getGroup_1_0(), "rule__Model__Group_1_0__0");
			builder.put(grammarAccess.getModelAccess().getGroup_2(), "rule__Model__Group_2__0");
			builder.put(grammarAccess.getModelAccess().getGroup_2_0(), "rule__Model__Group_2_0__0");
			builder.put(grammarAccess.getModelAccess().getGroup_2_0_1_0(), "rule__Model__Group_2_0_1_0__0");
			builder.put(grammarAccess.getModelAccess().getGroup_2_0_1_1(), "rule__Model__Group_2_0_1_1__0");
			builder.put(grammarAccess.getModelAccess().getGroup_2_0_1_2(), "rule__Model__Group_2_0_1_2__0");
			builder.put(grammarAccess.getMCJsonObjectAccess().getGroup(), "rule__MCJsonObject__Group__0");
			builder.put(grammarAccess.getMCJsonObjectAccess().getGroup_2(), "rule__MCJsonObject__Group_2__0");
			builder.put(grammarAccess.getMCJsonObjectAccess().getGroup_2_1(), "rule__MCJsonObject__Group_2_1__0");
			builder.put(grammarAccess.getMCJsonEntryAccess().getGroup(), "rule__MCJsonEntry__Group__0");
			builder.put(grammarAccess.getMCJsonArrayAccess().getGroup(), "rule__MCJsonArray__Group__0");
			builder.put(grammarAccess.getMCJsonArrayAccess().getGroup_2(), "rule__MCJsonArray__Group_2__0");
			builder.put(grammarAccess.getMCJsonArrayAccess().getGroup_2_1(), "rule__MCJsonArray__Group_2_1__0");
			builder.put(grammarAccess.getMCJsonBooleanAccess().getGroup_1(), "rule__MCJsonBoolean__Group_1__0");
			builder.put(grammarAccess.getMCJsonNullAccess().getGroup(), "rule__MCJsonNull__Group__0");
			builder.put(grammarAccess.getNamespacedIDAccess().getGroup(), "rule__NamespacedID__Group__0");
			builder.put(grammarAccess.getNamespacedIDAccess().getGroup_1(), "rule__NamespacedID__Group_1__0");
			builder.put(grammarAccess.getNamespacedIDAccess().getGroup_1_0(), "rule__NamespacedID__Group_1_0__0");
			builder.put(grammarAccess.getNamespacedLocationAccess().getGroup(), "rule__NamespacedLocation__Group__0");
			builder.put(grammarAccess.getNamespacedLocationAccess().getGroup_1(), "rule__NamespacedLocation__Group_1__0");
			builder.put(grammarAccess.getNamespacedLocationAccess().getGroup_1_0(), "rule__NamespacedLocation__Group_1_0__0");
			builder.put(grammarAccess.getNamespacedLocationAccess().getGroup_2(), "rule__NamespacedLocation__Group_2__0");
			builder.put(grammarAccess.getNamespacedLocationAccess().getGroup_2_0(), "rule__NamespacedLocation__Group_2_0__0");
			builder.put(grammarAccess.getKeyAccess().getGroup(), "rule__Key__Group__0");
			builder.put(grammarAccess.getKeyAccess().getGroup_1(), "rule__Key__Group_1__0");
			builder.put(grammarAccess.getVariantsBlockstateAccess().getVariantsAssignment_3(), "rule__VariantsBlockstate__VariantsAssignment_3");
			builder.put(grammarAccess.getVariantAccess().getPropertiesAssignment_1_0(), "rule__Variant__PropertiesAssignment_1_0");
			builder.put(grammarAccess.getVariantAccess().getPropertiesAssignment_1_1_0_1(), "rule__Variant__PropertiesAssignment_1_1_0_1");
			builder.put(grammarAccess.getVariantAccess().getModelsAssignment_4(), "rule__Variant__ModelsAssignment_4");
			builder.put(grammarAccess.getBlockstatePropertyAccess().getNameAssignment_0(), "rule__BlockstateProperty__NameAssignment_0");
			builder.put(grammarAccess.getBlockstatePropertyAccess().getValueAssignment_2(), "rule__BlockstateProperty__ValueAssignment_2");
			builder.put(grammarAccess.getMultipartBlockstateAccess().getCasesAssignment(), "rule__MultipartBlockstate__CasesAssignment");
			builder.put(grammarAccess.getCaseAccess().getConditionAssignment_0_2(), "rule__Case__ConditionAssignment_0_2");
			builder.put(grammarAccess.getCaseAccess().getModelsAssignment_2(), "rule__Case__ModelsAssignment_2");
			builder.put(grammarAccess.getCaseConditionAccess().getOptionsAssignment_1_0_2(), "rule__CaseCondition__OptionsAssignment_1_0_2");
			builder.put(grammarAccess.getCaseConditionAccess().getOptionsAssignment_1_0_3_1(), "rule__CaseCondition__OptionsAssignment_1_0_3_1");
			builder.put(grammarAccess.getBaseCaseConditionAccess().getPropertiesAssignment_1_1(), "rule__BaseCaseCondition__PropertiesAssignment_1_1");
			builder.put(grammarAccess.getBaseCaseConditionAccess().getPropertiesAssignment_1_2_1(), "rule__BaseCaseCondition__PropertiesAssignment_1_2_1");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getNameAssignment_0_1(), "rule__BlockstatePropertyPredicate__NameAssignment_0_1");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getValuesAssignment_0_2_0_0_1(), "rule__BlockstatePropertyPredicate__ValuesAssignment_0_2_0_0_1");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getValuesAssignment_0_2_0_1_2_0(), "rule__BlockstatePropertyPredicate__ValuesAssignment_0_2_0_1_2_0");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getValuesAssignment_0_2_0_1_2_1_1(), "rule__BlockstatePropertyPredicate__ValuesAssignment_0_2_0_1_2_1_1");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getInvertedAssignment_1_1(), "rule__BlockstatePropertyPredicate__InvertedAssignment_1_1");
			builder.put(grammarAccess.getBlockstatePropertyPredicateAccess().getNameAssignment_1_2(), "rule__BlockstatePropertyPredicate__NameAssignment_1_2");
			builder.put(grammarAccess.getCustomBlockstateAccess().getJsonAssignment(), "rule__CustomBlockstate__JsonAssignment");
			builder.put(grammarAccess.getModelListAccess().getModelsAssignment_0_2(), "rule__ModelList__ModelsAssignment_0_2");
			builder.put(grammarAccess.getModelListAccess().getModelsAssignment_1(), "rule__ModelList__ModelsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getLocationAssignment_0(), "rule__Model__LocationAssignment_0");
			builder.put(grammarAccess.getModelAccess().getWeightDefinedAssignment_1_0_0(), "rule__Model__WeightDefinedAssignment_1_0_0");
			builder.put(grammarAccess.getModelAccess().getWeightAssignment_1_0_1(), "rule__Model__WeightAssignment_1_0_1");
			builder.put(grammarAccess.getModelAccess().getXDefinedAssignment_2_0_1_0_0(), "rule__Model__XDefinedAssignment_2_0_1_0_0");
			builder.put(grammarAccess.getModelAccess().getXAssignment_2_0_1_0_2(), "rule__Model__XAssignment_2_0_1_0_2");
			builder.put(grammarAccess.getModelAccess().getYDefinedAssignment_2_0_1_1_0(), "rule__Model__YDefinedAssignment_2_0_1_1_0");
			builder.put(grammarAccess.getModelAccess().getYAssignment_2_0_1_1_2(), "rule__Model__YAssignment_2_0_1_1_2");
			builder.put(grammarAccess.getModelAccess().getUvlockDefinedAssignment_2_0_1_2_0(), "rule__Model__UvlockDefinedAssignment_2_0_1_2_0");
			builder.put(grammarAccess.getModelAccess().getUvlockAssignment_2_0_1_2_2_0(), "rule__Model__UvlockAssignment_2_0_1_2_2_0");
			builder.put(grammarAccess.getMCJsonObjectAccess().getEntriesAssignment_2_0(), "rule__MCJsonObject__EntriesAssignment_2_0");
			builder.put(grammarAccess.getMCJsonObjectAccess().getEntriesAssignment_2_1_1(), "rule__MCJsonObject__EntriesAssignment_2_1_1");
			builder.put(grammarAccess.getMCJsonEntryAccess().getNameAssignment_0(), "rule__MCJsonEntry__NameAssignment_0");
			builder.put(grammarAccess.getMCJsonEntryAccess().getValueAssignment_2(), "rule__MCJsonEntry__ValueAssignment_2");
			builder.put(grammarAccess.getMCJsonArrayAccess().getElementsAssignment_2_0(), "rule__MCJsonArray__ElementsAssignment_2_0");
			builder.put(grammarAccess.getMCJsonArrayAccess().getElementsAssignment_2_1_1(), "rule__MCJsonArray__ElementsAssignment_2_1_1");
			builder.put(grammarAccess.getMCJsonStringAccess().getValueAssignment(), "rule__MCJsonString__ValueAssignment");
			builder.put(grammarAccess.getMCJsonIntegralAccess().getValueAssignment(), "rule__MCJsonIntegral__ValueAssignment");
			builder.put(grammarAccess.getMCJsonFloatingPointAccess().getValueAssignment(), "rule__MCJsonFloatingPoint__ValueAssignment");
			builder.put(grammarAccess.getMCJsonBooleanAccess().getValueAssignment_0(), "rule__MCJsonBoolean__ValueAssignment_0");
			builder.put(grammarAccess.getModelAccess().getUnorderedGroup_2_0_1(), "rule__Model__UnorderedGroup_2_0_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private McblockstateGrammarAccess grammarAccess;

	@Override
	protected InternalMcblockstateParser createParser() {
		InternalMcblockstateParser result = new InternalMcblockstateParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public McblockstateGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(McblockstateGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
